/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Address: AddressObject
      AddressConnection: AddressConnectionObject
      AddressEdge: AddressEdgeObject
      AggregateAddress: AggregateAddressObject
      Contact: ContactObject
      ContactConnection: ContactConnectionObject
      ContactEdge: ContactEdgeObject
      AggregateContact: AggregateContactObject
      Company: CompanyObject
      Attachment: AttachmentObject
      CompanyMember: CompanyMemberObject
      Plan: PlanObject
      CompanyConnection: CompanyConnectionObject
      CompanyEdge: CompanyEdgeObject
      AggregateCompany: AggregateCompanyObject
      CompanyMemberConnection: CompanyMemberConnectionObject
      CompanyMemberEdge: CompanyMemberEdgeObject
      AggregateCompanyMember: AggregateCompanyMemberObject
      Customer: CustomerObject
      MeansTestedFee: MeansTestedFeeObject
      BasicDailyFee: BasicDailyFeeObject
      CustomerConnection: CustomerConnectionObject
      CustomerEdge: CustomerEdgeObject
      AggregateCustomer: AggregateCustomerObject
      Integration: IntegrationObject
      IntegrationConnection: IntegrationConnectionObject
      IntegrationEdge: IntegrationEdgeObject
      AggregateIntegration: AggregateIntegrationObject
      Service: ServiceObject
      ServiceConnection: ServiceConnectionObject
      ServiceEdge: ServiceEdgeObject
      AggregateService: AggregateServiceObject
      Project: ProjectObject
      ProjectService: ProjectServiceObject
      ProjectServiceRule: ProjectServiceRuleObject
      ProjectConnection: ProjectConnectionObject
      ProjectEdge: ProjectEdgeObject
      AggregateProject: AggregateProjectObject
      ProjectServiceConnection: ProjectServiceConnectionObject
      ProjectServiceEdge: ProjectServiceEdgeObject
      AggregateProjectService: AggregateProjectServiceObject
      ProjectServiceRuleConnection: ProjectServiceRuleConnectionObject
      ProjectServiceRuleEdge: ProjectServiceRuleEdgeObject
      AggregateProjectServiceRule: AggregateProjectServiceRuleObject
      PlanConnection: PlanConnectionObject
      PlanEdge: PlanEdgeObject
      AggregatePlan: AggregatePlanObject
      Session: SessionObject
      SessionConnection: SessionConnectionObject
      SessionEdge: SessionEdgeObject
      AggregateSession: AggregateSessionObject
      TimeSheet: TimeSheetObject
      TimeSheetEntry: TimeSheetEntryObject
      TimeSheetConnection: TimeSheetConnectionObject
      TimeSheetEdge: TimeSheetEdgeObject
      AggregateTimeSheet: AggregateTimeSheetObject
      AttachmentConnection: AttachmentConnectionObject
      AttachmentEdge: AttachmentEdgeObject
      AggregateAttachment: AggregateAttachmentObject
      TimeSheetEntryConnection: TimeSheetEntryConnectionObject
      TimeSheetEntryEdge: TimeSheetEntryEdgeObject
      AggregateTimeSheetEntry: AggregateTimeSheetEntryObject
      InvoiceItemEntry: InvoiceItemEntryObject
      Invoice: InvoiceObject
      InvoiceItemEntryConnection: InvoiceItemEntryConnectionObject
      InvoiceItemEntryEdge: InvoiceItemEntryEdgeObject
      AggregateInvoiceItemEntry: AggregateInvoiceItemEntryObject
      InvoiceConnection: InvoiceConnectionObject
      InvoiceEdge: InvoiceEdgeObject
      AggregateInvoice: AggregateInvoiceObject
      MainAccount: MainAccountObject
      MainAccountConnection: MainAccountConnectionObject
      MainAccountEdge: MainAccountEdgeObject
      AggregateMainAccount: AggregateMainAccountObject
      LedgerJournal: LedgerJournalObject
      LedgerJournalConnection: LedgerJournalConnectionObject
      LedgerJournalEdge: LedgerJournalEdgeObject
      AggregateLedgerJournal: AggregateLedgerJournalObject
      LedgerTransaction: LedgerTransactionObject
      LedgerTransactionConnection: LedgerTransactionConnectionObject
      LedgerTransactionEdge: LedgerTransactionEdgeObject
      AggregateLedgerTransaction: AggregateLedgerTransactionObject
      LedgerPosting: LedgerPostingObject
      LedgerPostingConnection: LedgerPostingConnectionObject
      LedgerPostingEdge: LedgerPostingEdgeObject
      AggregateLedgerPosting: AggregateLedgerPostingObject
      Bank: BankObject
      BankConnection: BankConnectionObject
      BankEdge: BankEdgeObject
      AggregateBank: AggregateBankObject
      BankTransaction: BankTransactionObject
      BankTransactionConnection: BankTransactionConnectionObject
      BankTransactionEdge: BankTransactionEdgeObject
      AggregateBankTransaction: AggregateBankTransactionObject
      WareHouse: WareHouseObject
      WareHouseConnection: WareHouseConnectionObject
      WareHouseEdge: WareHouseEdgeObject
      AggregateWareHouse: AggregateWareHouseObject
      Inventory: InventoryObject
      InventoryConnection: InventoryConnectionObject
      InventoryEdge: InventoryEdgeObject
      AggregateInventory: AggregateInventoryObject
      Supplier: SupplierObject
      SupplierConnection: SupplierConnectionObject
      SupplierEdge: SupplierEdgeObject
      AggregateSupplier: AggregateSupplierObject
      AssetGroup: AssetGroupObject
      AssetGroupConnection: AssetGroupConnectionObject
      AssetGroupEdge: AssetGroupEdgeObject
      AggregateAssetGroup: AggregateAssetGroupObject
      Asset: AssetObject
      AssetConnection: AssetConnectionObject
      AssetEdge: AssetEdgeObject
      AggregateAsset: AggregateAssetObject
      PurchaseOrder: PurchaseOrderObject
      PurchaseOrderConnection: PurchaseOrderConnectionObject
      PurchaseOrderEdge: PurchaseOrderEdgeObject
      AggregatePurchaseOrder: AggregatePurchaseOrderObject
      PoReceipt: PoReceiptObject
      PoReceiptConnection: PoReceiptConnectionObject
      PoReceiptEdge: PoReceiptEdgeObject
      AggregatePoReceipt: AggregatePoReceiptObject
      InventoryOnHand: InventoryOnHandObject
      InventoryOnHandConnection: InventoryOnHandConnectionObject
      InventoryOnHandEdge: InventoryOnHandEdgeObject
      AggregateInventoryOnHand: AggregateInventoryOnHandObject
      PurchaseOrderLine: PurchaseOrderLineObject
      PurchaseOrderLineConnection: PurchaseOrderLineConnectionObject
      PurchaseOrderLineEdge: PurchaseOrderLineEdgeObject
      AggregatePurchaseOrderLine: AggregatePurchaseOrderLineObject
      ApInvoice: ApInvoiceObject
      ApInvoiceConnection: ApInvoiceConnectionObject
      ApInvoiceEdge: ApInvoiceEdgeObject
      AggregateApInvoice: AggregateApInvoiceObject
      SalesOrder: SalesOrderObject
      SalesOrderConnection: SalesOrderConnectionObject
      SalesOrderEdge: SalesOrderEdgeObject
      AggregateSalesOrder: AggregateSalesOrderObject
      SalesOrderLine: SalesOrderLineObject
      SalesOrderLineConnection: SalesOrderLineConnectionObject
      SalesOrderLineEdge: SalesOrderLineEdgeObject
      AggregateSalesOrderLine: AggregateSalesOrderLineObject
      PredictedSalesValueByCompany: PredictedSalesValueByCompanyObject
      PredictedSalesValueByCompanyConnection: PredictedSalesValueByCompanyConnectionObject
      PredictedSalesValueByCompanyEdge: PredictedSalesValueByCompanyEdgeObject
      AggregatePredictedSalesValueByCompany: AggregatePredictedSalesValueByCompanyObject
      PredictedSalesQuantityOfItemsByCompany: PredictedSalesQuantityOfItemsByCompanyObject
      PredictedSalesQuantityOfItemsByCompanyConnection: PredictedSalesQuantityOfItemsByCompanyConnectionObject
      PredictedSalesQuantityOfItemsByCompanyEdge: PredictedSalesQuantityOfItemsByCompanyEdgeObject
      AggregatePredictedSalesQuantityOfItemsByCompany: AggregatePredictedSalesQuantityOfItemsByCompanyObject
      MedicareService: MedicareServiceObject
      MedicareServiceConnection: MedicareServiceConnectionObject
      MedicareServiceEdge: MedicareServiceEdgeObject
      AggregateMedicareService: AggregateMedicareServiceObject
      Patient: PatientObject
      Name: NameObject
      PatientConnection: PatientConnectionObject
      PatientEdge: PatientEdgeObject
      AggregatePatient: AggregatePatientObject
      NameConnection: NameConnectionObject
      NameEdge: NameEdgeObject
      AggregateName: AggregateNameObject
      HealthcareProvider: HealthcareProviderObject
      HealthcareProviderConnection: HealthcareProviderConnectionObject
      HealthcareProviderEdge: HealthcareProviderEdgeObject
      AggregateHealthcareProvider: AggregateHealthcareProviderObject
      ImmunisationSchedule: ImmunisationScheduleObject
      Disease: DiseaseObject
      VaccineBrand: VaccineBrandObject
      ImmunisationScheduleConnection: ImmunisationScheduleConnectionObject
      ImmunisationScheduleEdge: ImmunisationScheduleEdgeObject
      AggregateImmunisationSchedule: AggregateImmunisationScheduleObject
      VaccineBrandConnection: VaccineBrandConnectionObject
      VaccineBrandEdge: VaccineBrandEdgeObject
      AggregateVaccineBrand: AggregateVaccineBrandObject
      DiseaseConnection: DiseaseConnectionObject
      DiseaseEdge: DiseaseEdgeObject
      AggregateDisease: AggregateDiseaseObject
      HILog: HILogObject
      HILogConnection: HILogConnectionObject
      HILogEdge: HILogEdgeObject
      AggregateHILog: AggregateHILogObject
      PbsOrganisation: PbsOrganisationObject
      PbsOrganisationConnection: PbsOrganisationConnectionObject
      PbsOrganisationEdge: PbsOrganisationEdgeObject
      AggregatePbsOrganisation: AggregatePbsOrganisationObject
      PbsTPP: PbsTPPObject
      PbsTPPConnection: PbsTPPConnectionObject
      PbsTPPEdge: PbsTPPEdgeObject
      AggregatePbsTPP: AggregatePbsTPPObject
      MeansTestedFeeConnection: MeansTestedFeeConnectionObject
      MeansTestedFeeEdge: MeansTestedFeeEdgeObject
      AggregateMeansTestedFee: AggregateMeansTestedFeeObject
      MeansTestLimits: MeansTestLimitsObject
      MeansTestLimitsConnection: MeansTestLimitsConnectionObject
      MeansTestLimitsEdge: MeansTestLimitsEdgeObject
      AggregateMeansTestLimits: AggregateMeansTestLimitsObject
      BasicDailyFeeConnection: BasicDailyFeeConnectionObject
      BasicDailyFeeEdge: BasicDailyFeeEdgeObject
      AggregateBasicDailyFee: AggregateBasicDailyFeeObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      AddressSubscriptionPayload: AddressSubscriptionPayloadObject
      AddressPreviousValues: AddressPreviousValuesObject
      ContactSubscriptionPayload: ContactSubscriptionPayloadObject
      ContactPreviousValues: ContactPreviousValuesObject
      CompanySubscriptionPayload: CompanySubscriptionPayloadObject
      CompanyPreviousValues: CompanyPreviousValuesObject
      CompanyMemberSubscriptionPayload: CompanyMemberSubscriptionPayloadObject
      CompanyMemberPreviousValues: CompanyMemberPreviousValuesObject
      CustomerSubscriptionPayload: CustomerSubscriptionPayloadObject
      CustomerPreviousValues: CustomerPreviousValuesObject
      IntegrationSubscriptionPayload: IntegrationSubscriptionPayloadObject
      IntegrationPreviousValues: IntegrationPreviousValuesObject
      ServiceSubscriptionPayload: ServiceSubscriptionPayloadObject
      ServicePreviousValues: ServicePreviousValuesObject
      ProjectSubscriptionPayload: ProjectSubscriptionPayloadObject
      ProjectPreviousValues: ProjectPreviousValuesObject
      ProjectServiceSubscriptionPayload: ProjectServiceSubscriptionPayloadObject
      ProjectServicePreviousValues: ProjectServicePreviousValuesObject
      ProjectServiceRuleSubscriptionPayload: ProjectServiceRuleSubscriptionPayloadObject
      ProjectServiceRulePreviousValues: ProjectServiceRulePreviousValuesObject
      PlanSubscriptionPayload: PlanSubscriptionPayloadObject
      PlanPreviousValues: PlanPreviousValuesObject
      SessionSubscriptionPayload: SessionSubscriptionPayloadObject
      SessionPreviousValues: SessionPreviousValuesObject
      TimeSheetSubscriptionPayload: TimeSheetSubscriptionPayloadObject
      TimeSheetPreviousValues: TimeSheetPreviousValuesObject
      AttachmentSubscriptionPayload: AttachmentSubscriptionPayloadObject
      AttachmentPreviousValues: AttachmentPreviousValuesObject
      TimeSheetEntrySubscriptionPayload: TimeSheetEntrySubscriptionPayloadObject
      TimeSheetEntryPreviousValues: TimeSheetEntryPreviousValuesObject
      InvoiceItemEntrySubscriptionPayload: InvoiceItemEntrySubscriptionPayloadObject
      InvoiceItemEntryPreviousValues: InvoiceItemEntryPreviousValuesObject
      InvoiceSubscriptionPayload: InvoiceSubscriptionPayloadObject
      InvoicePreviousValues: InvoicePreviousValuesObject
      MainAccountSubscriptionPayload: MainAccountSubscriptionPayloadObject
      MainAccountPreviousValues: MainAccountPreviousValuesObject
      LedgerJournalSubscriptionPayload: LedgerJournalSubscriptionPayloadObject
      LedgerJournalPreviousValues: LedgerJournalPreviousValuesObject
      LedgerTransactionSubscriptionPayload: LedgerTransactionSubscriptionPayloadObject
      LedgerTransactionPreviousValues: LedgerTransactionPreviousValuesObject
      LedgerPostingSubscriptionPayload: LedgerPostingSubscriptionPayloadObject
      LedgerPostingPreviousValues: LedgerPostingPreviousValuesObject
      BankSubscriptionPayload: BankSubscriptionPayloadObject
      BankPreviousValues: BankPreviousValuesObject
      BankTransactionSubscriptionPayload: BankTransactionSubscriptionPayloadObject
      BankTransactionPreviousValues: BankTransactionPreviousValuesObject
      WareHouseSubscriptionPayload: WareHouseSubscriptionPayloadObject
      WareHousePreviousValues: WareHousePreviousValuesObject
      InventorySubscriptionPayload: InventorySubscriptionPayloadObject
      InventoryPreviousValues: InventoryPreviousValuesObject
      SupplierSubscriptionPayload: SupplierSubscriptionPayloadObject
      SupplierPreviousValues: SupplierPreviousValuesObject
      AssetGroupSubscriptionPayload: AssetGroupSubscriptionPayloadObject
      AssetGroupPreviousValues: AssetGroupPreviousValuesObject
      AssetSubscriptionPayload: AssetSubscriptionPayloadObject
      AssetPreviousValues: AssetPreviousValuesObject
      PurchaseOrderSubscriptionPayload: PurchaseOrderSubscriptionPayloadObject
      PurchaseOrderPreviousValues: PurchaseOrderPreviousValuesObject
      PoReceiptSubscriptionPayload: PoReceiptSubscriptionPayloadObject
      PoReceiptPreviousValues: PoReceiptPreviousValuesObject
      InventoryOnHandSubscriptionPayload: InventoryOnHandSubscriptionPayloadObject
      InventoryOnHandPreviousValues: InventoryOnHandPreviousValuesObject
      PurchaseOrderLineSubscriptionPayload: PurchaseOrderLineSubscriptionPayloadObject
      PurchaseOrderLinePreviousValues: PurchaseOrderLinePreviousValuesObject
      ApInvoiceSubscriptionPayload: ApInvoiceSubscriptionPayloadObject
      ApInvoicePreviousValues: ApInvoicePreviousValuesObject
      SalesOrderSubscriptionPayload: SalesOrderSubscriptionPayloadObject
      SalesOrderPreviousValues: SalesOrderPreviousValuesObject
      SalesOrderLineSubscriptionPayload: SalesOrderLineSubscriptionPayloadObject
      SalesOrderLinePreviousValues: SalesOrderLinePreviousValuesObject
      PredictedSalesValueByCompanySubscriptionPayload: PredictedSalesValueByCompanySubscriptionPayloadObject
      PredictedSalesValueByCompanyPreviousValues: PredictedSalesValueByCompanyPreviousValuesObject
      PredictedSalesQuantityOfItemsByCompanySubscriptionPayload: PredictedSalesQuantityOfItemsByCompanySubscriptionPayloadObject
      PredictedSalesQuantityOfItemsByCompanyPreviousValues: PredictedSalesQuantityOfItemsByCompanyPreviousValuesObject
      MedicareServiceSubscriptionPayload: MedicareServiceSubscriptionPayloadObject
      MedicareServicePreviousValues: MedicareServicePreviousValuesObject
      PatientSubscriptionPayload: PatientSubscriptionPayloadObject
      PatientPreviousValues: PatientPreviousValuesObject
      NameSubscriptionPayload: NameSubscriptionPayloadObject
      NamePreviousValues: NamePreviousValuesObject
      HealthcareProviderSubscriptionPayload: HealthcareProviderSubscriptionPayloadObject
      HealthcareProviderPreviousValues: HealthcareProviderPreviousValuesObject
      ImmunisationScheduleSubscriptionPayload: ImmunisationScheduleSubscriptionPayloadObject
      ImmunisationSchedulePreviousValues: ImmunisationSchedulePreviousValuesObject
      VaccineBrandSubscriptionPayload: VaccineBrandSubscriptionPayloadObject
      VaccineBrandPreviousValues: VaccineBrandPreviousValuesObject
      DiseaseSubscriptionPayload: DiseaseSubscriptionPayloadObject
      DiseasePreviousValues: DiseasePreviousValuesObject
      HILogSubscriptionPayload: HILogSubscriptionPayloadObject
      HILogPreviousValues: HILogPreviousValuesObject
      PbsOrganisationSubscriptionPayload: PbsOrganisationSubscriptionPayloadObject
      PbsOrganisationPreviousValues: PbsOrganisationPreviousValuesObject
      PbsTPPSubscriptionPayload: PbsTPPSubscriptionPayloadObject
      PbsTPPPreviousValues: PbsTPPPreviousValuesObject
      MeansTestedFeeSubscriptionPayload: MeansTestedFeeSubscriptionPayloadObject
      MeansTestedFeePreviousValues: MeansTestedFeePreviousValuesObject
      MeansTestLimitsSubscriptionPayload: MeansTestLimitsSubscriptionPayloadObject
      MeansTestLimitsPreviousValues: MeansTestLimitsPreviousValuesObject
      BasicDailyFeeSubscriptionPayload: BasicDailyFeeSubscriptionPayloadObject
      BasicDailyFeePreviousValues: BasicDailyFeePreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Address: AddressFieldDetails
      AddressConnection: AddressConnectionFieldDetails
      AddressEdge: AddressEdgeFieldDetails
      AggregateAddress: AggregateAddressFieldDetails
      Contact: ContactFieldDetails
      ContactConnection: ContactConnectionFieldDetails
      ContactEdge: ContactEdgeFieldDetails
      AggregateContact: AggregateContactFieldDetails
      Company: CompanyFieldDetails
      Attachment: AttachmentFieldDetails
      CompanyMember: CompanyMemberFieldDetails
      Plan: PlanFieldDetails
      CompanyConnection: CompanyConnectionFieldDetails
      CompanyEdge: CompanyEdgeFieldDetails
      AggregateCompany: AggregateCompanyFieldDetails
      CompanyMemberConnection: CompanyMemberConnectionFieldDetails
      CompanyMemberEdge: CompanyMemberEdgeFieldDetails
      AggregateCompanyMember: AggregateCompanyMemberFieldDetails
      Customer: CustomerFieldDetails
      MeansTestedFee: MeansTestedFeeFieldDetails
      BasicDailyFee: BasicDailyFeeFieldDetails
      CustomerConnection: CustomerConnectionFieldDetails
      CustomerEdge: CustomerEdgeFieldDetails
      AggregateCustomer: AggregateCustomerFieldDetails
      Integration: IntegrationFieldDetails
      IntegrationConnection: IntegrationConnectionFieldDetails
      IntegrationEdge: IntegrationEdgeFieldDetails
      AggregateIntegration: AggregateIntegrationFieldDetails
      Service: ServiceFieldDetails
      ServiceConnection: ServiceConnectionFieldDetails
      ServiceEdge: ServiceEdgeFieldDetails
      AggregateService: AggregateServiceFieldDetails
      Project: ProjectFieldDetails
      ProjectService: ProjectServiceFieldDetails
      ProjectServiceRule: ProjectServiceRuleFieldDetails
      ProjectConnection: ProjectConnectionFieldDetails
      ProjectEdge: ProjectEdgeFieldDetails
      AggregateProject: AggregateProjectFieldDetails
      ProjectServiceConnection: ProjectServiceConnectionFieldDetails
      ProjectServiceEdge: ProjectServiceEdgeFieldDetails
      AggregateProjectService: AggregateProjectServiceFieldDetails
      ProjectServiceRuleConnection: ProjectServiceRuleConnectionFieldDetails
      ProjectServiceRuleEdge: ProjectServiceRuleEdgeFieldDetails
      AggregateProjectServiceRule: AggregateProjectServiceRuleFieldDetails
      PlanConnection: PlanConnectionFieldDetails
      PlanEdge: PlanEdgeFieldDetails
      AggregatePlan: AggregatePlanFieldDetails
      Session: SessionFieldDetails
      SessionConnection: SessionConnectionFieldDetails
      SessionEdge: SessionEdgeFieldDetails
      AggregateSession: AggregateSessionFieldDetails
      TimeSheet: TimeSheetFieldDetails
      TimeSheetEntry: TimeSheetEntryFieldDetails
      TimeSheetConnection: TimeSheetConnectionFieldDetails
      TimeSheetEdge: TimeSheetEdgeFieldDetails
      AggregateTimeSheet: AggregateTimeSheetFieldDetails
      AttachmentConnection: AttachmentConnectionFieldDetails
      AttachmentEdge: AttachmentEdgeFieldDetails
      AggregateAttachment: AggregateAttachmentFieldDetails
      TimeSheetEntryConnection: TimeSheetEntryConnectionFieldDetails
      TimeSheetEntryEdge: TimeSheetEntryEdgeFieldDetails
      AggregateTimeSheetEntry: AggregateTimeSheetEntryFieldDetails
      InvoiceItemEntry: InvoiceItemEntryFieldDetails
      Invoice: InvoiceFieldDetails
      InvoiceItemEntryConnection: InvoiceItemEntryConnectionFieldDetails
      InvoiceItemEntryEdge: InvoiceItemEntryEdgeFieldDetails
      AggregateInvoiceItemEntry: AggregateInvoiceItemEntryFieldDetails
      InvoiceConnection: InvoiceConnectionFieldDetails
      InvoiceEdge: InvoiceEdgeFieldDetails
      AggregateInvoice: AggregateInvoiceFieldDetails
      MainAccount: MainAccountFieldDetails
      MainAccountConnection: MainAccountConnectionFieldDetails
      MainAccountEdge: MainAccountEdgeFieldDetails
      AggregateMainAccount: AggregateMainAccountFieldDetails
      LedgerJournal: LedgerJournalFieldDetails
      LedgerJournalConnection: LedgerJournalConnectionFieldDetails
      LedgerJournalEdge: LedgerJournalEdgeFieldDetails
      AggregateLedgerJournal: AggregateLedgerJournalFieldDetails
      LedgerTransaction: LedgerTransactionFieldDetails
      LedgerTransactionConnection: LedgerTransactionConnectionFieldDetails
      LedgerTransactionEdge: LedgerTransactionEdgeFieldDetails
      AggregateLedgerTransaction: AggregateLedgerTransactionFieldDetails
      LedgerPosting: LedgerPostingFieldDetails
      LedgerPostingConnection: LedgerPostingConnectionFieldDetails
      LedgerPostingEdge: LedgerPostingEdgeFieldDetails
      AggregateLedgerPosting: AggregateLedgerPostingFieldDetails
      Bank: BankFieldDetails
      BankConnection: BankConnectionFieldDetails
      BankEdge: BankEdgeFieldDetails
      AggregateBank: AggregateBankFieldDetails
      BankTransaction: BankTransactionFieldDetails
      BankTransactionConnection: BankTransactionConnectionFieldDetails
      BankTransactionEdge: BankTransactionEdgeFieldDetails
      AggregateBankTransaction: AggregateBankTransactionFieldDetails
      WareHouse: WareHouseFieldDetails
      WareHouseConnection: WareHouseConnectionFieldDetails
      WareHouseEdge: WareHouseEdgeFieldDetails
      AggregateWareHouse: AggregateWareHouseFieldDetails
      Inventory: InventoryFieldDetails
      InventoryConnection: InventoryConnectionFieldDetails
      InventoryEdge: InventoryEdgeFieldDetails
      AggregateInventory: AggregateInventoryFieldDetails
      Supplier: SupplierFieldDetails
      SupplierConnection: SupplierConnectionFieldDetails
      SupplierEdge: SupplierEdgeFieldDetails
      AggregateSupplier: AggregateSupplierFieldDetails
      AssetGroup: AssetGroupFieldDetails
      AssetGroupConnection: AssetGroupConnectionFieldDetails
      AssetGroupEdge: AssetGroupEdgeFieldDetails
      AggregateAssetGroup: AggregateAssetGroupFieldDetails
      Asset: AssetFieldDetails
      AssetConnection: AssetConnectionFieldDetails
      AssetEdge: AssetEdgeFieldDetails
      AggregateAsset: AggregateAssetFieldDetails
      PurchaseOrder: PurchaseOrderFieldDetails
      PurchaseOrderConnection: PurchaseOrderConnectionFieldDetails
      PurchaseOrderEdge: PurchaseOrderEdgeFieldDetails
      AggregatePurchaseOrder: AggregatePurchaseOrderFieldDetails
      PoReceipt: PoReceiptFieldDetails
      PoReceiptConnection: PoReceiptConnectionFieldDetails
      PoReceiptEdge: PoReceiptEdgeFieldDetails
      AggregatePoReceipt: AggregatePoReceiptFieldDetails
      InventoryOnHand: InventoryOnHandFieldDetails
      InventoryOnHandConnection: InventoryOnHandConnectionFieldDetails
      InventoryOnHandEdge: InventoryOnHandEdgeFieldDetails
      AggregateInventoryOnHand: AggregateInventoryOnHandFieldDetails
      PurchaseOrderLine: PurchaseOrderLineFieldDetails
      PurchaseOrderLineConnection: PurchaseOrderLineConnectionFieldDetails
      PurchaseOrderLineEdge: PurchaseOrderLineEdgeFieldDetails
      AggregatePurchaseOrderLine: AggregatePurchaseOrderLineFieldDetails
      ApInvoice: ApInvoiceFieldDetails
      ApInvoiceConnection: ApInvoiceConnectionFieldDetails
      ApInvoiceEdge: ApInvoiceEdgeFieldDetails
      AggregateApInvoice: AggregateApInvoiceFieldDetails
      SalesOrder: SalesOrderFieldDetails
      SalesOrderConnection: SalesOrderConnectionFieldDetails
      SalesOrderEdge: SalesOrderEdgeFieldDetails
      AggregateSalesOrder: AggregateSalesOrderFieldDetails
      SalesOrderLine: SalesOrderLineFieldDetails
      SalesOrderLineConnection: SalesOrderLineConnectionFieldDetails
      SalesOrderLineEdge: SalesOrderLineEdgeFieldDetails
      AggregateSalesOrderLine: AggregateSalesOrderLineFieldDetails
      PredictedSalesValueByCompany: PredictedSalesValueByCompanyFieldDetails
      PredictedSalesValueByCompanyConnection: PredictedSalesValueByCompanyConnectionFieldDetails
      PredictedSalesValueByCompanyEdge: PredictedSalesValueByCompanyEdgeFieldDetails
      AggregatePredictedSalesValueByCompany: AggregatePredictedSalesValueByCompanyFieldDetails
      PredictedSalesQuantityOfItemsByCompany: PredictedSalesQuantityOfItemsByCompanyFieldDetails
      PredictedSalesQuantityOfItemsByCompanyConnection: PredictedSalesQuantityOfItemsByCompanyConnectionFieldDetails
      PredictedSalesQuantityOfItemsByCompanyEdge: PredictedSalesQuantityOfItemsByCompanyEdgeFieldDetails
      AggregatePredictedSalesQuantityOfItemsByCompany: AggregatePredictedSalesQuantityOfItemsByCompanyFieldDetails
      MedicareService: MedicareServiceFieldDetails
      MedicareServiceConnection: MedicareServiceConnectionFieldDetails
      MedicareServiceEdge: MedicareServiceEdgeFieldDetails
      AggregateMedicareService: AggregateMedicareServiceFieldDetails
      Patient: PatientFieldDetails
      Name: NameFieldDetails
      PatientConnection: PatientConnectionFieldDetails
      PatientEdge: PatientEdgeFieldDetails
      AggregatePatient: AggregatePatientFieldDetails
      NameConnection: NameConnectionFieldDetails
      NameEdge: NameEdgeFieldDetails
      AggregateName: AggregateNameFieldDetails
      HealthcareProvider: HealthcareProviderFieldDetails
      HealthcareProviderConnection: HealthcareProviderConnectionFieldDetails
      HealthcareProviderEdge: HealthcareProviderEdgeFieldDetails
      AggregateHealthcareProvider: AggregateHealthcareProviderFieldDetails
      ImmunisationSchedule: ImmunisationScheduleFieldDetails
      Disease: DiseaseFieldDetails
      VaccineBrand: VaccineBrandFieldDetails
      ImmunisationScheduleConnection: ImmunisationScheduleConnectionFieldDetails
      ImmunisationScheduleEdge: ImmunisationScheduleEdgeFieldDetails
      AggregateImmunisationSchedule: AggregateImmunisationScheduleFieldDetails
      VaccineBrandConnection: VaccineBrandConnectionFieldDetails
      VaccineBrandEdge: VaccineBrandEdgeFieldDetails
      AggregateVaccineBrand: AggregateVaccineBrandFieldDetails
      DiseaseConnection: DiseaseConnectionFieldDetails
      DiseaseEdge: DiseaseEdgeFieldDetails
      AggregateDisease: AggregateDiseaseFieldDetails
      HILog: HILogFieldDetails
      HILogConnection: HILogConnectionFieldDetails
      HILogEdge: HILogEdgeFieldDetails
      AggregateHILog: AggregateHILogFieldDetails
      PbsOrganisation: PbsOrganisationFieldDetails
      PbsOrganisationConnection: PbsOrganisationConnectionFieldDetails
      PbsOrganisationEdge: PbsOrganisationEdgeFieldDetails
      AggregatePbsOrganisation: AggregatePbsOrganisationFieldDetails
      PbsTPP: PbsTPPFieldDetails
      PbsTPPConnection: PbsTPPConnectionFieldDetails
      PbsTPPEdge: PbsTPPEdgeFieldDetails
      AggregatePbsTPP: AggregatePbsTPPFieldDetails
      MeansTestedFeeConnection: MeansTestedFeeConnectionFieldDetails
      MeansTestedFeeEdge: MeansTestedFeeEdgeFieldDetails
      AggregateMeansTestedFee: AggregateMeansTestedFeeFieldDetails
      MeansTestLimits: MeansTestLimitsFieldDetails
      MeansTestLimitsConnection: MeansTestLimitsConnectionFieldDetails
      MeansTestLimitsEdge: MeansTestLimitsEdgeFieldDetails
      AggregateMeansTestLimits: AggregateMeansTestLimitsFieldDetails
      BasicDailyFeeConnection: BasicDailyFeeConnectionFieldDetails
      BasicDailyFeeEdge: BasicDailyFeeEdgeFieldDetails
      AggregateBasicDailyFee: AggregateBasicDailyFeeFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      AddressSubscriptionPayload: AddressSubscriptionPayloadFieldDetails
      AddressPreviousValues: AddressPreviousValuesFieldDetails
      ContactSubscriptionPayload: ContactSubscriptionPayloadFieldDetails
      ContactPreviousValues: ContactPreviousValuesFieldDetails
      CompanySubscriptionPayload: CompanySubscriptionPayloadFieldDetails
      CompanyPreviousValues: CompanyPreviousValuesFieldDetails
      CompanyMemberSubscriptionPayload: CompanyMemberSubscriptionPayloadFieldDetails
      CompanyMemberPreviousValues: CompanyMemberPreviousValuesFieldDetails
      CustomerSubscriptionPayload: CustomerSubscriptionPayloadFieldDetails
      CustomerPreviousValues: CustomerPreviousValuesFieldDetails
      IntegrationSubscriptionPayload: IntegrationSubscriptionPayloadFieldDetails
      IntegrationPreviousValues: IntegrationPreviousValuesFieldDetails
      ServiceSubscriptionPayload: ServiceSubscriptionPayloadFieldDetails
      ServicePreviousValues: ServicePreviousValuesFieldDetails
      ProjectSubscriptionPayload: ProjectSubscriptionPayloadFieldDetails
      ProjectPreviousValues: ProjectPreviousValuesFieldDetails
      ProjectServiceSubscriptionPayload: ProjectServiceSubscriptionPayloadFieldDetails
      ProjectServicePreviousValues: ProjectServicePreviousValuesFieldDetails
      ProjectServiceRuleSubscriptionPayload: ProjectServiceRuleSubscriptionPayloadFieldDetails
      ProjectServiceRulePreviousValues: ProjectServiceRulePreviousValuesFieldDetails
      PlanSubscriptionPayload: PlanSubscriptionPayloadFieldDetails
      PlanPreviousValues: PlanPreviousValuesFieldDetails
      SessionSubscriptionPayload: SessionSubscriptionPayloadFieldDetails
      SessionPreviousValues: SessionPreviousValuesFieldDetails
      TimeSheetSubscriptionPayload: TimeSheetSubscriptionPayloadFieldDetails
      TimeSheetPreviousValues: TimeSheetPreviousValuesFieldDetails
      AttachmentSubscriptionPayload: AttachmentSubscriptionPayloadFieldDetails
      AttachmentPreviousValues: AttachmentPreviousValuesFieldDetails
      TimeSheetEntrySubscriptionPayload: TimeSheetEntrySubscriptionPayloadFieldDetails
      TimeSheetEntryPreviousValues: TimeSheetEntryPreviousValuesFieldDetails
      InvoiceItemEntrySubscriptionPayload: InvoiceItemEntrySubscriptionPayloadFieldDetails
      InvoiceItemEntryPreviousValues: InvoiceItemEntryPreviousValuesFieldDetails
      InvoiceSubscriptionPayload: InvoiceSubscriptionPayloadFieldDetails
      InvoicePreviousValues: InvoicePreviousValuesFieldDetails
      MainAccountSubscriptionPayload: MainAccountSubscriptionPayloadFieldDetails
      MainAccountPreviousValues: MainAccountPreviousValuesFieldDetails
      LedgerJournalSubscriptionPayload: LedgerJournalSubscriptionPayloadFieldDetails
      LedgerJournalPreviousValues: LedgerJournalPreviousValuesFieldDetails
      LedgerTransactionSubscriptionPayload: LedgerTransactionSubscriptionPayloadFieldDetails
      LedgerTransactionPreviousValues: LedgerTransactionPreviousValuesFieldDetails
      LedgerPostingSubscriptionPayload: LedgerPostingSubscriptionPayloadFieldDetails
      LedgerPostingPreviousValues: LedgerPostingPreviousValuesFieldDetails
      BankSubscriptionPayload: BankSubscriptionPayloadFieldDetails
      BankPreviousValues: BankPreviousValuesFieldDetails
      BankTransactionSubscriptionPayload: BankTransactionSubscriptionPayloadFieldDetails
      BankTransactionPreviousValues: BankTransactionPreviousValuesFieldDetails
      WareHouseSubscriptionPayload: WareHouseSubscriptionPayloadFieldDetails
      WareHousePreviousValues: WareHousePreviousValuesFieldDetails
      InventorySubscriptionPayload: InventorySubscriptionPayloadFieldDetails
      InventoryPreviousValues: InventoryPreviousValuesFieldDetails
      SupplierSubscriptionPayload: SupplierSubscriptionPayloadFieldDetails
      SupplierPreviousValues: SupplierPreviousValuesFieldDetails
      AssetGroupSubscriptionPayload: AssetGroupSubscriptionPayloadFieldDetails
      AssetGroupPreviousValues: AssetGroupPreviousValuesFieldDetails
      AssetSubscriptionPayload: AssetSubscriptionPayloadFieldDetails
      AssetPreviousValues: AssetPreviousValuesFieldDetails
      PurchaseOrderSubscriptionPayload: PurchaseOrderSubscriptionPayloadFieldDetails
      PurchaseOrderPreviousValues: PurchaseOrderPreviousValuesFieldDetails
      PoReceiptSubscriptionPayload: PoReceiptSubscriptionPayloadFieldDetails
      PoReceiptPreviousValues: PoReceiptPreviousValuesFieldDetails
      InventoryOnHandSubscriptionPayload: InventoryOnHandSubscriptionPayloadFieldDetails
      InventoryOnHandPreviousValues: InventoryOnHandPreviousValuesFieldDetails
      PurchaseOrderLineSubscriptionPayload: PurchaseOrderLineSubscriptionPayloadFieldDetails
      PurchaseOrderLinePreviousValues: PurchaseOrderLinePreviousValuesFieldDetails
      ApInvoiceSubscriptionPayload: ApInvoiceSubscriptionPayloadFieldDetails
      ApInvoicePreviousValues: ApInvoicePreviousValuesFieldDetails
      SalesOrderSubscriptionPayload: SalesOrderSubscriptionPayloadFieldDetails
      SalesOrderPreviousValues: SalesOrderPreviousValuesFieldDetails
      SalesOrderLineSubscriptionPayload: SalesOrderLineSubscriptionPayloadFieldDetails
      SalesOrderLinePreviousValues: SalesOrderLinePreviousValuesFieldDetails
      PredictedSalesValueByCompanySubscriptionPayload: PredictedSalesValueByCompanySubscriptionPayloadFieldDetails
      PredictedSalesValueByCompanyPreviousValues: PredictedSalesValueByCompanyPreviousValuesFieldDetails
      PredictedSalesQuantityOfItemsByCompanySubscriptionPayload: PredictedSalesQuantityOfItemsByCompanySubscriptionPayloadFieldDetails
      PredictedSalesQuantityOfItemsByCompanyPreviousValues: PredictedSalesQuantityOfItemsByCompanyPreviousValuesFieldDetails
      MedicareServiceSubscriptionPayload: MedicareServiceSubscriptionPayloadFieldDetails
      MedicareServicePreviousValues: MedicareServicePreviousValuesFieldDetails
      PatientSubscriptionPayload: PatientSubscriptionPayloadFieldDetails
      PatientPreviousValues: PatientPreviousValuesFieldDetails
      NameSubscriptionPayload: NameSubscriptionPayloadFieldDetails
      NamePreviousValues: NamePreviousValuesFieldDetails
      HealthcareProviderSubscriptionPayload: HealthcareProviderSubscriptionPayloadFieldDetails
      HealthcareProviderPreviousValues: HealthcareProviderPreviousValuesFieldDetails
      ImmunisationScheduleSubscriptionPayload: ImmunisationScheduleSubscriptionPayloadFieldDetails
      ImmunisationSchedulePreviousValues: ImmunisationSchedulePreviousValuesFieldDetails
      VaccineBrandSubscriptionPayload: VaccineBrandSubscriptionPayloadFieldDetails
      VaccineBrandPreviousValues: VaccineBrandPreviousValuesFieldDetails
      DiseaseSubscriptionPayload: DiseaseSubscriptionPayloadFieldDetails
      DiseasePreviousValues: DiseasePreviousValuesFieldDetails
      HILogSubscriptionPayload: HILogSubscriptionPayloadFieldDetails
      HILogPreviousValues: HILogPreviousValuesFieldDetails
      PbsOrganisationSubscriptionPayload: PbsOrganisationSubscriptionPayloadFieldDetails
      PbsOrganisationPreviousValues: PbsOrganisationPreviousValuesFieldDetails
      PbsTPPSubscriptionPayload: PbsTPPSubscriptionPayloadFieldDetails
      PbsTPPPreviousValues: PbsTPPPreviousValuesFieldDetails
      MeansTestedFeeSubscriptionPayload: MeansTestedFeeSubscriptionPayloadFieldDetails
      MeansTestedFeePreviousValues: MeansTestedFeePreviousValuesFieldDetails
      MeansTestLimitsSubscriptionPayload: MeansTestLimitsSubscriptionPayloadFieldDetails
      MeansTestLimitsPreviousValues: MeansTestLimitsPreviousValuesFieldDetails
      BasicDailyFeeSubscriptionPayload: BasicDailyFeeSubscriptionPayloadFieldDetails
      BasicDailyFeePreviousValues: BasicDailyFeePreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      AddressWhereUniqueInput: AddressWhereUniqueInputInputObject
      AddressWhereInput: AddressWhereInputInputObject
      ContactWhereUniqueInput: ContactWhereUniqueInputInputObject
      ContactWhereInput: ContactWhereInputInputObject
      CompanyWhereUniqueInput: CompanyWhereUniqueInputInputObject
      CompanyMemberWhereInput: CompanyMemberWhereInputInputObject
      CompanyWhereInput: CompanyWhereInputInputObject
      AttachmentWhereInput: AttachmentWhereInputInputObject
      PlanWhereInput: PlanWhereInputInputObject
      CompanyMemberWhereUniqueInput: CompanyMemberWhereUniqueInputInputObject
      CustomerWhereUniqueInput: CustomerWhereUniqueInputInputObject
      CustomerWhereInput: CustomerWhereInputInputObject
      MeansTestedFeeWhereInput: MeansTestedFeeWhereInputInputObject
      BasicDailyFeeWhereInput: BasicDailyFeeWhereInputInputObject
      IntegrationWhereUniqueInput: IntegrationWhereUniqueInputInputObject
      IntegrationWhereInput: IntegrationWhereInputInputObject
      ServiceWhereUniqueInput: ServiceWhereUniqueInputInputObject
      ServiceWhereInput: ServiceWhereInputInputObject
      ProjectWhereUniqueInput: ProjectWhereUniqueInputInputObject
      ProjectServiceWhereInput: ProjectServiceWhereInputInputObject
      ProjectWhereInput: ProjectWhereInputInputObject
      ProjectServiceRuleWhereInput: ProjectServiceRuleWhereInputInputObject
      ProjectServiceWhereUniqueInput: ProjectServiceWhereUniqueInputInputObject
      ProjectServiceRuleWhereUniqueInput: ProjectServiceRuleWhereUniqueInputInputObject
      PlanWhereUniqueInput: PlanWhereUniqueInputInputObject
      SessionWhereUniqueInput: SessionWhereUniqueInputInputObject
      SessionWhereInput: SessionWhereInputInputObject
      TimeSheetWhereUniqueInput: TimeSheetWhereUniqueInputInputObject
      TimeSheetEntryWhereInput: TimeSheetEntryWhereInputInputObject
      TimeSheetWhereInput: TimeSheetWhereInputInputObject
      AttachmentWhereUniqueInput: AttachmentWhereUniqueInputInputObject
      TimeSheetEntryWhereUniqueInput: TimeSheetEntryWhereUniqueInputInputObject
      InvoiceItemEntryWhereUniqueInput: InvoiceItemEntryWhereUniqueInputInputObject
      InvoiceItemEntryWhereInput: InvoiceItemEntryWhereInputInputObject
      InvoiceWhereInput: InvoiceWhereInputInputObject
      InvoiceWhereUniqueInput: InvoiceWhereUniqueInputInputObject
      MainAccountWhereUniqueInput: MainAccountWhereUniqueInputInputObject
      MainAccountWhereInput: MainAccountWhereInputInputObject
      LedgerJournalWhereUniqueInput: LedgerJournalWhereUniqueInputInputObject
      LedgerJournalWhereInput: LedgerJournalWhereInputInputObject
      LedgerTransactionWhereUniqueInput: LedgerTransactionWhereUniqueInputInputObject
      LedgerTransactionWhereInput: LedgerTransactionWhereInputInputObject
      LedgerPostingWhereUniqueInput: LedgerPostingWhereUniqueInputInputObject
      LedgerPostingWhereInput: LedgerPostingWhereInputInputObject
      BankWhereUniqueInput: BankWhereUniqueInputInputObject
      BankWhereInput: BankWhereInputInputObject
      BankTransactionWhereUniqueInput: BankTransactionWhereUniqueInputInputObject
      BankTransactionWhereInput: BankTransactionWhereInputInputObject
      WareHouseWhereUniqueInput: WareHouseWhereUniqueInputInputObject
      WareHouseWhereInput: WareHouseWhereInputInputObject
      InventoryWhereUniqueInput: InventoryWhereUniqueInputInputObject
      InventoryWhereInput: InventoryWhereInputInputObject
      SupplierWhereUniqueInput: SupplierWhereUniqueInputInputObject
      SupplierWhereInput: SupplierWhereInputInputObject
      AssetGroupWhereUniqueInput: AssetGroupWhereUniqueInputInputObject
      AssetGroupWhereInput: AssetGroupWhereInputInputObject
      AssetWhereUniqueInput: AssetWhereUniqueInputInputObject
      AssetWhereInput: AssetWhereInputInputObject
      PurchaseOrderWhereUniqueInput: PurchaseOrderWhereUniqueInputInputObject
      PurchaseOrderWhereInput: PurchaseOrderWhereInputInputObject
      PoReceiptWhereUniqueInput: PoReceiptWhereUniqueInputInputObject
      PoReceiptWhereInput: PoReceiptWhereInputInputObject
      InventoryOnHandWhereUniqueInput: InventoryOnHandWhereUniqueInputInputObject
      InventoryOnHandWhereInput: InventoryOnHandWhereInputInputObject
      PurchaseOrderLineWhereUniqueInput: PurchaseOrderLineWhereUniqueInputInputObject
      PurchaseOrderLineWhereInput: PurchaseOrderLineWhereInputInputObject
      ApInvoiceWhereUniqueInput: ApInvoiceWhereUniqueInputInputObject
      ApInvoiceWhereInput: ApInvoiceWhereInputInputObject
      SalesOrderWhereUniqueInput: SalesOrderWhereUniqueInputInputObject
      SalesOrderWhereInput: SalesOrderWhereInputInputObject
      SalesOrderLineWhereUniqueInput: SalesOrderLineWhereUniqueInputInputObject
      SalesOrderLineWhereInput: SalesOrderLineWhereInputInputObject
      PredictedSalesValueByCompanyWhereUniqueInput: PredictedSalesValueByCompanyWhereUniqueInputInputObject
      PredictedSalesValueByCompanyWhereInput: PredictedSalesValueByCompanyWhereInputInputObject
      PredictedSalesQuantityOfItemsByCompanyWhereUniqueInput: PredictedSalesQuantityOfItemsByCompanyWhereUniqueInputInputObject
      PredictedSalesQuantityOfItemsByCompanyWhereInput: PredictedSalesQuantityOfItemsByCompanyWhereInputInputObject
      MedicareServiceWhereUniqueInput: MedicareServiceWhereUniqueInputInputObject
      MedicareServiceWhereInput: MedicareServiceWhereInputInputObject
      PatientWhereUniqueInput: PatientWhereUniqueInputInputObject
      NameWhereInput: NameWhereInputInputObject
      PatientWhereInput: PatientWhereInputInputObject
      NameWhereUniqueInput: NameWhereUniqueInputInputObject
      HealthcareProviderWhereUniqueInput: HealthcareProviderWhereUniqueInputInputObject
      HealthcareProviderWhereInput: HealthcareProviderWhereInputInputObject
      ImmunisationScheduleWhereUniqueInput: ImmunisationScheduleWhereUniqueInputInputObject
      ImmunisationScheduleWhereInput: ImmunisationScheduleWhereInputInputObject
      DiseaseWhereInput: DiseaseWhereInputInputObject
      VaccineBrandWhereInput: VaccineBrandWhereInputInputObject
      VaccineBrandWhereUniqueInput: VaccineBrandWhereUniqueInputInputObject
      DiseaseWhereUniqueInput: DiseaseWhereUniqueInputInputObject
      HILogWhereUniqueInput: HILogWhereUniqueInputInputObject
      HILogWhereInput: HILogWhereInputInputObject
      PbsOrganisationWhereUniqueInput: PbsOrganisationWhereUniqueInputInputObject
      PbsOrganisationWhereInput: PbsOrganisationWhereInputInputObject
      PbsTPPWhereUniqueInput: PbsTPPWhereUniqueInputInputObject
      PbsTPPWhereInput: PbsTPPWhereInputInputObject
      MeansTestedFeeWhereUniqueInput: MeansTestedFeeWhereUniqueInputInputObject
      MeansTestLimitsWhereUniqueInput: MeansTestLimitsWhereUniqueInputInputObject
      MeansTestLimitsWhereInput: MeansTestLimitsWhereInputInputObject
      BasicDailyFeeWhereUniqueInput: BasicDailyFeeWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      AddressCreateInput: AddressCreateInputInputObject
      AddressUpdateInput: AddressUpdateInputInputObject
      AddressUpdateManyMutationInput: AddressUpdateManyMutationInputInputObject
      ContactCreateInput: ContactCreateInputInputObject
      ContactUpdateInput: ContactUpdateInputInputObject
      ContactUpdateManyMutationInput: ContactUpdateManyMutationInputInputObject
      CompanyCreateInput: CompanyCreateInputInputObject
      AttachmentCreateOneInput: AttachmentCreateOneInputInputObject
      AttachmentCreateInput: AttachmentCreateInputInputObject
      AddressCreateManyInput: AddressCreateManyInputInputObject
      ContactCreateManyInput: ContactCreateManyInputInputObject
      CompanyMemberCreateManyWithoutCompanyInput: CompanyMemberCreateManyWithoutCompanyInputInputObject
      CompanyMemberCreateWithoutCompanyInput: CompanyMemberCreateWithoutCompanyInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      PlanCreateOneWithoutCompanyInput: PlanCreateOneWithoutCompanyInputInputObject
      PlanCreateWithoutCompanyInput: PlanCreateWithoutCompanyInputInputObject
      CompanyUpdateInput: CompanyUpdateInputInputObject
      AttachmentUpdateOneInput: AttachmentUpdateOneInputInputObject
      AttachmentUpdateDataInput: AttachmentUpdateDataInputInputObject
      AttachmentUpsertNestedInput: AttachmentUpsertNestedInputInputObject
      AddressUpdateManyInput: AddressUpdateManyInputInputObject
      AddressUpdateWithWhereUniqueNestedInput: AddressUpdateWithWhereUniqueNestedInputInputObject
      AddressUpdateDataInput: AddressUpdateDataInputInputObject
      AddressUpsertWithWhereUniqueNestedInput: AddressUpsertWithWhereUniqueNestedInputInputObject
      AddressScalarWhereInput: AddressScalarWhereInputInputObject
      AddressUpdateManyWithWhereNestedInput: AddressUpdateManyWithWhereNestedInputInputObject
      AddressUpdateManyDataInput: AddressUpdateManyDataInputInputObject
      ContactUpdateManyInput: ContactUpdateManyInputInputObject
      ContactUpdateWithWhereUniqueNestedInput: ContactUpdateWithWhereUniqueNestedInputInputObject
      ContactUpdateDataInput: ContactUpdateDataInputInputObject
      ContactUpsertWithWhereUniqueNestedInput: ContactUpsertWithWhereUniqueNestedInputInputObject
      ContactScalarWhereInput: ContactScalarWhereInputInputObject
      ContactUpdateManyWithWhereNestedInput: ContactUpdateManyWithWhereNestedInputInputObject
      ContactUpdateManyDataInput: ContactUpdateManyDataInputInputObject
      CompanyMemberUpdateManyWithoutCompanyInput: CompanyMemberUpdateManyWithoutCompanyInputInputObject
      CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput: CompanyMemberUpdateWithWhereUniqueWithoutCompanyInputInputObject
      CompanyMemberUpdateWithoutCompanyDataInput: CompanyMemberUpdateWithoutCompanyDataInputInputObject
      UserUpdateOneInput: UserUpdateOneInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput: CompanyMemberUpsertWithWhereUniqueWithoutCompanyInputInputObject
      CompanyMemberScalarWhereInput: CompanyMemberScalarWhereInputInputObject
      CompanyMemberUpdateManyWithWhereNestedInput: CompanyMemberUpdateManyWithWhereNestedInputInputObject
      CompanyMemberUpdateManyDataInput: CompanyMemberUpdateManyDataInputInputObject
      PlanUpdateOneWithoutCompanyInput: PlanUpdateOneWithoutCompanyInputInputObject
      PlanUpdateWithoutCompanyDataInput: PlanUpdateWithoutCompanyDataInputInputObject
      PlanUpsertWithoutCompanyInput: PlanUpsertWithoutCompanyInputInputObject
      CompanyUpdateManyMutationInput: CompanyUpdateManyMutationInputInputObject
      CompanyMemberCreateInput: CompanyMemberCreateInputInputObject
      CompanyCreateOneWithoutCompanyMembersInput: CompanyCreateOneWithoutCompanyMembersInputInputObject
      CompanyCreateWithoutCompanyMembersInput: CompanyCreateWithoutCompanyMembersInputInputObject
      CompanyMemberUpdateInput: CompanyMemberUpdateInputInputObject
      CompanyUpdateOneRequiredWithoutCompanyMembersInput: CompanyUpdateOneRequiredWithoutCompanyMembersInputInputObject
      CompanyUpdateWithoutCompanyMembersDataInput: CompanyUpdateWithoutCompanyMembersDataInputInputObject
      CompanyUpsertWithoutCompanyMembersInput: CompanyUpsertWithoutCompanyMembersInputInputObject
      CompanyMemberUpdateManyMutationInput: CompanyMemberUpdateManyMutationInputInputObject
      CustomerCreateInput: CustomerCreateInputInputObject
      CompanyCreateOneInput: CompanyCreateOneInputInputObject
      MeansTestedFeeCreateOneInput: MeansTestedFeeCreateOneInputInputObject
      MeansTestedFeeCreateInput: MeansTestedFeeCreateInputInputObject
      BasicDailyFeeCreateOneInput: BasicDailyFeeCreateOneInputInputObject
      BasicDailyFeeCreateInput: BasicDailyFeeCreateInputInputObject
      CustomerUpdateInput: CustomerUpdateInputInputObject
      CompanyUpdateOneRequiredInput: CompanyUpdateOneRequiredInputInputObject
      CompanyUpdateDataInput: CompanyUpdateDataInputInputObject
      CompanyUpsertNestedInput: CompanyUpsertNestedInputInputObject
      MeansTestedFeeUpdateOneInput: MeansTestedFeeUpdateOneInputInputObject
      MeansTestedFeeUpdateDataInput: MeansTestedFeeUpdateDataInputInputObject
      CompanyUpdateOneInput: CompanyUpdateOneInputInputObject
      MeansTestedFeeUpsertNestedInput: MeansTestedFeeUpsertNestedInputInputObject
      BasicDailyFeeUpdateOneInput: BasicDailyFeeUpdateOneInputInputObject
      BasicDailyFeeUpdateDataInput: BasicDailyFeeUpdateDataInputInputObject
      BasicDailyFeeUpsertNestedInput: BasicDailyFeeUpsertNestedInputInputObject
      CustomerUpdateManyMutationInput: CustomerUpdateManyMutationInputInputObject
      IntegrationCreateInput: IntegrationCreateInputInputObject
      IntegrationUpdateInput: IntegrationUpdateInputInputObject
      IntegrationUpdateManyMutationInput: IntegrationUpdateManyMutationInputInputObject
      ServiceCreateInput: ServiceCreateInputInputObject
      ServiceUpdateInput: ServiceUpdateInputInputObject
      ServiceUpdateManyMutationInput: ServiceUpdateManyMutationInputInputObject
      ProjectCreateInput: ProjectCreateInputInputObject
      CustomerCreateOneInput: CustomerCreateOneInputInputObject
      ProjectServiceCreateManyWithoutProjectInput: ProjectServiceCreateManyWithoutProjectInputInputObject
      ProjectServiceCreateWithoutProjectInput: ProjectServiceCreateWithoutProjectInputInputObject
      ProjectServiceRuleCreateManyWithoutProjectServiceInput: ProjectServiceRuleCreateManyWithoutProjectServiceInputInputObject
      ProjectServiceRuleCreateWithoutProjectServiceInput: ProjectServiceRuleCreateWithoutProjectServiceInputInputObject
      ServiceCreateOneInput: ServiceCreateOneInputInputObject
      ProjectUpdateInput: ProjectUpdateInputInputObject
      CustomerUpdateOneInput: CustomerUpdateOneInputInputObject
      CustomerUpdateDataInput: CustomerUpdateDataInputInputObject
      CustomerUpsertNestedInput: CustomerUpsertNestedInputInputObject
      ProjectServiceUpdateManyWithoutProjectInput: ProjectServiceUpdateManyWithoutProjectInputInputObject
      ProjectServiceUpdateWithWhereUniqueWithoutProjectInput: ProjectServiceUpdateWithWhereUniqueWithoutProjectInputInputObject
      ProjectServiceUpdateWithoutProjectDataInput: ProjectServiceUpdateWithoutProjectDataInputInputObject
      ProjectServiceRuleUpdateManyWithoutProjectServiceInput: ProjectServiceRuleUpdateManyWithoutProjectServiceInputInputObject
      ProjectServiceRuleUpdateWithWhereUniqueWithoutProjectServiceInput: ProjectServiceRuleUpdateWithWhereUniqueWithoutProjectServiceInputInputObject
      ProjectServiceRuleUpdateWithoutProjectServiceDataInput: ProjectServiceRuleUpdateWithoutProjectServiceDataInputInputObject
      ProjectServiceRuleUpsertWithWhereUniqueWithoutProjectServiceInput: ProjectServiceRuleUpsertWithWhereUniqueWithoutProjectServiceInputInputObject
      ProjectServiceRuleScalarWhereInput: ProjectServiceRuleScalarWhereInputInputObject
      ProjectServiceRuleUpdateManyWithWhereNestedInput: ProjectServiceRuleUpdateManyWithWhereNestedInputInputObject
      ProjectServiceRuleUpdateManyDataInput: ProjectServiceRuleUpdateManyDataInputInputObject
      ServiceUpdateOneInput: ServiceUpdateOneInputInputObject
      ServiceUpdateDataInput: ServiceUpdateDataInputInputObject
      ServiceUpsertNestedInput: ServiceUpsertNestedInputInputObject
      ProjectServiceUpsertWithWhereUniqueWithoutProjectInput: ProjectServiceUpsertWithWhereUniqueWithoutProjectInputInputObject
      ProjectServiceScalarWhereInput: ProjectServiceScalarWhereInputInputObject
      ProjectServiceUpdateManyWithWhereNestedInput: ProjectServiceUpdateManyWithWhereNestedInputInputObject
      ProjectServiceUpdateManyDataInput: ProjectServiceUpdateManyDataInputInputObject
      ProjectUpdateManyMutationInput: ProjectUpdateManyMutationInputInputObject
      ProjectServiceCreateInput: ProjectServiceCreateInputInputObject
      ProjectCreateOneWithoutProjectServiceInput: ProjectCreateOneWithoutProjectServiceInputInputObject
      ProjectCreateWithoutProjectServiceInput: ProjectCreateWithoutProjectServiceInputInputObject
      ProjectServiceUpdateInput: ProjectServiceUpdateInputInputObject
      ProjectUpdateOneWithoutProjectServiceInput: ProjectUpdateOneWithoutProjectServiceInputInputObject
      ProjectUpdateWithoutProjectServiceDataInput: ProjectUpdateWithoutProjectServiceDataInputInputObject
      ProjectUpsertWithoutProjectServiceInput: ProjectUpsertWithoutProjectServiceInputInputObject
      ProjectServiceUpdateManyMutationInput: ProjectServiceUpdateManyMutationInputInputObject
      ProjectServiceRuleCreateInput: ProjectServiceRuleCreateInputInputObject
      ProjectServiceCreateOneWithoutRulesInput: ProjectServiceCreateOneWithoutRulesInputInputObject
      ProjectServiceCreateWithoutRulesInput: ProjectServiceCreateWithoutRulesInputInputObject
      ProjectServiceRuleUpdateInput: ProjectServiceRuleUpdateInputInputObject
      ProjectServiceUpdateOneWithoutRulesInput: ProjectServiceUpdateOneWithoutRulesInputInputObject
      ProjectServiceUpdateWithoutRulesDataInput: ProjectServiceUpdateWithoutRulesDataInputInputObject
      ProjectServiceUpsertWithoutRulesInput: ProjectServiceUpsertWithoutRulesInputInputObject
      ProjectServiceRuleUpdateManyMutationInput: ProjectServiceRuleUpdateManyMutationInputInputObject
      PlanCreateInput: PlanCreateInputInputObject
      CompanyCreateOneWithoutActivePlanInput: CompanyCreateOneWithoutActivePlanInputInputObject
      CompanyCreateWithoutActivePlanInput: CompanyCreateWithoutActivePlanInputInputObject
      PlanUpdateInput: PlanUpdateInputInputObject
      CompanyUpdateOneRequiredWithoutActivePlanInput: CompanyUpdateOneRequiredWithoutActivePlanInputInputObject
      CompanyUpdateWithoutActivePlanDataInput: CompanyUpdateWithoutActivePlanDataInputInputObject
      CompanyUpsertWithoutActivePlanInput: CompanyUpsertWithoutActivePlanInputInputObject
      PlanUpdateManyMutationInput: PlanUpdateManyMutationInputInputObject
      SessionCreateInput: SessionCreateInputInputObject
      SessionUpdateInput: SessionUpdateInputInputObject
      SessionUpdateManyMutationInput: SessionUpdateManyMutationInputInputObject
      TimeSheetCreateInput: TimeSheetCreateInputInputObject
      AttachmentCreateManyInput: AttachmentCreateManyInputInputObject
      TimeSheetEntryCreateManyWithoutTimeSheetInput: TimeSheetEntryCreateManyWithoutTimeSheetInputInputObject
      TimeSheetEntryCreateWithoutTimeSheetInput: TimeSheetEntryCreateWithoutTimeSheetInputInputObject
      ProjectCreateOneInput: ProjectCreateOneInputInputObject
      TimeSheetUpdateInput: TimeSheetUpdateInputInputObject
      AttachmentUpdateManyInput: AttachmentUpdateManyInputInputObject
      AttachmentUpdateWithWhereUniqueNestedInput: AttachmentUpdateWithWhereUniqueNestedInputInputObject
      AttachmentUpsertWithWhereUniqueNestedInput: AttachmentUpsertWithWhereUniqueNestedInputInputObject
      AttachmentScalarWhereInput: AttachmentScalarWhereInputInputObject
      AttachmentUpdateManyWithWhereNestedInput: AttachmentUpdateManyWithWhereNestedInputInputObject
      AttachmentUpdateManyDataInput: AttachmentUpdateManyDataInputInputObject
      TimeSheetEntryUpdateManyWithoutTimeSheetInput: TimeSheetEntryUpdateManyWithoutTimeSheetInputInputObject
      TimeSheetEntryUpdateWithWhereUniqueWithoutTimeSheetInput: TimeSheetEntryUpdateWithWhereUniqueWithoutTimeSheetInputInputObject
      TimeSheetEntryUpdateWithoutTimeSheetDataInput: TimeSheetEntryUpdateWithoutTimeSheetDataInputInputObject
      ProjectUpdateOneInput: ProjectUpdateOneInputInputObject
      ProjectUpdateDataInput: ProjectUpdateDataInputInputObject
      ProjectUpsertNestedInput: ProjectUpsertNestedInputInputObject
      TimeSheetEntryUpsertWithWhereUniqueWithoutTimeSheetInput: TimeSheetEntryUpsertWithWhereUniqueWithoutTimeSheetInputInputObject
      TimeSheetEntryScalarWhereInput: TimeSheetEntryScalarWhereInputInputObject
      TimeSheetEntryUpdateManyWithWhereNestedInput: TimeSheetEntryUpdateManyWithWhereNestedInputInputObject
      TimeSheetEntryUpdateManyDataInput: TimeSheetEntryUpdateManyDataInputInputObject
      TimeSheetUpdateManyMutationInput: TimeSheetUpdateManyMutationInputInputObject
      AttachmentUpdateInput: AttachmentUpdateInputInputObject
      AttachmentUpdateManyMutationInput: AttachmentUpdateManyMutationInputInputObject
      TimeSheetEntryCreateInput: TimeSheetEntryCreateInputInputObject
      TimeSheetCreateOneWithoutTimeSheetEntriesInput: TimeSheetCreateOneWithoutTimeSheetEntriesInputInputObject
      TimeSheetCreateWithoutTimeSheetEntriesInput: TimeSheetCreateWithoutTimeSheetEntriesInputInputObject
      TimeSheetEntryUpdateInput: TimeSheetEntryUpdateInputInputObject
      TimeSheetUpdateOneWithoutTimeSheetEntriesInput: TimeSheetUpdateOneWithoutTimeSheetEntriesInputInputObject
      TimeSheetUpdateWithoutTimeSheetEntriesDataInput: TimeSheetUpdateWithoutTimeSheetEntriesDataInputInputObject
      TimeSheetUpsertWithoutTimeSheetEntriesInput: TimeSheetUpsertWithoutTimeSheetEntriesInputInputObject
      TimeSheetEntryUpdateManyMutationInput: TimeSheetEntryUpdateManyMutationInputInputObject
      InvoiceItemEntryCreateInput: InvoiceItemEntryCreateInputInputObject
      InvoiceCreateOneWithoutItemsInput: InvoiceCreateOneWithoutItemsInputInputObject
      InvoiceCreateWithoutItemsInput: InvoiceCreateWithoutItemsInputInputObject
      TimeSheetEntryCreateOneInput: TimeSheetEntryCreateOneInputInputObject
      TimeSheetCreateOneInput: TimeSheetCreateOneInputInputObject
      InvoiceItemEntryUpdateInput: InvoiceItemEntryUpdateInputInputObject
      InvoiceUpdateOneWithoutItemsInput: InvoiceUpdateOneWithoutItemsInputInputObject
      InvoiceUpdateWithoutItemsDataInput: InvoiceUpdateWithoutItemsDataInputInputObject
      InvoiceUpsertWithoutItemsInput: InvoiceUpsertWithoutItemsInputInputObject
      TimeSheetEntryUpdateOneInput: TimeSheetEntryUpdateOneInputInputObject
      TimeSheetEntryUpdateDataInput: TimeSheetEntryUpdateDataInputInputObject
      TimeSheetEntryUpsertNestedInput: TimeSheetEntryUpsertNestedInputInputObject
      TimeSheetUpdateOneInput: TimeSheetUpdateOneInputInputObject
      TimeSheetUpdateDataInput: TimeSheetUpdateDataInputInputObject
      TimeSheetUpsertNestedInput: TimeSheetUpsertNestedInputInputObject
      InvoiceItemEntryUpdateManyMutationInput: InvoiceItemEntryUpdateManyMutationInputInputObject
      InvoiceCreateInput: InvoiceCreateInputInputObject
      InvoiceItemEntryCreateManyWithoutInvoiceInput: InvoiceItemEntryCreateManyWithoutInvoiceInputInputObject
      InvoiceItemEntryCreateWithoutInvoiceInput: InvoiceItemEntryCreateWithoutInvoiceInputInputObject
      InvoiceUpdateInput: InvoiceUpdateInputInputObject
      InvoiceItemEntryUpdateManyWithoutInvoiceInput: InvoiceItemEntryUpdateManyWithoutInvoiceInputInputObject
      InvoiceItemEntryUpdateWithWhereUniqueWithoutInvoiceInput: InvoiceItemEntryUpdateWithWhereUniqueWithoutInvoiceInputInputObject
      InvoiceItemEntryUpdateWithoutInvoiceDataInput: InvoiceItemEntryUpdateWithoutInvoiceDataInputInputObject
      InvoiceItemEntryUpsertWithWhereUniqueWithoutInvoiceInput: InvoiceItemEntryUpsertWithWhereUniqueWithoutInvoiceInputInputObject
      InvoiceItemEntryScalarWhereInput: InvoiceItemEntryScalarWhereInputInputObject
      InvoiceItemEntryUpdateManyWithWhereNestedInput: InvoiceItemEntryUpdateManyWithWhereNestedInputInputObject
      InvoiceItemEntryUpdateManyDataInput: InvoiceItemEntryUpdateManyDataInputInputObject
      InvoiceUpdateManyMutationInput: InvoiceUpdateManyMutationInputInputObject
      MainAccountCreateInput: MainAccountCreateInputInputObject
      MainAccountUpdateInput: MainAccountUpdateInputInputObject
      MainAccountUpdateManyMutationInput: MainAccountUpdateManyMutationInputInputObject
      LedgerJournalCreateInput: LedgerJournalCreateInputInputObject
      LedgerJournalUpdateInput: LedgerJournalUpdateInputInputObject
      LedgerJournalUpdateManyMutationInput: LedgerJournalUpdateManyMutationInputInputObject
      LedgerTransactionCreateInput: LedgerTransactionCreateInputInputObject
      MainAccountCreateOneInput: MainAccountCreateOneInputInputObject
      LedgerJournalCreateOneInput: LedgerJournalCreateOneInputInputObject
      LedgerTransactionUpdateInput: LedgerTransactionUpdateInputInputObject
      MainAccountUpdateOneRequiredInput: MainAccountUpdateOneRequiredInputInputObject
      MainAccountUpdateDataInput: MainAccountUpdateDataInputInputObject
      MainAccountUpsertNestedInput: MainAccountUpsertNestedInputInputObject
      LedgerJournalUpdateOneRequiredInput: LedgerJournalUpdateOneRequiredInputInputObject
      LedgerJournalUpdateDataInput: LedgerJournalUpdateDataInputInputObject
      LedgerJournalUpsertNestedInput: LedgerJournalUpsertNestedInputInputObject
      LedgerTransactionUpdateManyMutationInput: LedgerTransactionUpdateManyMutationInputInputObject
      LedgerPostingCreateInput: LedgerPostingCreateInputInputObject
      LedgerPostingUpdateInput: LedgerPostingUpdateInputInputObject
      MainAccountUpdateOneInput: MainAccountUpdateOneInputInputObject
      LedgerPostingUpdateManyMutationInput: LedgerPostingUpdateManyMutationInputInputObject
      BankCreateInput: BankCreateInputInputObject
      BankUpdateInput: BankUpdateInputInputObject
      BankUpdateManyMutationInput: BankUpdateManyMutationInputInputObject
      BankTransactionCreateInput: BankTransactionCreateInputInputObject
      BankTransactionUpdateInput: BankTransactionUpdateInputInputObject
      LedgerJournalUpdateOneInput: LedgerJournalUpdateOneInputInputObject
      BankTransactionUpdateManyMutationInput: BankTransactionUpdateManyMutationInputInputObject
      WareHouseCreateInput: WareHouseCreateInputInputObject
      WareHouseUpdateInput: WareHouseUpdateInputInputObject
      WareHouseUpdateManyMutationInput: WareHouseUpdateManyMutationInputInputObject
      InventoryCreateInput: InventoryCreateInputInputObject
      InventoryUpdateInput: InventoryUpdateInputInputObject
      InventoryUpdateManyMutationInput: InventoryUpdateManyMutationInputInputObject
      SupplierCreateInput: SupplierCreateInputInputObject
      SupplierUpdateInput: SupplierUpdateInputInputObject
      SupplierUpdateManyMutationInput: SupplierUpdateManyMutationInputInputObject
      AssetGroupCreateInput: AssetGroupCreateInputInputObject
      AssetGroupUpdateInput: AssetGroupUpdateInputInputObject
      AssetGroupUpdateManyMutationInput: AssetGroupUpdateManyMutationInputInputObject
      AssetCreateInput: AssetCreateInputInputObject
      AssetGroupCreateOneInput: AssetGroupCreateOneInputInputObject
      AssetUpdateInput: AssetUpdateInputInputObject
      AssetGroupUpdateOneInput: AssetGroupUpdateOneInputInputObject
      AssetGroupUpdateDataInput: AssetGroupUpdateDataInputInputObject
      AssetGroupUpsertNestedInput: AssetGroupUpsertNestedInputInputObject
      AssetUpdateManyMutationInput: AssetUpdateManyMutationInputInputObject
      PurchaseOrderCreateInput: PurchaseOrderCreateInputInputObject
      SupplierCreateOneInput: SupplierCreateOneInputInputObject
      PurchaseOrderUpdateInput: PurchaseOrderUpdateInputInputObject
      SupplierUpdateOneInput: SupplierUpdateOneInputInputObject
      SupplierUpdateDataInput: SupplierUpdateDataInputInputObject
      SupplierUpsertNestedInput: SupplierUpsertNestedInputInputObject
      PurchaseOrderUpdateManyMutationInput: PurchaseOrderUpdateManyMutationInputInputObject
      PoReceiptCreateInput: PoReceiptCreateInputInputObject
      PurchaseOrderCreateOneInput: PurchaseOrderCreateOneInputInputObject
      PoReceiptUpdateInput: PoReceiptUpdateInputInputObject
      PurchaseOrderUpdateOneInput: PurchaseOrderUpdateOneInputInputObject
      PurchaseOrderUpdateDataInput: PurchaseOrderUpdateDataInputInputObject
      PurchaseOrderUpsertNestedInput: PurchaseOrderUpsertNestedInputInputObject
      PoReceiptUpdateManyMutationInput: PoReceiptUpdateManyMutationInputInputObject
      InventoryOnHandCreateInput: InventoryOnHandCreateInputInputObject
      InventoryCreateOneInput: InventoryCreateOneInputInputObject
      WareHouseCreateOneInput: WareHouseCreateOneInputInputObject
      InventoryOnHandUpdateInput: InventoryOnHandUpdateInputInputObject
      InventoryUpdateOneInput: InventoryUpdateOneInputInputObject
      InventoryUpdateDataInput: InventoryUpdateDataInputInputObject
      InventoryUpsertNestedInput: InventoryUpsertNestedInputInputObject
      WareHouseUpdateOneInput: WareHouseUpdateOneInputInputObject
      WareHouseUpdateDataInput: WareHouseUpdateDataInputInputObject
      WareHouseUpsertNestedInput: WareHouseUpsertNestedInputInputObject
      InventoryOnHandUpdateManyMutationInput: InventoryOnHandUpdateManyMutationInputInputObject
      PurchaseOrderLineCreateInput: PurchaseOrderLineCreateInputInputObject
      PoReceiptCreateOneInput: PoReceiptCreateOneInputInputObject
      PurchaseOrderLineUpdateInput: PurchaseOrderLineUpdateInputInputObject
      PoReceiptUpdateOneInput: PoReceiptUpdateOneInputInputObject
      PoReceiptUpdateDataInput: PoReceiptUpdateDataInputInputObject
      PoReceiptUpsertNestedInput: PoReceiptUpsertNestedInputInputObject
      PurchaseOrderLineUpdateManyMutationInput: PurchaseOrderLineUpdateManyMutationInputInputObject
      ApInvoiceCreateInput: ApInvoiceCreateInputInputObject
      ApInvoiceUpdateInput: ApInvoiceUpdateInputInputObject
      ApInvoiceUpdateManyMutationInput: ApInvoiceUpdateManyMutationInputInputObject
      SalesOrderCreateInput: SalesOrderCreateInputInputObject
      SalesOrderUpdateInput: SalesOrderUpdateInputInputObject
      SalesOrderUpdateManyMutationInput: SalesOrderUpdateManyMutationInputInputObject
      SalesOrderLineCreateInput: SalesOrderLineCreateInputInputObject
      SalesOrderCreateOneInput: SalesOrderCreateOneInputInputObject
      SalesOrderLineUpdateInput: SalesOrderLineUpdateInputInputObject
      SalesOrderUpdateOneInput: SalesOrderUpdateOneInputInputObject
      SalesOrderUpdateDataInput: SalesOrderUpdateDataInputInputObject
      SalesOrderUpsertNestedInput: SalesOrderUpsertNestedInputInputObject
      SalesOrderLineUpdateManyMutationInput: SalesOrderLineUpdateManyMutationInputInputObject
      PredictedSalesValueByCompanyCreateInput: PredictedSalesValueByCompanyCreateInputInputObject
      PredictedSalesValueByCompanyUpdateInput: PredictedSalesValueByCompanyUpdateInputInputObject
      PredictedSalesValueByCompanyUpdateManyMutationInput: PredictedSalesValueByCompanyUpdateManyMutationInputInputObject
      PredictedSalesQuantityOfItemsByCompanyCreateInput: PredictedSalesQuantityOfItemsByCompanyCreateInputInputObject
      PredictedSalesQuantityOfItemsByCompanyUpdateInput: PredictedSalesQuantityOfItemsByCompanyUpdateInputInputObject
      PredictedSalesQuantityOfItemsByCompanyUpdateManyMutationInput: PredictedSalesQuantityOfItemsByCompanyUpdateManyMutationInputInputObject
      MedicareServiceCreateInput: MedicareServiceCreateInputInputObject
      MedicareServiceUpdateInput: MedicareServiceUpdateInputInputObject
      MedicareServiceUpdateManyMutationInput: MedicareServiceUpdateManyMutationInputInputObject
      PatientCreateInput: PatientCreateInputInputObject
      NameCreateManyInput: NameCreateManyInputInputObject
      NameCreateInput: NameCreateInputInputObject
      AddressCreateOneInput: AddressCreateOneInputInputObject
      BasicDailyFeeCreateManyInput: BasicDailyFeeCreateManyInputInputObject
      PatientUpdateInput: PatientUpdateInputInputObject
      NameUpdateManyInput: NameUpdateManyInputInputObject
      NameUpdateWithWhereUniqueNestedInput: NameUpdateWithWhereUniqueNestedInputInputObject
      NameUpdateDataInput: NameUpdateDataInputInputObject
      NameUpsertWithWhereUniqueNestedInput: NameUpsertWithWhereUniqueNestedInputInputObject
      NameScalarWhereInput: NameScalarWhereInputInputObject
      NameUpdateManyWithWhereNestedInput: NameUpdateManyWithWhereNestedInputInputObject
      NameUpdateManyDataInput: NameUpdateManyDataInputInputObject
      AddressUpdateOneInput: AddressUpdateOneInputInputObject
      AddressUpsertNestedInput: AddressUpsertNestedInputInputObject
      BasicDailyFeeUpdateManyInput: BasicDailyFeeUpdateManyInputInputObject
      BasicDailyFeeUpdateWithWhereUniqueNestedInput: BasicDailyFeeUpdateWithWhereUniqueNestedInputInputObject
      BasicDailyFeeUpsertWithWhereUniqueNestedInput: BasicDailyFeeUpsertWithWhereUniqueNestedInputInputObject
      BasicDailyFeeScalarWhereInput: BasicDailyFeeScalarWhereInputInputObject
      BasicDailyFeeUpdateManyWithWhereNestedInput: BasicDailyFeeUpdateManyWithWhereNestedInputInputObject
      BasicDailyFeeUpdateManyDataInput: BasicDailyFeeUpdateManyDataInputInputObject
      PatientUpdateManyMutationInput: PatientUpdateManyMutationInputInputObject
      NameUpdateInput: NameUpdateInputInputObject
      NameUpdateManyMutationInput: NameUpdateManyMutationInputInputObject
      HealthcareProviderCreateInput: HealthcareProviderCreateInputInputObject
      HealthcareProviderUpdateInput: HealthcareProviderUpdateInputInputObject
      HealthcareProviderUpdateManyMutationInput: HealthcareProviderUpdateManyMutationInputInputObject
      ImmunisationScheduleCreateInput: ImmunisationScheduleCreateInputInputObject
      DiseaseCreateOneInput: DiseaseCreateOneInputInputObject
      DiseaseCreateInput: DiseaseCreateInputInputObject
      VaccineBrandCreateOneInput: VaccineBrandCreateOneInputInputObject
      VaccineBrandCreateInput: VaccineBrandCreateInputInputObject
      ImmunisationScheduleUpdateInput: ImmunisationScheduleUpdateInputInputObject
      DiseaseUpdateOneInput: DiseaseUpdateOneInputInputObject
      DiseaseUpdateDataInput: DiseaseUpdateDataInputInputObject
      DiseaseUpsertNestedInput: DiseaseUpsertNestedInputInputObject
      VaccineBrandUpdateOneInput: VaccineBrandUpdateOneInputInputObject
      VaccineBrandUpdateDataInput: VaccineBrandUpdateDataInputInputObject
      VaccineBrandUpsertNestedInput: VaccineBrandUpsertNestedInputInputObject
      ImmunisationScheduleUpdateManyMutationInput: ImmunisationScheduleUpdateManyMutationInputInputObject
      VaccineBrandUpdateInput: VaccineBrandUpdateInputInputObject
      VaccineBrandUpdateManyMutationInput: VaccineBrandUpdateManyMutationInputInputObject
      DiseaseUpdateInput: DiseaseUpdateInputInputObject
      DiseaseUpdateManyMutationInput: DiseaseUpdateManyMutationInputInputObject
      HILogCreateInput: HILogCreateInputInputObject
      HILogUpdateInput: HILogUpdateInputInputObject
      HILogUpdateManyMutationInput: HILogUpdateManyMutationInputInputObject
      PbsOrganisationCreateInput: PbsOrganisationCreateInputInputObject
      PbsOrganisationUpdateInput: PbsOrganisationUpdateInputInputObject
      PbsOrganisationUpdateManyMutationInput: PbsOrganisationUpdateManyMutationInputInputObject
      PbsTPPCreateInput: PbsTPPCreateInputInputObject
      PbsOrganisationCreateOneInput: PbsOrganisationCreateOneInputInputObject
      PbsTPPUpdateInput: PbsTPPUpdateInputInputObject
      PbsOrganisationUpdateOneInput: PbsOrganisationUpdateOneInputInputObject
      PbsOrganisationUpdateDataInput: PbsOrganisationUpdateDataInputInputObject
      PbsOrganisationUpsertNestedInput: PbsOrganisationUpsertNestedInputInputObject
      PbsTPPUpdateManyMutationInput: PbsTPPUpdateManyMutationInputInputObject
      MeansTestedFeeUpdateInput: MeansTestedFeeUpdateInputInputObject
      MeansTestedFeeUpdateManyMutationInput: MeansTestedFeeUpdateManyMutationInputInputObject
      MeansTestLimitsCreateInput: MeansTestLimitsCreateInputInputObject
      MeansTestLimitsUpdateInput: MeansTestLimitsUpdateInputInputObject
      MeansTestLimitsUpdateManyMutationInput: MeansTestLimitsUpdateManyMutationInputInputObject
      BasicDailyFeeUpdateInput: BasicDailyFeeUpdateInputInputObject
      BasicDailyFeeUpdateManyMutationInput: BasicDailyFeeUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      AddressSubscriptionWhereInput: AddressSubscriptionWhereInputInputObject
      ContactSubscriptionWhereInput: ContactSubscriptionWhereInputInputObject
      CompanySubscriptionWhereInput: CompanySubscriptionWhereInputInputObject
      CompanyMemberSubscriptionWhereInput: CompanyMemberSubscriptionWhereInputInputObject
      CustomerSubscriptionWhereInput: CustomerSubscriptionWhereInputInputObject
      IntegrationSubscriptionWhereInput: IntegrationSubscriptionWhereInputInputObject
      ServiceSubscriptionWhereInput: ServiceSubscriptionWhereInputInputObject
      ProjectSubscriptionWhereInput: ProjectSubscriptionWhereInputInputObject
      ProjectServiceSubscriptionWhereInput: ProjectServiceSubscriptionWhereInputInputObject
      ProjectServiceRuleSubscriptionWhereInput: ProjectServiceRuleSubscriptionWhereInputInputObject
      PlanSubscriptionWhereInput: PlanSubscriptionWhereInputInputObject
      SessionSubscriptionWhereInput: SessionSubscriptionWhereInputInputObject
      TimeSheetSubscriptionWhereInput: TimeSheetSubscriptionWhereInputInputObject
      AttachmentSubscriptionWhereInput: AttachmentSubscriptionWhereInputInputObject
      TimeSheetEntrySubscriptionWhereInput: TimeSheetEntrySubscriptionWhereInputInputObject
      InvoiceItemEntrySubscriptionWhereInput: InvoiceItemEntrySubscriptionWhereInputInputObject
      InvoiceSubscriptionWhereInput: InvoiceSubscriptionWhereInputInputObject
      MainAccountSubscriptionWhereInput: MainAccountSubscriptionWhereInputInputObject
      LedgerJournalSubscriptionWhereInput: LedgerJournalSubscriptionWhereInputInputObject
      LedgerTransactionSubscriptionWhereInput: LedgerTransactionSubscriptionWhereInputInputObject
      LedgerPostingSubscriptionWhereInput: LedgerPostingSubscriptionWhereInputInputObject
      BankSubscriptionWhereInput: BankSubscriptionWhereInputInputObject
      BankTransactionSubscriptionWhereInput: BankTransactionSubscriptionWhereInputInputObject
      WareHouseSubscriptionWhereInput: WareHouseSubscriptionWhereInputInputObject
      InventorySubscriptionWhereInput: InventorySubscriptionWhereInputInputObject
      SupplierSubscriptionWhereInput: SupplierSubscriptionWhereInputInputObject
      AssetGroupSubscriptionWhereInput: AssetGroupSubscriptionWhereInputInputObject
      AssetSubscriptionWhereInput: AssetSubscriptionWhereInputInputObject
      PurchaseOrderSubscriptionWhereInput: PurchaseOrderSubscriptionWhereInputInputObject
      PoReceiptSubscriptionWhereInput: PoReceiptSubscriptionWhereInputInputObject
      InventoryOnHandSubscriptionWhereInput: InventoryOnHandSubscriptionWhereInputInputObject
      PurchaseOrderLineSubscriptionWhereInput: PurchaseOrderLineSubscriptionWhereInputInputObject
      ApInvoiceSubscriptionWhereInput: ApInvoiceSubscriptionWhereInputInputObject
      SalesOrderSubscriptionWhereInput: SalesOrderSubscriptionWhereInputInputObject
      SalesOrderLineSubscriptionWhereInput: SalesOrderLineSubscriptionWhereInputInputObject
      PredictedSalesValueByCompanySubscriptionWhereInput: PredictedSalesValueByCompanySubscriptionWhereInputInputObject
      PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInput: PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInputInputObject
      MedicareServiceSubscriptionWhereInput: MedicareServiceSubscriptionWhereInputInputObject
      PatientSubscriptionWhereInput: PatientSubscriptionWhereInputInputObject
      NameSubscriptionWhereInput: NameSubscriptionWhereInputInputObject
      HealthcareProviderSubscriptionWhereInput: HealthcareProviderSubscriptionWhereInputInputObject
      ImmunisationScheduleSubscriptionWhereInput: ImmunisationScheduleSubscriptionWhereInputInputObject
      VaccineBrandSubscriptionWhereInput: VaccineBrandSubscriptionWhereInputInputObject
      DiseaseSubscriptionWhereInput: DiseaseSubscriptionWhereInputInputObject
      HILogSubscriptionWhereInput: HILogSubscriptionWhereInputInputObject
      PbsOrganisationSubscriptionWhereInput: PbsOrganisationSubscriptionWhereInputInputObject
      PbsTPPSubscriptionWhereInput: PbsTPPSubscriptionWhereInputInputObject
      MeansTestedFeeSubscriptionWhereInput: MeansTestedFeeSubscriptionWhereInputInputObject
      MeansTestLimitsSubscriptionWhereInput: MeansTestLimitsSubscriptionWhereInputInputObject
      BasicDailyFeeSubscriptionWhereInput: BasicDailyFeeSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    UserOrderByInput: UserOrderByInputValues,
    AddressOrderByInput: AddressOrderByInputValues,
    ContactOrderByInput: ContactOrderByInputValues,
    BusinessType: BusinessTypeValues,
    Country: CountryValues,
    Currency: CurrencyValues,
    PlanType: PlanTypeValues,
    CompanyMemberRole: CompanyMemberRoleValues,
    CompanyMemberStatus: CompanyMemberStatusValues,
    CompanyMemberOrderByInput: CompanyMemberOrderByInputValues,
    CompanyOrderByInput: CompanyOrderByInputValues,
    SupplierTermsOfPayment: SupplierTermsOfPaymentValues,
    LevelOfCare: LevelOfCareValues,
    CustomerOrderByInput: CustomerOrderByInputValues,
    IntegrationType: IntegrationTypeValues,
    IntegrationOrderByInput: IntegrationOrderByInputValues,
    ServiceBillingType: ServiceBillingTypeValues,
    TimeBasedType: TimeBasedTypeValues,
    ServiceOrderByInput: ServiceOrderByInputValues,
    ProjectStatus: ProjectStatusValues,
    ProjectServiceRuleType: ProjectServiceRuleTypeValues,
    ProjectServiceOrderByInput: ProjectServiceOrderByInputValues,
    ProjectServiceRuleOrderByInput: ProjectServiceRuleOrderByInputValues,
    ProjectOrderByInput: ProjectOrderByInputValues,
    PlanOrderByInput: PlanOrderByInputValues,
    SessionOrderByInput: SessionOrderByInputValues,
    AttachmentOrderByInput: AttachmentOrderByInputValues,
    TimeSheetStatus: TimeSheetStatusValues,
    TimeSheetEntryOrderByInput: TimeSheetEntryOrderByInputValues,
    TimeSheetOrderByInput: TimeSheetOrderByInputValues,
    InvoiceStatus: InvoiceStatusValues,
    InvoiceType: InvoiceTypeValues,
    InvoiceItemEntryOrderByInput: InvoiceItemEntryOrderByInputValues,
    InvoiceOrderByInput: InvoiceOrderByInputValues,
    MainAccountType: MainAccountTypeValues,
    MainAccountOrderByInput: MainAccountOrderByInputValues,
    LedgerJournalOrderByInput: LedgerJournalOrderByInputValues,
    DrCr: DrCrValues,
    LedgerTransactionOrderByInput: LedgerTransactionOrderByInputValues,
    PostingType: PostingTypeValues,
    LedgerPostingOrderByInput: LedgerPostingOrderByInputValues,
    BankOrderByInput: BankOrderByInputValues,
    BankTransactionOrderByInput: BankTransactionOrderByInputValues,
    WareHouseOrderByInput: WareHouseOrderByInputValues,
    InventoryModel: InventoryModelValues,
    UOM: UOMValues,
    InventoryOrderByInput: InventoryOrderByInputValues,
    SupplierOrderByInput: SupplierOrderByInputValues,
    AssetGroupDepreciationType: AssetGroupDepreciationTypeValues,
    AssetGroupOrderByInput: AssetGroupOrderByInputValues,
    AssetOrderByInput: AssetOrderByInputValues,
    PoStatus: PoStatusValues,
    PurchaseOrderOrderByInput: PurchaseOrderOrderByInputValues,
    PoReceiptOrderByInput: PoReceiptOrderByInputValues,
    InventoryOnHandOrderByInput: InventoryOnHandOrderByInputValues,
    PurchaseOrderLineOrderByInput: PurchaseOrderLineOrderByInputValues,
    ApInvoiceStatus: ApInvoiceStatusValues,
    ApInvoiceOrderByInput: ApInvoiceOrderByInputValues,
    SalesOrderOrderByInput: SalesOrderOrderByInputValues,
    SalesOrderLineOrderByInput: SalesOrderLineOrderByInputValues,
    PredictedSalesValueByCompanyOrderByInput: PredictedSalesValueByCompanyOrderByInputValues,
    PredictedSalesQuantityOfItemsByCompanyOrderByInput: PredictedSalesQuantityOfItemsByCompanyOrderByInputValues,
    MedicareServiceOrderByInput: MedicareServiceOrderByInputValues,
    NameOrderByInput: NameOrderByInputValues,
    Gender: GenderValues,
    DVACardType: DVACardTypeValues,
    AboriginalStatus: AboriginalStatusValues,
    BasicDailyFeeOrderByInput: BasicDailyFeeOrderByInputValues,
    PatientOrderByInput: PatientOrderByInputValues,
    HealthcareProviderOrderByInput: HealthcareProviderOrderByInputValues,
    PeriodUnit: PeriodUnitValues,
    ImmunisationScheduleOrderByInput: ImmunisationScheduleOrderByInputValues,
    VaccineBrandOrderByInput: VaccineBrandOrderByInputValues,
    DiseaseOrderByInput: DiseaseOrderByInputValues,
    HINumberStatus: HINumberStatusValues,
    SalusResponse: SalusResponseValues,
    HILogOrderByInput: HILogOrderByInputValues,
    PbsOrganisationOrderByInput: PbsOrganisationOrderByInputValues,
    PBSPricingModel: PBSPricingModelValues,
    PbsTPPOrderByInput: PbsTPPOrderByInputValues,
    MeansTestedFeeOrderByInput: MeansTestedFeeOrderByInputValues,
    MeansTestLimitsOrderByInput: MeansTestLimitsOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'address', args?: QueryAddressArgs[] | false, alias?: string  } 
  | { name: 'addresses', args?: QueryAddressesArgs[] | false, alias?: string  } 
  | { name: 'addressesConnection', args?: QueryAddressesConnectionArgs[] | false, alias?: string  } 
  | { name: 'contact', args?: QueryContactArgs[] | false, alias?: string  } 
  | { name: 'contacts', args?: QueryContactsArgs[] | false, alias?: string  } 
  | { name: 'contactsConnection', args?: QueryContactsConnectionArgs[] | false, alias?: string  } 
  | { name: 'company', args?: QueryCompanyArgs[] | false, alias?: string  } 
  | { name: 'companies', args?: QueryCompaniesArgs[] | false, alias?: string  } 
  | { name: 'companiesConnection', args?: QueryCompaniesConnectionArgs[] | false, alias?: string  } 
  | { name: 'companyMember', args?: QueryCompanyMemberArgs[] | false, alias?: string  } 
  | { name: 'companyMembers', args?: QueryCompanyMembersArgs[] | false, alias?: string  } 
  | { name: 'companyMembersConnection', args?: QueryCompanyMembersConnectionArgs[] | false, alias?: string  } 
  | { name: 'customer', args?: QueryCustomerArgs[] | false, alias?: string  } 
  | { name: 'customers', args?: QueryCustomersArgs[] | false, alias?: string  } 
  | { name: 'customersConnection', args?: QueryCustomersConnectionArgs[] | false, alias?: string  } 
  | { name: 'integration', args?: QueryIntegrationArgs[] | false, alias?: string  } 
  | { name: 'integrations', args?: QueryIntegrationsArgs[] | false, alias?: string  } 
  | { name: 'integrationsConnection', args?: QueryIntegrationsConnectionArgs[] | false, alias?: string  } 
  | { name: 'service', args?: QueryServiceArgs[] | false, alias?: string  } 
  | { name: 'services', args?: QueryServicesArgs[] | false, alias?: string  } 
  | { name: 'servicesConnection', args?: QueryServicesConnectionArgs[] | false, alias?: string  } 
  | { name: 'project', args?: QueryProjectArgs[] | false, alias?: string  } 
  | { name: 'projects', args?: QueryProjectsArgs[] | false, alias?: string  } 
  | { name: 'projectsConnection', args?: QueryProjectsConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectService', args?: QueryProjectServiceArgs[] | false, alias?: string  } 
  | { name: 'projectServices', args?: QueryProjectServicesArgs[] | false, alias?: string  } 
  | { name: 'projectServicesConnection', args?: QueryProjectServicesConnectionArgs[] | false, alias?: string  } 
  | { name: 'projectServiceRule', args?: QueryProjectServiceRuleArgs[] | false, alias?: string  } 
  | { name: 'projectServiceRules', args?: QueryProjectServiceRulesArgs[] | false, alias?: string  } 
  | { name: 'projectServiceRulesConnection', args?: QueryProjectServiceRulesConnectionArgs[] | false, alias?: string  } 
  | { name: 'plan', args?: QueryPlanArgs[] | false, alias?: string  } 
  | { name: 'plans', args?: QueryPlansArgs[] | false, alias?: string  } 
  | { name: 'plansConnection', args?: QueryPlansConnectionArgs[] | false, alias?: string  } 
  | { name: 'session', args?: QuerySessionArgs[] | false, alias?: string  } 
  | { name: 'sessions', args?: QuerySessionsArgs[] | false, alias?: string  } 
  | { name: 'sessionsConnection', args?: QuerySessionsConnectionArgs[] | false, alias?: string  } 
  | { name: 'timeSheet', args?: QueryTimeSheetArgs[] | false, alias?: string  } 
  | { name: 'timeSheets', args?: QueryTimeSheetsArgs[] | false, alias?: string  } 
  | { name: 'timeSheetsConnection', args?: QueryTimeSheetsConnectionArgs[] | false, alias?: string  } 
  | { name: 'attachment', args?: QueryAttachmentArgs[] | false, alias?: string  } 
  | { name: 'attachments', args?: QueryAttachmentsArgs[] | false, alias?: string  } 
  | { name: 'attachmentsConnection', args?: QueryAttachmentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'timeSheetEntry', args?: QueryTimeSheetEntryArgs[] | false, alias?: string  } 
  | { name: 'timeSheetEntries', args?: QueryTimeSheetEntriesArgs[] | false, alias?: string  } 
  | { name: 'timeSheetEntriesConnection', args?: QueryTimeSheetEntriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'invoiceItemEntry', args?: QueryInvoiceItemEntryArgs[] | false, alias?: string  } 
  | { name: 'invoiceItemEntries', args?: QueryInvoiceItemEntriesArgs[] | false, alias?: string  } 
  | { name: 'invoiceItemEntriesConnection', args?: QueryInvoiceItemEntriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'invoice', args?: QueryInvoiceArgs[] | false, alias?: string  } 
  | { name: 'invoices', args?: QueryInvoicesArgs[] | false, alias?: string  } 
  | { name: 'invoicesConnection', args?: QueryInvoicesConnectionArgs[] | false, alias?: string  } 
  | { name: 'mainAccount', args?: QueryMainAccountArgs[] | false, alias?: string  } 
  | { name: 'mainAccounts', args?: QueryMainAccountsArgs[] | false, alias?: string  } 
  | { name: 'mainAccountsConnection', args?: QueryMainAccountsConnectionArgs[] | false, alias?: string  } 
  | { name: 'ledgerJournal', args?: QueryLedgerJournalArgs[] | false, alias?: string  } 
  | { name: 'ledgerJournals', args?: QueryLedgerJournalsArgs[] | false, alias?: string  } 
  | { name: 'ledgerJournalsConnection', args?: QueryLedgerJournalsConnectionArgs[] | false, alias?: string  } 
  | { name: 'ledgerTransaction', args?: QueryLedgerTransactionArgs[] | false, alias?: string  } 
  | { name: 'ledgerTransactions', args?: QueryLedgerTransactionsArgs[] | false, alias?: string  } 
  | { name: 'ledgerTransactionsConnection', args?: QueryLedgerTransactionsConnectionArgs[] | false, alias?: string  } 
  | { name: 'ledgerPosting', args?: QueryLedgerPostingArgs[] | false, alias?: string  } 
  | { name: 'ledgerPostings', args?: QueryLedgerPostingsArgs[] | false, alias?: string  } 
  | { name: 'ledgerPostingsConnection', args?: QueryLedgerPostingsConnectionArgs[] | false, alias?: string  } 
  | { name: 'bank', args?: QueryBankArgs[] | false, alias?: string  } 
  | { name: 'banks', args?: QueryBanksArgs[] | false, alias?: string  } 
  | { name: 'banksConnection', args?: QueryBanksConnectionArgs[] | false, alias?: string  } 
  | { name: 'bankTransaction', args?: QueryBankTransactionArgs[] | false, alias?: string  } 
  | { name: 'bankTransactions', args?: QueryBankTransactionsArgs[] | false, alias?: string  } 
  | { name: 'bankTransactionsConnection', args?: QueryBankTransactionsConnectionArgs[] | false, alias?: string  } 
  | { name: 'wareHouse', args?: QueryWareHouseArgs[] | false, alias?: string  } 
  | { name: 'wareHouses', args?: QueryWareHousesArgs[] | false, alias?: string  } 
  | { name: 'wareHousesConnection', args?: QueryWareHousesConnectionArgs[] | false, alias?: string  } 
  | { name: 'inventory', args?: QueryInventoryArgs[] | false, alias?: string  } 
  | { name: 'inventories', args?: QueryInventoriesArgs[] | false, alias?: string  } 
  | { name: 'inventoriesConnection', args?: QueryInventoriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'supplier', args?: QuerySupplierArgs[] | false, alias?: string  } 
  | { name: 'suppliers', args?: QuerySuppliersArgs[] | false, alias?: string  } 
  | { name: 'suppliersConnection', args?: QuerySuppliersConnectionArgs[] | false, alias?: string  } 
  | { name: 'assetGroup', args?: QueryAssetGroupArgs[] | false, alias?: string  } 
  | { name: 'assetGroups', args?: QueryAssetGroupsArgs[] | false, alias?: string  } 
  | { name: 'assetGroupsConnection', args?: QueryAssetGroupsConnectionArgs[] | false, alias?: string  } 
  | { name: 'asset', args?: QueryAssetArgs[] | false, alias?: string  } 
  | { name: 'assets', args?: QueryAssetsArgs[] | false, alias?: string  } 
  | { name: 'assetsConnection', args?: QueryAssetsConnectionArgs[] | false, alias?: string  } 
  | { name: 'purchaseOrder', args?: QueryPurchaseOrderArgs[] | false, alias?: string  } 
  | { name: 'purchaseOrders', args?: QueryPurchaseOrdersArgs[] | false, alias?: string  } 
  | { name: 'purchaseOrdersConnection', args?: QueryPurchaseOrdersConnectionArgs[] | false, alias?: string  } 
  | { name: 'poReceipt', args?: QueryPoReceiptArgs[] | false, alias?: string  } 
  | { name: 'poReceipts', args?: QueryPoReceiptsArgs[] | false, alias?: string  } 
  | { name: 'poReceiptsConnection', args?: QueryPoReceiptsConnectionArgs[] | false, alias?: string  } 
  | { name: 'inventoryOnHand', args?: QueryInventoryOnHandArgs[] | false, alias?: string  } 
  | { name: 'inventoryOnHands', args?: QueryInventoryOnHandsArgs[] | false, alias?: string  } 
  | { name: 'inventoryOnHandsConnection', args?: QueryInventoryOnHandsConnectionArgs[] | false, alias?: string  } 
  | { name: 'purchaseOrderLine', args?: QueryPurchaseOrderLineArgs[] | false, alias?: string  } 
  | { name: 'purchaseOrderLines', args?: QueryPurchaseOrderLinesArgs[] | false, alias?: string  } 
  | { name: 'purchaseOrderLinesConnection', args?: QueryPurchaseOrderLinesConnectionArgs[] | false, alias?: string  } 
  | { name: 'apInvoice', args?: QueryApInvoiceArgs[] | false, alias?: string  } 
  | { name: 'apInvoices', args?: QueryApInvoicesArgs[] | false, alias?: string  } 
  | { name: 'apInvoicesConnection', args?: QueryApInvoicesConnectionArgs[] | false, alias?: string  } 
  | { name: 'salesOrder', args?: QuerySalesOrderArgs[] | false, alias?: string  } 
  | { name: 'salesOrders', args?: QuerySalesOrdersArgs[] | false, alias?: string  } 
  | { name: 'salesOrdersConnection', args?: QuerySalesOrdersConnectionArgs[] | false, alias?: string  } 
  | { name: 'salesOrderLine', args?: QuerySalesOrderLineArgs[] | false, alias?: string  } 
  | { name: 'salesOrderLines', args?: QuerySalesOrderLinesArgs[] | false, alias?: string  } 
  | { name: 'salesOrderLinesConnection', args?: QuerySalesOrderLinesConnectionArgs[] | false, alias?: string  } 
  | { name: 'predictedSalesValueByCompany', args?: QueryPredictedSalesValueByCompanyArgs[] | false, alias?: string  } 
  | { name: 'predictedSalesValueByCompanies', args?: QueryPredictedSalesValueByCompaniesArgs[] | false, alias?: string  } 
  | { name: 'predictedSalesValueByCompaniesConnection', args?: QueryPredictedSalesValueByCompaniesConnectionArgs[] | false, alias?: string  } 
  | { name: 'predictedSalesQuantityOfItemsByCompany', args?: QueryPredictedSalesQuantityOfItemsByCompanyArgs[] | false, alias?: string  } 
  | { name: 'predictedSalesQuantityOfItemsByCompanies', args?: QueryPredictedSalesQuantityOfItemsByCompaniesArgs[] | false, alias?: string  } 
  | { name: 'predictedSalesQuantityOfItemsByCompaniesConnection', args?: QueryPredictedSalesQuantityOfItemsByCompaniesConnectionArgs[] | false, alias?: string  } 
  | { name: 'medicareService', args?: QueryMedicareServiceArgs[] | false, alias?: string  } 
  | { name: 'medicareServices', args?: QueryMedicareServicesArgs[] | false, alias?: string  } 
  | { name: 'medicareServicesConnection', args?: QueryMedicareServicesConnectionArgs[] | false, alias?: string  } 
  | { name: 'patient', args?: QueryPatientArgs[] | false, alias?: string  } 
  | { name: 'patients', args?: QueryPatientsArgs[] | false, alias?: string  } 
  | { name: 'patientsConnection', args?: QueryPatientsConnectionArgs[] | false, alias?: string  } 
  | { name: 'name', args?: QueryNameArgs[] | false, alias?: string  } 
  | { name: 'names', args?: QueryNamesArgs[] | false, alias?: string  } 
  | { name: 'namesConnection', args?: QueryNamesConnectionArgs[] | false, alias?: string  } 
  | { name: 'healthcareProvider', args?: QueryHealthcareProviderArgs[] | false, alias?: string  } 
  | { name: 'healthcareProviders', args?: QueryHealthcareProvidersArgs[] | false, alias?: string  } 
  | { name: 'healthcareProvidersConnection', args?: QueryHealthcareProvidersConnectionArgs[] | false, alias?: string  } 
  | { name: 'immunisationSchedule', args?: QueryImmunisationScheduleArgs[] | false, alias?: string  } 
  | { name: 'immunisationSchedules', args?: QueryImmunisationSchedulesArgs[] | false, alias?: string  } 
  | { name: 'immunisationSchedulesConnection', args?: QueryImmunisationSchedulesConnectionArgs[] | false, alias?: string  } 
  | { name: 'vaccineBrand', args?: QueryVaccineBrandArgs[] | false, alias?: string  } 
  | { name: 'vaccineBrands', args?: QueryVaccineBrandsArgs[] | false, alias?: string  } 
  | { name: 'vaccineBrandsConnection', args?: QueryVaccineBrandsConnectionArgs[] | false, alias?: string  } 
  | { name: 'disease', args?: QueryDiseaseArgs[] | false, alias?: string  } 
  | { name: 'diseases', args?: QueryDiseasesArgs[] | false, alias?: string  } 
  | { name: 'diseasesConnection', args?: QueryDiseasesConnectionArgs[] | false, alias?: string  } 
  | { name: 'hILog', args?: QueryHILogArgs[] | false, alias?: string  } 
  | { name: 'hILogs', args?: QueryHILogsArgs[] | false, alias?: string  } 
  | { name: 'hILogsConnection', args?: QueryHILogsConnectionArgs[] | false, alias?: string  } 
  | { name: 'pbsOrganisation', args?: QueryPbsOrganisationArgs[] | false, alias?: string  } 
  | { name: 'pbsOrganisations', args?: QueryPbsOrganisationsArgs[] | false, alias?: string  } 
  | { name: 'pbsOrganisationsConnection', args?: QueryPbsOrganisationsConnectionArgs[] | false, alias?: string  } 
  | { name: 'pbsTPP', args?: QueryPbsTPPArgs[] | false, alias?: string  } 
  | { name: 'pbsTPPs', args?: QueryPbsTPPsArgs[] | false, alias?: string  } 
  | { name: 'pbsTPPsConnection', args?: QueryPbsTPPsConnectionArgs[] | false, alias?: string  } 
  | { name: 'meansTestedFee', args?: QueryMeansTestedFeeArgs[] | false, alias?: string  } 
  | { name: 'meansTestedFees', args?: QueryMeansTestedFeesArgs[] | false, alias?: string  } 
  | { name: 'meansTestedFeesConnection', args?: QueryMeansTestedFeesConnectionArgs[] | false, alias?: string  } 
  | { name: 'meansTestLimits', args?: QueryMeansTestLimitsArgs[] | false, alias?: string  } 
  | { name: 'meansTestLimitses', args?: QueryMeansTestLimitsesArgs[] | false, alias?: string  } 
  | { name: 'meansTestLimitsesConnection', args?: QueryMeansTestLimitsesConnectionArgs[] | false, alias?: string  } 
  | { name: 'basicDailyFee', args?: QueryBasicDailyFeeArgs[] | false, alias?: string  } 
  | { name: 'basicDailyFees', args?: QueryBasicDailyFeesArgs[] | false, alias?: string  } 
  | { name: 'basicDailyFeesConnection', args?: QueryBasicDailyFeesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'address'
  | 'addresses'
  | 'addressesConnection'
  | 'contact'
  | 'contacts'
  | 'contactsConnection'
  | 'company'
  | 'companies'
  | 'companiesConnection'
  | 'companyMember'
  | 'companyMembers'
  | 'companyMembersConnection'
  | 'customer'
  | 'customers'
  | 'customersConnection'
  | 'integration'
  | 'integrations'
  | 'integrationsConnection'
  | 'service'
  | 'services'
  | 'servicesConnection'
  | 'project'
  | 'projects'
  | 'projectsConnection'
  | 'projectService'
  | 'projectServices'
  | 'projectServicesConnection'
  | 'projectServiceRule'
  | 'projectServiceRules'
  | 'projectServiceRulesConnection'
  | 'plan'
  | 'plans'
  | 'plansConnection'
  | 'session'
  | 'sessions'
  | 'sessionsConnection'
  | 'timeSheet'
  | 'timeSheets'
  | 'timeSheetsConnection'
  | 'attachment'
  | 'attachments'
  | 'attachmentsConnection'
  | 'timeSheetEntry'
  | 'timeSheetEntries'
  | 'timeSheetEntriesConnection'
  | 'invoiceItemEntry'
  | 'invoiceItemEntries'
  | 'invoiceItemEntriesConnection'
  | 'invoice'
  | 'invoices'
  | 'invoicesConnection'
  | 'mainAccount'
  | 'mainAccounts'
  | 'mainAccountsConnection'
  | 'ledgerJournal'
  | 'ledgerJournals'
  | 'ledgerJournalsConnection'
  | 'ledgerTransaction'
  | 'ledgerTransactions'
  | 'ledgerTransactionsConnection'
  | 'ledgerPosting'
  | 'ledgerPostings'
  | 'ledgerPostingsConnection'
  | 'bank'
  | 'banks'
  | 'banksConnection'
  | 'bankTransaction'
  | 'bankTransactions'
  | 'bankTransactionsConnection'
  | 'wareHouse'
  | 'wareHouses'
  | 'wareHousesConnection'
  | 'inventory'
  | 'inventories'
  | 'inventoriesConnection'
  | 'supplier'
  | 'suppliers'
  | 'suppliersConnection'
  | 'assetGroup'
  | 'assetGroups'
  | 'assetGroupsConnection'
  | 'asset'
  | 'assets'
  | 'assetsConnection'
  | 'purchaseOrder'
  | 'purchaseOrders'
  | 'purchaseOrdersConnection'
  | 'poReceipt'
  | 'poReceipts'
  | 'poReceiptsConnection'
  | 'inventoryOnHand'
  | 'inventoryOnHands'
  | 'inventoryOnHandsConnection'
  | 'purchaseOrderLine'
  | 'purchaseOrderLines'
  | 'purchaseOrderLinesConnection'
  | 'apInvoice'
  | 'apInvoices'
  | 'apInvoicesConnection'
  | 'salesOrder'
  | 'salesOrders'
  | 'salesOrdersConnection'
  | 'salesOrderLine'
  | 'salesOrderLines'
  | 'salesOrderLinesConnection'
  | 'predictedSalesValueByCompany'
  | 'predictedSalesValueByCompanies'
  | 'predictedSalesValueByCompaniesConnection'
  | 'predictedSalesQuantityOfItemsByCompany'
  | 'predictedSalesQuantityOfItemsByCompanies'
  | 'predictedSalesQuantityOfItemsByCompaniesConnection'
  | 'medicareService'
  | 'medicareServices'
  | 'medicareServicesConnection'
  | 'patient'
  | 'patients'
  | 'patientsConnection'
  | 'name'
  | 'names'
  | 'namesConnection'
  | 'healthcareProvider'
  | 'healthcareProviders'
  | 'healthcareProvidersConnection'
  | 'immunisationSchedule'
  | 'immunisationSchedules'
  | 'immunisationSchedulesConnection'
  | 'vaccineBrand'
  | 'vaccineBrands'
  | 'vaccineBrandsConnection'
  | 'disease'
  | 'diseases'
  | 'diseasesConnection'
  | 'hILog'
  | 'hILogs'
  | 'hILogsConnection'
  | 'pbsOrganisation'
  | 'pbsOrganisations'
  | 'pbsOrganisationsConnection'
  | 'pbsTPP'
  | 'pbsTPPs'
  | 'pbsTPPsConnection'
  | 'meansTestedFee'
  | 'meansTestedFees'
  | 'meansTestedFeesConnection'
  | 'meansTestLimits'
  | 'meansTestLimitses'
  | 'meansTestLimitsesConnection'
  | 'basicDailyFee'
  | 'basicDailyFees'
  | 'basicDailyFeesConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAddressArgs =
  | 'where'
type QueryAddressesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAddressesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryContactArgs =
  | 'where'
type QueryContactsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryContactsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCompanyArgs =
  | 'where'
type QueryCompaniesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCompaniesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCompanyMemberArgs =
  | 'where'
type QueryCompanyMembersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCompanyMembersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCustomerArgs =
  | 'where'
type QueryCustomersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCustomersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryIntegrationArgs =
  | 'where'
type QueryIntegrationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryIntegrationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryServiceArgs =
  | 'where'
type QueryServicesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryServicesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectArgs =
  | 'where'
type QueryProjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectServiceArgs =
  | 'where'
type QueryProjectServicesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectServicesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectServiceRuleArgs =
  | 'where'
type QueryProjectServiceRulesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryProjectServiceRulesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPlanArgs =
  | 'where'
type QueryPlansArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPlansConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySessionArgs =
  | 'where'
type QuerySessionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySessionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTimeSheetArgs =
  | 'where'
type QueryTimeSheetsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTimeSheetsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAttachmentArgs =
  | 'where'
type QueryAttachmentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAttachmentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTimeSheetEntryArgs =
  | 'where'
type QueryTimeSheetEntriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTimeSheetEntriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInvoiceItemEntryArgs =
  | 'where'
type QueryInvoiceItemEntriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInvoiceItemEntriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInvoiceArgs =
  | 'where'
type QueryInvoicesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInvoicesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMainAccountArgs =
  | 'where'
type QueryMainAccountsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMainAccountsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLedgerJournalArgs =
  | 'where'
type QueryLedgerJournalsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLedgerJournalsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLedgerTransactionArgs =
  | 'where'
type QueryLedgerTransactionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLedgerTransactionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLedgerPostingArgs =
  | 'where'
type QueryLedgerPostingsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLedgerPostingsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBankArgs =
  | 'where'
type QueryBanksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBanksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBankTransactionArgs =
  | 'where'
type QueryBankTransactionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBankTransactionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryWareHouseArgs =
  | 'where'
type QueryWareHousesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryWareHousesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInventoryArgs =
  | 'where'
type QueryInventoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInventoriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySupplierArgs =
  | 'where'
type QuerySuppliersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySuppliersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAssetGroupArgs =
  | 'where'
type QueryAssetGroupsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAssetGroupsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAssetArgs =
  | 'where'
type QueryAssetsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAssetsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPurchaseOrderArgs =
  | 'where'
type QueryPurchaseOrdersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPurchaseOrdersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPoReceiptArgs =
  | 'where'
type QueryPoReceiptsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPoReceiptsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInventoryOnHandArgs =
  | 'where'
type QueryInventoryOnHandsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryInventoryOnHandsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPurchaseOrderLineArgs =
  | 'where'
type QueryPurchaseOrderLinesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPurchaseOrderLinesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryApInvoiceArgs =
  | 'where'
type QueryApInvoicesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryApInvoicesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySalesOrderArgs =
  | 'where'
type QuerySalesOrdersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySalesOrdersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySalesOrderLineArgs =
  | 'where'
type QuerySalesOrderLinesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySalesOrderLinesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPredictedSalesValueByCompanyArgs =
  | 'where'
type QueryPredictedSalesValueByCompaniesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPredictedSalesValueByCompaniesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPredictedSalesQuantityOfItemsByCompanyArgs =
  | 'where'
type QueryPredictedSalesQuantityOfItemsByCompaniesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPredictedSalesQuantityOfItemsByCompaniesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMedicareServiceArgs =
  | 'where'
type QueryMedicareServicesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMedicareServicesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPatientArgs =
  | 'where'
type QueryPatientsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPatientsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNameArgs =
  | 'where'
type QueryNamesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNamesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHealthcareProviderArgs =
  | 'where'
type QueryHealthcareProvidersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHealthcareProvidersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryImmunisationScheduleArgs =
  | 'where'
type QueryImmunisationSchedulesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryImmunisationSchedulesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVaccineBrandArgs =
  | 'where'
type QueryVaccineBrandsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVaccineBrandsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDiseaseArgs =
  | 'where'
type QueryDiseasesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDiseasesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHILogArgs =
  | 'where'
type QueryHILogsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryHILogsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPbsOrganisationArgs =
  | 'where'
type QueryPbsOrganisationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPbsOrganisationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPbsTPPArgs =
  | 'where'
type QueryPbsTPPsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPbsTPPsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMeansTestedFeeArgs =
  | 'where'
type QueryMeansTestedFeesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMeansTestedFeesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMeansTestLimitsArgs =
  | 'where'
type QueryMeansTestLimitsesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMeansTestLimitsesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBasicDailyFeeArgs =
  | 'where'
type QueryBasicDailyFeesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBasicDailyFeesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  address: {
    type: 'Address'
    args: Record<QueryAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AddressWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  addresses: {
    type: 'Address'
    args: Record<QueryAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AddressWhereInput | null, orderBy?: prisma.AddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address[]> | prisma.Address[]
  }
  addressesConnection: {
    type: 'AddressConnection'
    args: Record<QueryAddressesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AddressWhereInput | null, orderBy?: prisma.AddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressConnection> | prisma.AddressConnection
  }
  contact: {
    type: 'Contact'
    args: Record<QueryContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ContactWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  contacts: {
    type: 'Contact'
    args: Record<QueryContactsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ContactWhereInput | null, orderBy?: prisma.ContactOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact[]> | prisma.Contact[]
  }
  contactsConnection: {
    type: 'ContactConnection'
    args: Record<QueryContactsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ContactWhereInput | null, orderBy?: prisma.ContactOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactConnection> | prisma.ContactConnection
  }
  company: {
    type: 'Company'
    args: Record<QueryCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  companies: {
    type: 'Company'
    args: Record<QueryCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CompanyWhereInput | null, orderBy?: prisma.CompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company[]> | prisma.Company[]
  }
  companiesConnection: {
    type: 'CompanyConnection'
    args: Record<QueryCompaniesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CompanyWhereInput | null, orderBy?: prisma.CompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyConnection> | prisma.CompanyConnection
  }
  companyMember: {
    type: 'CompanyMember'
    args: Record<QueryCompanyMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CompanyMemberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMember | null> | prisma.CompanyMember | null
  }
  companyMembers: {
    type: 'CompanyMember'
    args: Record<QueryCompanyMembersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CompanyMemberWhereInput | null, orderBy?: prisma.CompanyMemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMember[]> | prisma.CompanyMember[]
  }
  companyMembersConnection: {
    type: 'CompanyMemberConnection'
    args: Record<QueryCompanyMembersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CompanyMemberWhereInput | null, orderBy?: prisma.CompanyMemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMemberConnection> | prisma.CompanyMemberConnection
  }
  customer: {
    type: 'Customer'
    args: Record<QueryCustomerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CustomerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer | null> | prisma.Customer | null
  }
  customers: {
    type: 'Customer'
    args: Record<QueryCustomersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CustomerWhereInput | null, orderBy?: prisma.CustomerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer[]> | prisma.Customer[]
  }
  customersConnection: {
    type: 'CustomerConnection'
    args: Record<QueryCustomersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CustomerWhereInput | null, orderBy?: prisma.CustomerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CustomerConnection> | prisma.CustomerConnection
  }
  integration: {
    type: 'Integration'
    args: Record<QueryIntegrationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: IntegrationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Integration | null> | prisma.Integration | null
  }
  integrations: {
    type: 'Integration'
    args: Record<QueryIntegrationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: IntegrationWhereInput | null, orderBy?: prisma.IntegrationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Integration[]> | prisma.Integration[]
  }
  integrationsConnection: {
    type: 'IntegrationConnection'
    args: Record<QueryIntegrationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: IntegrationWhereInput | null, orderBy?: prisma.IntegrationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IntegrationConnection> | prisma.IntegrationConnection
  }
  service: {
    type: 'Service'
    args: Record<QueryServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ServiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service | null> | prisma.Service | null
  }
  services: {
    type: 'Service'
    args: Record<QueryServicesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ServiceWhereInput | null, orderBy?: prisma.ServiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service[]> | prisma.Service[]
  }
  servicesConnection: {
    type: 'ServiceConnection'
    args: Record<QueryServicesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ServiceWhereInput | null, orderBy?: prisma.ServiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ServiceConnection> | prisma.ServiceConnection
  }
  project: {
    type: 'Project'
    args: Record<QueryProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  projects: {
    type: 'Project'
    args: Record<QueryProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project[]> | prisma.Project[]
  }
  projectsConnection: {
    type: 'ProjectConnection'
    args: Record<QueryProjectsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectWhereInput | null, orderBy?: prisma.ProjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectConnection> | prisma.ProjectConnection
  }
  projectService: {
    type: 'ProjectService'
    args: Record<QueryProjectServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectServiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectService | null> | prisma.ProjectService | null
  }
  projectServices: {
    type: 'ProjectService'
    args: Record<QueryProjectServicesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectServiceWhereInput | null, orderBy?: prisma.ProjectServiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectService[]> | prisma.ProjectService[]
  }
  projectServicesConnection: {
    type: 'ProjectServiceConnection'
    args: Record<QueryProjectServicesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectServiceWhereInput | null, orderBy?: prisma.ProjectServiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceConnection> | prisma.ProjectServiceConnection
  }
  projectServiceRule: {
    type: 'ProjectServiceRule'
    args: Record<QueryProjectServiceRuleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ProjectServiceRuleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRule | null> | prisma.ProjectServiceRule | null
  }
  projectServiceRules: {
    type: 'ProjectServiceRule'
    args: Record<QueryProjectServiceRulesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectServiceRuleWhereInput | null, orderBy?: prisma.ProjectServiceRuleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRule[]> | prisma.ProjectServiceRule[]
  }
  projectServiceRulesConnection: {
    type: 'ProjectServiceRuleConnection'
    args: Record<QueryProjectServiceRulesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ProjectServiceRuleWhereInput | null, orderBy?: prisma.ProjectServiceRuleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRuleConnection> | prisma.ProjectServiceRuleConnection
  }
  plan: {
    type: 'Plan'
    args: Record<QueryPlanArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PlanWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Plan | null> | prisma.Plan | null
  }
  plans: {
    type: 'Plan'
    args: Record<QueryPlansArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PlanWhereInput | null, orderBy?: prisma.PlanOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Plan[]> | prisma.Plan[]
  }
  plansConnection: {
    type: 'PlanConnection'
    args: Record<QueryPlansConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PlanWhereInput | null, orderBy?: prisma.PlanOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlanConnection> | prisma.PlanConnection
  }
  session: {
    type: 'Session'
    args: Record<QuerySessionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SessionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Session | null> | prisma.Session | null
  }
  sessions: {
    type: 'Session'
    args: Record<QuerySessionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SessionWhereInput | null, orderBy?: prisma.SessionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Session[]> | prisma.Session[]
  }
  sessionsConnection: {
    type: 'SessionConnection'
    args: Record<QuerySessionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SessionWhereInput | null, orderBy?: prisma.SessionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SessionConnection> | prisma.SessionConnection
  }
  timeSheet: {
    type: 'TimeSheet'
    args: Record<QueryTimeSheetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TimeSheetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheet | null> | prisma.TimeSheet | null
  }
  timeSheets: {
    type: 'TimeSheet'
    args: Record<QueryTimeSheetsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TimeSheetWhereInput | null, orderBy?: prisma.TimeSheetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheet[]> | prisma.TimeSheet[]
  }
  timeSheetsConnection: {
    type: 'TimeSheetConnection'
    args: Record<QueryTimeSheetsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TimeSheetWhereInput | null, orderBy?: prisma.TimeSheetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetConnection> | prisma.TimeSheetConnection
  }
  attachment: {
    type: 'Attachment'
    args: Record<QueryAttachmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AttachmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment | null> | prisma.Attachment | null
  }
  attachments: {
    type: 'Attachment'
    args: Record<QueryAttachmentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AttachmentWhereInput | null, orderBy?: prisma.AttachmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment[]> | prisma.Attachment[]
  }
  attachmentsConnection: {
    type: 'AttachmentConnection'
    args: Record<QueryAttachmentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AttachmentWhereInput | null, orderBy?: prisma.AttachmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttachmentConnection> | prisma.AttachmentConnection
  }
  timeSheetEntry: {
    type: 'TimeSheetEntry'
    args: Record<QueryTimeSheetEntryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TimeSheetEntryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntry | null> | prisma.TimeSheetEntry | null
  }
  timeSheetEntries: {
    type: 'TimeSheetEntry'
    args: Record<QueryTimeSheetEntriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TimeSheetEntryWhereInput | null, orderBy?: prisma.TimeSheetEntryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntry[]> | prisma.TimeSheetEntry[]
  }
  timeSheetEntriesConnection: {
    type: 'TimeSheetEntryConnection'
    args: Record<QueryTimeSheetEntriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TimeSheetEntryWhereInput | null, orderBy?: prisma.TimeSheetEntryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntryConnection> | prisma.TimeSheetEntryConnection
  }
  invoiceItemEntry: {
    type: 'InvoiceItemEntry'
    args: Record<QueryInvoiceItemEntryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: InvoiceItemEntryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntry | null> | prisma.InvoiceItemEntry | null
  }
  invoiceItemEntries: {
    type: 'InvoiceItemEntry'
    args: Record<QueryInvoiceItemEntriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InvoiceItemEntryWhereInput | null, orderBy?: prisma.InvoiceItemEntryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntry[]> | prisma.InvoiceItemEntry[]
  }
  invoiceItemEntriesConnection: {
    type: 'InvoiceItemEntryConnection'
    args: Record<QueryInvoiceItemEntriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InvoiceItemEntryWhereInput | null, orderBy?: prisma.InvoiceItemEntryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntryConnection> | prisma.InvoiceItemEntryConnection
  }
  invoice: {
    type: 'Invoice'
    args: Record<QueryInvoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: InvoiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Invoice | null> | prisma.Invoice | null
  }
  invoices: {
    type: 'Invoice'
    args: Record<QueryInvoicesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InvoiceWhereInput | null, orderBy?: prisma.InvoiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Invoice[]> | prisma.Invoice[]
  }
  invoicesConnection: {
    type: 'InvoiceConnection'
    args: Record<QueryInvoicesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InvoiceWhereInput | null, orderBy?: prisma.InvoiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceConnection> | prisma.InvoiceConnection
  }
  mainAccount: {
    type: 'MainAccount'
    args: Record<QueryMainAccountArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MainAccountWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccount | null> | prisma.MainAccount | null
  }
  mainAccounts: {
    type: 'MainAccount'
    args: Record<QueryMainAccountsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MainAccountWhereInput | null, orderBy?: prisma.MainAccountOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccount[]> | prisma.MainAccount[]
  }
  mainAccountsConnection: {
    type: 'MainAccountConnection'
    args: Record<QueryMainAccountsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MainAccountWhereInput | null, orderBy?: prisma.MainAccountOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccountConnection> | prisma.MainAccountConnection
  }
  ledgerJournal: {
    type: 'LedgerJournal'
    args: Record<QueryLedgerJournalArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: LedgerJournalWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournal | null> | prisma.LedgerJournal | null
  }
  ledgerJournals: {
    type: 'LedgerJournal'
    args: Record<QueryLedgerJournalsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LedgerJournalWhereInput | null, orderBy?: prisma.LedgerJournalOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournal[]> | prisma.LedgerJournal[]
  }
  ledgerJournalsConnection: {
    type: 'LedgerJournalConnection'
    args: Record<QueryLedgerJournalsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LedgerJournalWhereInput | null, orderBy?: prisma.LedgerJournalOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournalConnection> | prisma.LedgerJournalConnection
  }
  ledgerTransaction: {
    type: 'LedgerTransaction'
    args: Record<QueryLedgerTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: LedgerTransactionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerTransaction | null> | prisma.LedgerTransaction | null
  }
  ledgerTransactions: {
    type: 'LedgerTransaction'
    args: Record<QueryLedgerTransactionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LedgerTransactionWhereInput | null, orderBy?: prisma.LedgerTransactionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerTransaction[]> | prisma.LedgerTransaction[]
  }
  ledgerTransactionsConnection: {
    type: 'LedgerTransactionConnection'
    args: Record<QueryLedgerTransactionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LedgerTransactionWhereInput | null, orderBy?: prisma.LedgerTransactionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerTransactionConnection> | prisma.LedgerTransactionConnection
  }
  ledgerPosting: {
    type: 'LedgerPosting'
    args: Record<QueryLedgerPostingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: LedgerPostingWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerPosting | null> | prisma.LedgerPosting | null
  }
  ledgerPostings: {
    type: 'LedgerPosting'
    args: Record<QueryLedgerPostingsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LedgerPostingWhereInput | null, orderBy?: prisma.LedgerPostingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerPosting[]> | prisma.LedgerPosting[]
  }
  ledgerPostingsConnection: {
    type: 'LedgerPostingConnection'
    args: Record<QueryLedgerPostingsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LedgerPostingWhereInput | null, orderBy?: prisma.LedgerPostingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerPostingConnection> | prisma.LedgerPostingConnection
  }
  bank: {
    type: 'Bank'
    args: Record<QueryBankArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: BankWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bank | null> | prisma.Bank | null
  }
  banks: {
    type: 'Bank'
    args: Record<QueryBanksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BankWhereInput | null, orderBy?: prisma.BankOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bank[]> | prisma.Bank[]
  }
  banksConnection: {
    type: 'BankConnection'
    args: Record<QueryBanksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BankWhereInput | null, orderBy?: prisma.BankOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankConnection> | prisma.BankConnection
  }
  bankTransaction: {
    type: 'BankTransaction'
    args: Record<QueryBankTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: BankTransactionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankTransaction | null> | prisma.BankTransaction | null
  }
  bankTransactions: {
    type: 'BankTransaction'
    args: Record<QueryBankTransactionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BankTransactionWhereInput | null, orderBy?: prisma.BankTransactionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankTransaction[]> | prisma.BankTransaction[]
  }
  bankTransactionsConnection: {
    type: 'BankTransactionConnection'
    args: Record<QueryBankTransactionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BankTransactionWhereInput | null, orderBy?: prisma.BankTransactionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankTransactionConnection> | prisma.BankTransactionConnection
  }
  wareHouse: {
    type: 'WareHouse'
    args: Record<QueryWareHouseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: WareHouseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouse | null> | prisma.WareHouse | null
  }
  wareHouses: {
    type: 'WareHouse'
    args: Record<QueryWareHousesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: WareHouseWhereInput | null, orderBy?: prisma.WareHouseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouse[]> | prisma.WareHouse[]
  }
  wareHousesConnection: {
    type: 'WareHouseConnection'
    args: Record<QueryWareHousesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: WareHouseWhereInput | null, orderBy?: prisma.WareHouseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouseConnection> | prisma.WareHouseConnection
  }
  inventory: {
    type: 'Inventory'
    args: Record<QueryInventoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: InventoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inventory | null> | prisma.Inventory | null
  }
  inventories: {
    type: 'Inventory'
    args: Record<QueryInventoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InventoryWhereInput | null, orderBy?: prisma.InventoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inventory[]> | prisma.Inventory[]
  }
  inventoriesConnection: {
    type: 'InventoryConnection'
    args: Record<QueryInventoriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InventoryWhereInput | null, orderBy?: prisma.InventoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryConnection> | prisma.InventoryConnection
  }
  supplier: {
    type: 'Supplier'
    args: Record<QuerySupplierArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SupplierWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Supplier | null> | prisma.Supplier | null
  }
  suppliers: {
    type: 'Supplier'
    args: Record<QuerySuppliersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SupplierWhereInput | null, orderBy?: prisma.SupplierOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Supplier[]> | prisma.Supplier[]
  }
  suppliersConnection: {
    type: 'SupplierConnection'
    args: Record<QuerySuppliersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SupplierWhereInput | null, orderBy?: prisma.SupplierOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SupplierConnection> | prisma.SupplierConnection
  }
  assetGroup: {
    type: 'AssetGroup'
    args: Record<QueryAssetGroupArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AssetGroupWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroup | null> | prisma.AssetGroup | null
  }
  assetGroups: {
    type: 'AssetGroup'
    args: Record<QueryAssetGroupsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AssetGroupWhereInput | null, orderBy?: prisma.AssetGroupOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroup[]> | prisma.AssetGroup[]
  }
  assetGroupsConnection: {
    type: 'AssetGroupConnection'
    args: Record<QueryAssetGroupsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AssetGroupWhereInput | null, orderBy?: prisma.AssetGroupOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroupConnection> | prisma.AssetGroupConnection
  }
  asset: {
    type: 'Asset'
    args: Record<QueryAssetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AssetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Asset | null> | prisma.Asset | null
  }
  assets: {
    type: 'Asset'
    args: Record<QueryAssetsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AssetWhereInput | null, orderBy?: prisma.AssetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Asset[]> | prisma.Asset[]
  }
  assetsConnection: {
    type: 'AssetConnection'
    args: Record<QueryAssetsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AssetWhereInput | null, orderBy?: prisma.AssetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetConnection> | prisma.AssetConnection
  }
  purchaseOrder: {
    type: 'PurchaseOrder'
    args: Record<QueryPurchaseOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PurchaseOrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrder | null> | prisma.PurchaseOrder | null
  }
  purchaseOrders: {
    type: 'PurchaseOrder'
    args: Record<QueryPurchaseOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PurchaseOrderWhereInput | null, orderBy?: prisma.PurchaseOrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrder[]> | prisma.PurchaseOrder[]
  }
  purchaseOrdersConnection: {
    type: 'PurchaseOrderConnection'
    args: Record<QueryPurchaseOrdersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PurchaseOrderWhereInput | null, orderBy?: prisma.PurchaseOrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderConnection> | prisma.PurchaseOrderConnection
  }
  poReceipt: {
    type: 'PoReceipt'
    args: Record<QueryPoReceiptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PoReceiptWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceipt | null> | prisma.PoReceipt | null
  }
  poReceipts: {
    type: 'PoReceipt'
    args: Record<QueryPoReceiptsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PoReceiptWhereInput | null, orderBy?: prisma.PoReceiptOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceipt[]> | prisma.PoReceipt[]
  }
  poReceiptsConnection: {
    type: 'PoReceiptConnection'
    args: Record<QueryPoReceiptsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PoReceiptWhereInput | null, orderBy?: prisma.PoReceiptOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceiptConnection> | prisma.PoReceiptConnection
  }
  inventoryOnHand: {
    type: 'InventoryOnHand'
    args: Record<QueryInventoryOnHandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: InventoryOnHandWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryOnHand | null> | prisma.InventoryOnHand | null
  }
  inventoryOnHands: {
    type: 'InventoryOnHand'
    args: Record<QueryInventoryOnHandsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InventoryOnHandWhereInput | null, orderBy?: prisma.InventoryOnHandOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryOnHand[]> | prisma.InventoryOnHand[]
  }
  inventoryOnHandsConnection: {
    type: 'InventoryOnHandConnection'
    args: Record<QueryInventoryOnHandsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: InventoryOnHandWhereInput | null, orderBy?: prisma.InventoryOnHandOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryOnHandConnection> | prisma.InventoryOnHandConnection
  }
  purchaseOrderLine: {
    type: 'PurchaseOrderLine'
    args: Record<QueryPurchaseOrderLineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PurchaseOrderLineWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderLine | null> | prisma.PurchaseOrderLine | null
  }
  purchaseOrderLines: {
    type: 'PurchaseOrderLine'
    args: Record<QueryPurchaseOrderLinesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PurchaseOrderLineWhereInput | null, orderBy?: prisma.PurchaseOrderLineOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderLine[]> | prisma.PurchaseOrderLine[]
  }
  purchaseOrderLinesConnection: {
    type: 'PurchaseOrderLineConnection'
    args: Record<QueryPurchaseOrderLinesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PurchaseOrderLineWhereInput | null, orderBy?: prisma.PurchaseOrderLineOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderLineConnection> | prisma.PurchaseOrderLineConnection
  }
  apInvoice: {
    type: 'ApInvoice'
    args: Record<QueryApInvoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ApInvoiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoice | null> | prisma.ApInvoice | null
  }
  apInvoices: {
    type: 'ApInvoice'
    args: Record<QueryApInvoicesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ApInvoiceWhereInput | null, orderBy?: prisma.ApInvoiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoice[]> | prisma.ApInvoice[]
  }
  apInvoicesConnection: {
    type: 'ApInvoiceConnection'
    args: Record<QueryApInvoicesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ApInvoiceWhereInput | null, orderBy?: prisma.ApInvoiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoiceConnection> | prisma.ApInvoiceConnection
  }
  salesOrder: {
    type: 'SalesOrder'
    args: Record<QuerySalesOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SalesOrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrder | null> | prisma.SalesOrder | null
  }
  salesOrders: {
    type: 'SalesOrder'
    args: Record<QuerySalesOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SalesOrderWhereInput | null, orderBy?: prisma.SalesOrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrder[]> | prisma.SalesOrder[]
  }
  salesOrdersConnection: {
    type: 'SalesOrderConnection'
    args: Record<QuerySalesOrdersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SalesOrderWhereInput | null, orderBy?: prisma.SalesOrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderConnection> | prisma.SalesOrderConnection
  }
  salesOrderLine: {
    type: 'SalesOrderLine'
    args: Record<QuerySalesOrderLineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SalesOrderLineWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderLine | null> | prisma.SalesOrderLine | null
  }
  salesOrderLines: {
    type: 'SalesOrderLine'
    args: Record<QuerySalesOrderLinesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SalesOrderLineWhereInput | null, orderBy?: prisma.SalesOrderLineOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderLine[]> | prisma.SalesOrderLine[]
  }
  salesOrderLinesConnection: {
    type: 'SalesOrderLineConnection'
    args: Record<QuerySalesOrderLinesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SalesOrderLineWhereInput | null, orderBy?: prisma.SalesOrderLineOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderLineConnection> | prisma.SalesOrderLineConnection
  }
  predictedSalesValueByCompany: {
    type: 'PredictedSalesValueByCompany'
    args: Record<QueryPredictedSalesValueByCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PredictedSalesValueByCompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesValueByCompany | null> | prisma.PredictedSalesValueByCompany | null
  }
  predictedSalesValueByCompanies: {
    type: 'PredictedSalesValueByCompany'
    args: Record<QueryPredictedSalesValueByCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PredictedSalesValueByCompanyWhereInput | null, orderBy?: prisma.PredictedSalesValueByCompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesValueByCompany[]> | prisma.PredictedSalesValueByCompany[]
  }
  predictedSalesValueByCompaniesConnection: {
    type: 'PredictedSalesValueByCompanyConnection'
    args: Record<QueryPredictedSalesValueByCompaniesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PredictedSalesValueByCompanyWhereInput | null, orderBy?: prisma.PredictedSalesValueByCompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesValueByCompanyConnection> | prisma.PredictedSalesValueByCompanyConnection
  }
  predictedSalesQuantityOfItemsByCompany: {
    type: 'PredictedSalesQuantityOfItemsByCompany'
    args: Record<QueryPredictedSalesQuantityOfItemsByCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PredictedSalesQuantityOfItemsByCompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesQuantityOfItemsByCompany | null> | prisma.PredictedSalesQuantityOfItemsByCompany | null
  }
  predictedSalesQuantityOfItemsByCompanies: {
    type: 'PredictedSalesQuantityOfItemsByCompany'
    args: Record<QueryPredictedSalesQuantityOfItemsByCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PredictedSalesQuantityOfItemsByCompanyWhereInput | null, orderBy?: prisma.PredictedSalesQuantityOfItemsByCompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesQuantityOfItemsByCompany[]> | prisma.PredictedSalesQuantityOfItemsByCompany[]
  }
  predictedSalesQuantityOfItemsByCompaniesConnection: {
    type: 'PredictedSalesQuantityOfItemsByCompanyConnection'
    args: Record<QueryPredictedSalesQuantityOfItemsByCompaniesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PredictedSalesQuantityOfItemsByCompanyWhereInput | null, orderBy?: prisma.PredictedSalesQuantityOfItemsByCompanyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesQuantityOfItemsByCompanyConnection> | prisma.PredictedSalesQuantityOfItemsByCompanyConnection
  }
  medicareService: {
    type: 'MedicareService'
    args: Record<QueryMedicareServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MedicareServiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MedicareService | null> | prisma.MedicareService | null
  }
  medicareServices: {
    type: 'MedicareService'
    args: Record<QueryMedicareServicesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MedicareServiceWhereInput | null, orderBy?: prisma.MedicareServiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MedicareService[]> | prisma.MedicareService[]
  }
  medicareServicesConnection: {
    type: 'MedicareServiceConnection'
    args: Record<QueryMedicareServicesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MedicareServiceWhereInput | null, orderBy?: prisma.MedicareServiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MedicareServiceConnection> | prisma.MedicareServiceConnection
  }
  patient: {
    type: 'Patient'
    args: Record<QueryPatientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PatientWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient | null> | prisma.Patient | null
  }
  patients: {
    type: 'Patient'
    args: Record<QueryPatientsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PatientWhereInput | null, orderBy?: prisma.PatientOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient[]> | prisma.Patient[]
  }
  patientsConnection: {
    type: 'PatientConnection'
    args: Record<QueryPatientsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PatientWhereInput | null, orderBy?: prisma.PatientOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PatientConnection> | prisma.PatientConnection
  }
  name: {
    type: 'Name'
    args: Record<QueryNameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: NameWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name | null> | prisma.Name | null
  }
  names: {
    type: 'Name'
    args: Record<QueryNamesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NameWhereInput | null, orderBy?: prisma.NameOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name[]> | prisma.Name[]
  }
  namesConnection: {
    type: 'NameConnection'
    args: Record<QueryNamesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NameWhereInput | null, orderBy?: prisma.NameOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NameConnection> | prisma.NameConnection
  }
  healthcareProvider: {
    type: 'HealthcareProvider'
    args: Record<QueryHealthcareProviderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: HealthcareProviderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HealthcareProvider | null> | prisma.HealthcareProvider | null
  }
  healthcareProviders: {
    type: 'HealthcareProvider'
    args: Record<QueryHealthcareProvidersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: HealthcareProviderWhereInput | null, orderBy?: prisma.HealthcareProviderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HealthcareProvider[]> | prisma.HealthcareProvider[]
  }
  healthcareProvidersConnection: {
    type: 'HealthcareProviderConnection'
    args: Record<QueryHealthcareProvidersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: HealthcareProviderWhereInput | null, orderBy?: prisma.HealthcareProviderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HealthcareProviderConnection> | prisma.HealthcareProviderConnection
  }
  immunisationSchedule: {
    type: 'ImmunisationSchedule'
    args: Record<QueryImmunisationScheduleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ImmunisationScheduleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImmunisationSchedule | null> | prisma.ImmunisationSchedule | null
  }
  immunisationSchedules: {
    type: 'ImmunisationSchedule'
    args: Record<QueryImmunisationSchedulesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ImmunisationScheduleWhereInput | null, orderBy?: prisma.ImmunisationScheduleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImmunisationSchedule[]> | prisma.ImmunisationSchedule[]
  }
  immunisationSchedulesConnection: {
    type: 'ImmunisationScheduleConnection'
    args: Record<QueryImmunisationSchedulesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ImmunisationScheduleWhereInput | null, orderBy?: prisma.ImmunisationScheduleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImmunisationScheduleConnection> | prisma.ImmunisationScheduleConnection
  }
  vaccineBrand: {
    type: 'VaccineBrand'
    args: Record<QueryVaccineBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: VaccineBrandWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrand | null> | prisma.VaccineBrand | null
  }
  vaccineBrands: {
    type: 'VaccineBrand'
    args: Record<QueryVaccineBrandsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VaccineBrandWhereInput | null, orderBy?: prisma.VaccineBrandOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrand[]> | prisma.VaccineBrand[]
  }
  vaccineBrandsConnection: {
    type: 'VaccineBrandConnection'
    args: Record<QueryVaccineBrandsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VaccineBrandWhereInput | null, orderBy?: prisma.VaccineBrandOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrandConnection> | prisma.VaccineBrandConnection
  }
  disease: {
    type: 'Disease'
    args: Record<QueryDiseaseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DiseaseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Disease | null> | prisma.Disease | null
  }
  diseases: {
    type: 'Disease'
    args: Record<QueryDiseasesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DiseaseWhereInput | null, orderBy?: prisma.DiseaseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Disease[]> | prisma.Disease[]
  }
  diseasesConnection: {
    type: 'DiseaseConnection'
    args: Record<QueryDiseasesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DiseaseWhereInput | null, orderBy?: prisma.DiseaseOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DiseaseConnection> | prisma.DiseaseConnection
  }
  hILog: {
    type: 'HILog'
    args: Record<QueryHILogArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: HILogWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HILog | null> | prisma.HILog | null
  }
  hILogs: {
    type: 'HILog'
    args: Record<QueryHILogsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: HILogWhereInput | null, orderBy?: prisma.HILogOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HILog[]> | prisma.HILog[]
  }
  hILogsConnection: {
    type: 'HILogConnection'
    args: Record<QueryHILogsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: HILogWhereInput | null, orderBy?: prisma.HILogOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HILogConnection> | prisma.HILogConnection
  }
  pbsOrganisation: {
    type: 'PbsOrganisation'
    args: Record<QueryPbsOrganisationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PbsOrganisationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisation | null> | prisma.PbsOrganisation | null
  }
  pbsOrganisations: {
    type: 'PbsOrganisation'
    args: Record<QueryPbsOrganisationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PbsOrganisationWhereInput | null, orderBy?: prisma.PbsOrganisationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisation[]> | prisma.PbsOrganisation[]
  }
  pbsOrganisationsConnection: {
    type: 'PbsOrganisationConnection'
    args: Record<QueryPbsOrganisationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PbsOrganisationWhereInput | null, orderBy?: prisma.PbsOrganisationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisationConnection> | prisma.PbsOrganisationConnection
  }
  pbsTPP: {
    type: 'PbsTPP'
    args: Record<QueryPbsTPPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PbsTPPWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsTPP | null> | prisma.PbsTPP | null
  }
  pbsTPPs: {
    type: 'PbsTPP'
    args: Record<QueryPbsTPPsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PbsTPPWhereInput | null, orderBy?: prisma.PbsTPPOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsTPP[]> | prisma.PbsTPP[]
  }
  pbsTPPsConnection: {
    type: 'PbsTPPConnection'
    args: Record<QueryPbsTPPsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PbsTPPWhereInput | null, orderBy?: prisma.PbsTPPOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsTPPConnection> | prisma.PbsTPPConnection
  }
  meansTestedFee: {
    type: 'MeansTestedFee'
    args: Record<QueryMeansTestedFeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MeansTestedFeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFee | null> | prisma.MeansTestedFee | null
  }
  meansTestedFees: {
    type: 'MeansTestedFee'
    args: Record<QueryMeansTestedFeesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MeansTestedFeeWhereInput | null, orderBy?: prisma.MeansTestedFeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFee[]> | prisma.MeansTestedFee[]
  }
  meansTestedFeesConnection: {
    type: 'MeansTestedFeeConnection'
    args: Record<QueryMeansTestedFeesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MeansTestedFeeWhereInput | null, orderBy?: prisma.MeansTestedFeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFeeConnection> | prisma.MeansTestedFeeConnection
  }
  meansTestLimits: {
    type: 'MeansTestLimits'
    args: Record<QueryMeansTestLimitsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MeansTestLimitsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestLimits | null> | prisma.MeansTestLimits | null
  }
  meansTestLimitses: {
    type: 'MeansTestLimits'
    args: Record<QueryMeansTestLimitsesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MeansTestLimitsWhereInput | null, orderBy?: prisma.MeansTestLimitsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestLimits[]> | prisma.MeansTestLimits[]
  }
  meansTestLimitsesConnection: {
    type: 'MeansTestLimitsConnection'
    args: Record<QueryMeansTestLimitsesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MeansTestLimitsWhereInput | null, orderBy?: prisma.MeansTestLimitsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestLimitsConnection> | prisma.MeansTestLimitsConnection
  }
  basicDailyFee: {
    type: 'BasicDailyFee'
    args: Record<QueryBasicDailyFeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: BasicDailyFeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFee | null> | prisma.BasicDailyFee | null
  }
  basicDailyFees: {
    type: 'BasicDailyFee'
    args: Record<QueryBasicDailyFeesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BasicDailyFeeWhereInput | null, orderBy?: prisma.BasicDailyFeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFee[]> | prisma.BasicDailyFee[]
  }
  basicDailyFeesConnection: {
    type: 'BasicDailyFeeConnection'
    args: Record<QueryBasicDailyFeesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BasicDailyFeeWhereInput | null, orderBy?: prisma.BasicDailyFeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFeeConnection> | prisma.BasicDailyFeeConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'contactNumber', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'isActive', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'isRoot', args?: [] | false, alias?: string  } 
  | { name: 'jobTitle', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'secondAuthEnabled', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'contactNumber'
  | 'email'
  | 'firstName'
  | 'isActive'
  | 'isArchived'
  | 'isDeleted'
  | 'isRoot'
  | 'jobTitle'
  | 'lastName'
  | 'password'
  | 'secondAuthEnabled'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  contactNumber: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isActive: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isRoot: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  jobTitle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  secondAuthEnabled: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Address

type AddressObject =
  | AddressFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'street', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'postCode', args?: [] | false, alias?: string  } 
  | { name: 'latitude', args?: [] | false, alias?: string  } 
  | { name: 'longitude', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type AddressFields =
  | 'id'
  | 'street'
  | 'city'
  | 'state'
  | 'country'
  | 'postCode'
  | 'latitude'
  | 'longitude'
  | 'createdAt'
  | 'updatedAt'



  

export interface AddressFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  street: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  state: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  postCode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  latitude: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  longitude: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AddressConnection

type AddressConnectionObject =
  | AddressConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AddressConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AddressConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AddressConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AddressEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AddressConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressEdge[]> | prisma.AddressEdge[]
  }
  aggregate: {
    type: 'AggregateAddress'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AddressConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAddress> | prisma.AggregateAddress
  }
}
  

// Types for AddressEdge

type AddressEdgeObject =
  | AddressEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AddressEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AddressEdgeFieldDetails {
  node: {
    type: 'Address'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AddressEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address> | prisma.Address
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAddress

type AggregateAddressObject =
  | AggregateAddressFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAddressFields =
  | 'count'



  

export interface AggregateAddressFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Contact

type ContactObject =
  | ContactFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'surname', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'mobileCode', args?: [] | false, alias?: string  } 
  | { name: 'mobileNumber', args?: [] | false, alias?: string  } 
  | { name: 'landlineCode', args?: [] | false, alias?: string  } 
  | { name: 'landlineNumber', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ContactFields =
  | 'id'
  | 'name'
  | 'surname'
  | 'email'
  | 'mobileCode'
  | 'mobileNumber'
  | 'landlineCode'
  | 'landlineNumber'
  | 'createdAt'
  | 'updatedAt'



  

export interface ContactFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  surname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  mobileCode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  mobileNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  landlineCode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  landlineNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ContactConnection

type ContactConnectionObject =
  | ContactConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ContactConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ContactConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ContactEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ContactConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactEdge[]> | prisma.ContactEdge[]
  }
  aggregate: {
    type: 'AggregateContact'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateContact> | prisma.AggregateContact
  }
}
  

// Types for ContactEdge

type ContactEdgeObject =
  | ContactEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ContactEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ContactEdgeFieldDetails {
  node: {
    type: 'Contact'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact> | prisma.Contact
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateContact

type AggregateContactObject =
  | AggregateContactFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateContactFields =
  | 'count'



  

export interface AggregateContactFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Company

type CompanyObject =
  | CompanyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'bankAccount', args?: [] | false, alias?: string  } 
  | { name: 'businessType', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'govNumber', args?: [] | false, alias?: string  } 
  | { name: 'currency', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'HPIO', args?: [] | false, alias?: string  } 
  | { name: 'legalName', args?: [] | false, alias?: string  } 
  | { name: 'logo', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'salesTax', args?: [] | false, alias?: string  } 
  | { name: 'timeSheetSettings', args?: [] | false, alias?: string  } 
  | { name: 'websiteURL', args?: [] | false, alias?: string  } 
  | { name: 'addresses', args?: CompanyAddressesArgs[] | false, alias?: string  } 
  | { name: 'contacts', args?: CompanyContactsArgs[] | false, alias?: string  } 
  | { name: 'companyMembers', args?: CompanyCompanyMembersArgs[] | false, alias?: string  } 
  | { name: 'activePlan', args?: [] | false, alias?: string  } 
  | { name: 'stripeCustomerId', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CompanyFields =
  | 'id'
  | 'bankAccount'
  | 'businessType'
  | 'country'
  | 'govNumber'
  | 'currency'
  | 'isArchived'
  | 'isDeleted'
  | 'HPIO'
  | 'legalName'
  | 'logo'
  | 'name'
  | 'salesTax'
  | 'timeSheetSettings'
  | 'websiteURL'
  | 'addresses'
  | 'contacts'
  | 'companyMembers'
  | 'activePlan'
  | 'stripeCustomerId'
  | 'createdAt'
  | 'updatedAt'


type CompanyAddressesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type CompanyContactsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type CompanyCompanyMembersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CompanyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  bankAccount: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  businessType: {
    type: 'BusinessType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Company">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BusinessType | null> | prisma.BusinessType | null
  }
  country: {
    type: 'Country'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Company">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country> | prisma.Country
  }
  govNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  currency: {
    type: 'Currency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Company">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Currency> | prisma.Currency
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  HPIO: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  legalName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  logo: {
    type: 'Attachment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Company">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment | null> | prisma.Attachment | null
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  salesTax: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  timeSheetSettings: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  websiteURL: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  addresses: {
    type: 'Address'
    args: Record<CompanyAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Company">,
      args: { where?: AddressWhereInput | null, orderBy?: prisma.AddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address[]> | prisma.Address[]
  }
  contacts: {
    type: 'Contact'
    args: Record<CompanyContactsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Company">,
      args: { where?: ContactWhereInput | null, orderBy?: prisma.ContactOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact[]> | prisma.Contact[]
  }
  companyMembers: {
    type: 'CompanyMember'
    args: Record<CompanyCompanyMembersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Company">,
      args: { where?: CompanyMemberWhereInput | null, orderBy?: prisma.CompanyMemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMember[]> | prisma.CompanyMember[]
  }
  activePlan: {
    type: 'Plan'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Company">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Plan | null> | prisma.Plan | null
  }
  stripeCustomerId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Attachment

type AttachmentObject =
  | AttachmentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'fileName', args?: [] | false, alias?: string  } 
  | { name: 'label', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 's3Bucket', args?: [] | false, alias?: string  } 
  | { name: 's3Key', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type AttachmentFields =
  | 'id'
  | 'description'
  | 'fileName'
  | 'label'
  | 'url'
  | 's3Bucket'
  | 's3Key'
  | 'createdAt'
  | 'updatedAt'



  

export interface AttachmentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  fileName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  label: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  s3Bucket: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  s3Key: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CompanyMember

type CompanyMemberObject =
  | CompanyMemberFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CompanyMemberFields =
  | 'id'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'role'
  | 'status'
  | 'user'
  | 'createdAt'
  | 'updatedAt'



  

export interface CompanyMemberFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyMember">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  role: {
    type: 'CompanyMemberRole'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanyMember">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMemberRole | null> | prisma.CompanyMemberRole | null
  }
  status: {
    type: 'CompanyMemberStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanyMember">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMemberStatus | null> | prisma.CompanyMemberStatus | null
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanyMember">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Plan

type PlanObject =
  | PlanFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isActive', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'currency', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PlanFields =
  | 'id'
  | 'company'
  | 'isActive'
  | 'isArchived'
  | 'isDeleted'
  | 'price'
  | 'type'
  | 'currency'
  | 'createdAt'
  | 'updatedAt'



  

export interface PlanFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Plan">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isActive: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'PlanType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Plan">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlanType | null> | prisma.PlanType | null
  }
  currency: {
    type: 'Currency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Plan">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Currency> | prisma.Currency
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CompanyConnection

type CompanyConnectionObject =
  | CompanyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CompanyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CompanyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CompanyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyEdge[]> | prisma.CompanyEdge[]
  }
  aggregate: {
    type: 'AggregateCompany'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCompany> | prisma.AggregateCompany
  }
}
  

// Types for CompanyEdge

type CompanyEdgeObject =
  | CompanyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CompanyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CompanyEdgeFieldDetails {
  node: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCompany

type AggregateCompanyObject =
  | AggregateCompanyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCompanyFields =
  | 'count'



  

export interface AggregateCompanyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CompanyMemberConnection

type CompanyMemberConnectionObject =
  | CompanyMemberConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CompanyMemberConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CompanyMemberConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyMemberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CompanyMemberEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyMemberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMemberEdge[]> | prisma.CompanyMemberEdge[]
  }
  aggregate: {
    type: 'AggregateCompanyMember'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyMemberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCompanyMember> | prisma.AggregateCompanyMember
  }
}
  

// Types for CompanyMemberEdge

type CompanyMemberEdgeObject =
  | CompanyMemberEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CompanyMemberEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CompanyMemberEdgeFieldDetails {
  node: {
    type: 'CompanyMember'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyMemberEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMember> | prisma.CompanyMember
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCompanyMember

type AggregateCompanyMemberObject =
  | AggregateCompanyMemberFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCompanyMemberFields =
  | 'count'



  

export interface AggregateCompanyMemberFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Customer

type CustomerObject =
  | CustomerFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'govNumber', args?: [] | false, alias?: string  } 
  | { name: 'salesTax', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'billingFrequency', args?: [] | false, alias?: string  } 
  | { name: 'meansTestedFee', args?: [] | false, alias?: string  } 
  | { name: 'basicDailyFee', args?: [] | false, alias?: string  } 
  | { name: 'contacts', args?: CustomerContactsArgs[] | false, alias?: string  } 
  | { name: 'addresses', args?: CustomerAddressesArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CustomerFields =
  | 'id'
  | 'company'
  | 'description'
  | 'govNumber'
  | 'salesTax'
  | 'isArchived'
  | 'isDeleted'
  | 'name'
  | 'billingFrequency'
  | 'meansTestedFee'
  | 'basicDailyFee'
  | 'contacts'
  | 'addresses'
  | 'createdAt'
  | 'updatedAt'


type CustomerContactsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type CustomerAddressesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CustomerFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Customer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  govNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  salesTax: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  billingFrequency: {
    type: 'SupplierTermsOfPayment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Customer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SupplierTermsOfPayment | null> | prisma.SupplierTermsOfPayment | null
  }
  meansTestedFee: {
    type: 'MeansTestedFee'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Customer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFee | null> | prisma.MeansTestedFee | null
  }
  basicDailyFee: {
    type: 'BasicDailyFee'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Customer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFee | null> | prisma.BasicDailyFee | null
  }
  contacts: {
    type: 'Contact'
    args: Record<CustomerContactsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Customer">,
      args: { where?: ContactWhereInput | null, orderBy?: prisma.ContactOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact[]> | prisma.Contact[]
  }
  addresses: {
    type: 'Address'
    args: Record<CustomerAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Customer">,
      args: { where?: AddressWhereInput | null, orderBy?: prisma.AddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address[]> | prisma.Address[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MeansTestedFee

type MeansTestedFeeObject =
  | MeansTestedFeeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'currency', args?: [] | false, alias?: string  } 
  | { name: 'dateFrom', args?: [] | false, alias?: string  } 
  | { name: 'dateTo', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 

type MeansTestedFeeFields =
  | 'id'
  | 'amount'
  | 'currency'
  | 'dateFrom'
  | 'dateTo'
  | 'company'



  

export interface MeansTestedFeeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  amount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  currency: {
    type: 'Currency'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MeansTestedFee">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Currency | null> | prisma.Currency | null
  }
  dateFrom: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateTo: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MeansTestedFee">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
}
  

// Types for BasicDailyFee

type BasicDailyFeeObject =
  | BasicDailyFeeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'level', args?: [] | false, alias?: string  } 
  | { name: 'rate', args?: [] | false, alias?: string  } 
  | { name: 'dateFrom', args?: [] | false, alias?: string  } 
  | { name: 'dateTo', args?: [] | false, alias?: string  } 
  | { name: 'rechargeable', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 

type BasicDailyFeeFields =
  | 'id'
  | 'level'
  | 'rate'
  | 'dateFrom'
  | 'dateTo'
  | 'rechargeable'
  | 'company'



  

export interface BasicDailyFeeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  level: {
    type: 'LevelOfCare'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BasicDailyFee">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LevelOfCare | null> | prisma.LevelOfCare | null
  }
  rate: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateFrom: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateTo: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  rechargeable: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BasicDailyFee">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
}
  

// Types for CustomerConnection

type CustomerConnectionObject =
  | CustomerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CustomerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CustomerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CustomerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CustomerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CustomerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CustomerEdge[]> | prisma.CustomerEdge[]
  }
  aggregate: {
    type: 'AggregateCustomer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CustomerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCustomer> | prisma.AggregateCustomer
  }
}
  

// Types for CustomerEdge

type CustomerEdgeObject =
  | CustomerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CustomerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CustomerEdgeFieldDetails {
  node: {
    type: 'Customer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CustomerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer> | prisma.Customer
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCustomer

type AggregateCustomerObject =
  | AggregateCustomerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCustomerFields =
  | 'count'



  

export interface AggregateCustomerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Integration

type IntegrationObject =
  | IntegrationFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'data', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type IntegrationFields =
  | 'id'
  | 'company'
  | 'data'
  | 'type'
  | 'createdAt'
  | 'updatedAt'



  

export interface IntegrationFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Integration">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  data: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'IntegrationType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Integration">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IntegrationType | null> | prisma.IntegrationType | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for IntegrationConnection

type IntegrationConnectionObject =
  | IntegrationConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type IntegrationConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface IntegrationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"IntegrationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'IntegrationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"IntegrationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IntegrationEdge[]> | prisma.IntegrationEdge[]
  }
  aggregate: {
    type: 'AggregateIntegration'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"IntegrationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateIntegration> | prisma.AggregateIntegration
  }
}
  

// Types for IntegrationEdge

type IntegrationEdgeObject =
  | IntegrationEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type IntegrationEdgeFields =
  | 'node'
  | 'cursor'



  

export interface IntegrationEdgeFieldDetails {
  node: {
    type: 'Integration'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"IntegrationEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Integration> | prisma.Integration
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateIntegration

type AggregateIntegrationObject =
  | AggregateIntegrationFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateIntegrationFields =
  | 'count'



  

export interface AggregateIntegrationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Service

type ServiceObject =
  | ServiceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'billingType', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'includeConsTax', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'isTemplate', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'timeBasedType', args?: [] | false, alias?: string  } 
  | { name: 'totalAmount', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ServiceFields =
  | 'id'
  | 'billingType'
  | 'company'
  | 'includeConsTax'
  | 'isArchived'
  | 'isDeleted'
  | 'isTemplate'
  | 'name'
  | 'timeBasedType'
  | 'totalAmount'
  | 'createdAt'
  | 'updatedAt'



  

export interface ServiceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  billingType: {
    type: 'ServiceBillingType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Service">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ServiceBillingType> | prisma.ServiceBillingType
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Service">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  includeConsTax: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isTemplate: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  timeBasedType: {
    type: 'TimeBasedType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Service">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeBasedType | null> | prisma.TimeBasedType | null
  }
  totalAmount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ServiceConnection

type ServiceConnectionObject =
  | ServiceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ServiceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ServiceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ServiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ServiceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ServiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ServiceEdge[]> | prisma.ServiceEdge[]
  }
  aggregate: {
    type: 'AggregateService'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ServiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateService> | prisma.AggregateService
  }
}
  

// Types for ServiceEdge

type ServiceEdgeObject =
  | ServiceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ServiceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ServiceEdgeFieldDetails {
  node: {
    type: 'Service'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ServiceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service> | prisma.Service
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateService

type AggregateServiceObject =
  | AggregateServiceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateServiceFields =
  | 'count'



  

export interface AggregateServiceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Project

type ProjectObject =
  | ProjectFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'customer', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'endsAt', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'projectService', args?: ProjectProjectServiceArgs[] | false, alias?: string  } 
  | { name: 'startsAt', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProjectFields =
  | 'id'
  | 'company'
  | 'customer'
  | 'description'
  | 'endsAt'
  | 'isArchived'
  | 'isDeleted'
  | 'name'
  | 'projectService'
  | 'startsAt'
  | 'status'
  | 'createdAt'
  | 'updatedAt'


type ProjectProjectServiceArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProjectFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  customer: {
    type: 'Customer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Project">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer | null> | prisma.Customer | null
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endsAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  projectService: {
    type: 'ProjectService'
    args: Record<ProjectProjectServiceArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Project">,
      args: { where?: ProjectServiceWhereInput | null, orderBy?: prisma.ProjectServiceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectService[]> | prisma.ProjectService[]
  }
  startsAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  status: {
    type: 'ProjectStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Project">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectStatus | null> | prisma.ProjectStatus | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectService

type ProjectServiceObject =
  | ProjectServiceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'project', args?: [] | false, alias?: string  } 
  | { name: 'rules', args?: ProjectServiceRulesArgs[] | false, alias?: string  } 
  | { name: 'service', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProjectServiceFields =
  | 'id'
  | 'amount'
  | 'isArchived'
  | 'isDeleted'
  | 'project'
  | 'rules'
  | 'service'
  | 'createdAt'
  | 'updatedAt'


type ProjectServiceRulesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ProjectServiceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  amount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  project: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectService">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  rules: {
    type: 'ProjectServiceRule'
    args: Record<ProjectServiceRulesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectService">,
      args: { where?: ProjectServiceRuleWhereInput | null, orderBy?: prisma.ProjectServiceRuleOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRule[]> | prisma.ProjectServiceRule[]
  }
  service: {
    type: 'Service'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectService">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service | null> | prisma.Service | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectServiceRule

type ProjectServiceRuleObject =
  | ProjectServiceRuleFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'projectService', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'percent', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'isPercent', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProjectServiceRuleFields =
  | 'id'
  | 'projectService'
  | 'amount'
  | 'percent'
  | 'type'
  | 'isPercent'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProjectServiceRuleFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  projectService: {
    type: 'ProjectService'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectServiceRule">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectService | null> | prisma.ProjectService | null
  }
  amount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  percent: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'ProjectServiceRuleType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectServiceRule">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRuleType | null> | prisma.ProjectServiceRuleType | null
  }
  isPercent: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectConnection

type ProjectConnectionObject =
  | ProjectConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectEdge[]> | prisma.ProjectEdge[]
  }
  aggregate: {
    type: 'AggregateProject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProject> | prisma.AggregateProject
  }
}
  

// Types for ProjectEdge

type ProjectEdgeObject =
  | ProjectEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectEdgeFieldDetails {
  node: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProject

type AggregateProjectObject =
  | AggregateProjectFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectFields =
  | 'count'



  

export interface AggregateProjectFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectServiceConnection

type ProjectServiceConnectionObject =
  | ProjectServiceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectServiceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectServiceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectServiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectServiceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectServiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceEdge[]> | prisma.ProjectServiceEdge[]
  }
  aggregate: {
    type: 'AggregateProjectService'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectServiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectService> | prisma.AggregateProjectService
  }
}
  

// Types for ProjectServiceEdge

type ProjectServiceEdgeObject =
  | ProjectServiceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectServiceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectServiceEdgeFieldDetails {
  node: {
    type: 'ProjectService'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectServiceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectService> | prisma.ProjectService
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectService

type AggregateProjectServiceObject =
  | AggregateProjectServiceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectServiceFields =
  | 'count'



  

export interface AggregateProjectServiceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectServiceRuleConnection

type ProjectServiceRuleConnectionObject =
  | ProjectServiceRuleConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ProjectServiceRuleConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ProjectServiceRuleConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectServiceRuleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ProjectServiceRuleEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectServiceRuleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRuleEdge[]> | prisma.ProjectServiceRuleEdge[]
  }
  aggregate: {
    type: 'AggregateProjectServiceRule'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectServiceRuleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateProjectServiceRule> | prisma.AggregateProjectServiceRule
  }
}
  

// Types for ProjectServiceRuleEdge

type ProjectServiceRuleEdgeObject =
  | ProjectServiceRuleEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ProjectServiceRuleEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ProjectServiceRuleEdgeFieldDetails {
  node: {
    type: 'ProjectServiceRule'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectServiceRuleEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRule> | prisma.ProjectServiceRule
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateProjectServiceRule

type AggregateProjectServiceRuleObject =
  | AggregateProjectServiceRuleFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateProjectServiceRuleFields =
  | 'count'



  

export interface AggregateProjectServiceRuleFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PlanConnection

type PlanConnectionObject =
  | PlanConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PlanConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PlanConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlanConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PlanEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PlanConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlanEdge[]> | prisma.PlanEdge[]
  }
  aggregate: {
    type: 'AggregatePlan'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlanConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePlan> | prisma.AggregatePlan
  }
}
  

// Types for PlanEdge

type PlanEdgeObject =
  | PlanEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PlanEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PlanEdgeFieldDetails {
  node: {
    type: 'Plan'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlanEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Plan> | prisma.Plan
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePlan

type AggregatePlanObject =
  | AggregatePlanFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePlanFields =
  | 'count'



  

export interface AggregatePlanFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Session

type SessionObject =
  | SessionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'expires_at', args?: [] | false, alias?: string  } 
  | { name: 'is_active', args?: [] | false, alias?: string  } 
  | { name: 'is_archived', args?: [] | false, alias?: string  } 
  | { name: 'is_deleted', args?: [] | false, alias?: string  } 
  | { name: 'signed_at', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type SessionFields =
  | 'id'
  | 'expires_at'
  | 'is_active'
  | 'is_archived'
  | 'is_deleted'
  | 'signed_at'
  | 'user'
  | 'createdAt'
  | 'updatedAt'



  

export interface SessionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expires_at: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  is_active: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  is_archived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  is_deleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  signed_at: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Session">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SessionConnection

type SessionConnectionObject =
  | SessionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SessionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SessionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SessionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SessionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SessionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SessionEdge[]> | prisma.SessionEdge[]
  }
  aggregate: {
    type: 'AggregateSession'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SessionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSession> | prisma.AggregateSession
  }
}
  

// Types for SessionEdge

type SessionEdgeObject =
  | SessionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SessionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SessionEdgeFieldDetails {
  node: {
    type: 'Session'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SessionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Session> | prisma.Session
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSession

type AggregateSessionObject =
  | AggregateSessionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSessionFields =
  | 'count'



  

export interface AggregateSessionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TimeSheet

type TimeSheetObject =
  | TimeSheetFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'attachments', args?: TimeSheetAttachmentsArgs[] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'endsAt', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'preview', args?: [] | false, alias?: string  } 
  | { name: 'startsAt', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'timeSheetEntries', args?: TimeSheetTimeSheetEntriesArgs[] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TimeSheetFields =
  | 'id'
  | 'attachments'
  | 'company'
  | 'endsAt'
  | 'isArchived'
  | 'isDeleted'
  | 'number'
  | 'preview'
  | 'startsAt'
  | 'status'
  | 'timeSheetEntries'
  | 'user'
  | 'createdAt'
  | 'updatedAt'


type TimeSheetAttachmentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type TimeSheetTimeSheetEntriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TimeSheetFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  attachments: {
    type: 'Attachment'
    args: Record<TimeSheetAttachmentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheet">,
      args: { where?: AttachmentWhereInput | null, orderBy?: prisma.AttachmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment[]> | prisma.Attachment[]
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheet">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  endsAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  preview: {
    type: 'Attachment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimeSheet">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment | null> | prisma.Attachment | null
  }
  startsAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  status: {
    type: 'TimeSheetStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimeSheet">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetStatus | null> | prisma.TimeSheetStatus | null
  }
  timeSheetEntries: {
    type: 'TimeSheetEntry'
    args: Record<TimeSheetTimeSheetEntriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheet">,
      args: { where?: TimeSheetEntryWhereInput | null, orderBy?: prisma.TimeSheetEntryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntry[]> | prisma.TimeSheetEntry[]
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimeSheet">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TimeSheetEntry

type TimeSheetEntryObject =
  | TimeSheetEntryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'customer', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'duration', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'isInvoiced', args?: [] | false, alias?: string  } 
  | { name: 'project', args?: [] | false, alias?: string  } 
  | { name: 'service', args?: [] | false, alias?: string  } 
  | { name: 'timeSheet', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TimeSheetEntryFields =
  | 'id'
  | 'customer'
  | 'date'
  | 'duration'
  | 'isArchived'
  | 'isDeleted'
  | 'isInvoiced'
  | 'project'
  | 'service'
  | 'timeSheet'
  | 'createdAt'
  | 'updatedAt'



  

export interface TimeSheetEntryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  customer: {
    type: 'Customer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimeSheetEntry">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer | null> | prisma.Customer | null
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  duration: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isInvoiced: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  project: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimeSheetEntry">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  service: {
    type: 'Service'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimeSheetEntry">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service | null> | prisma.Service | null
  }
  timeSheet: {
    type: 'TimeSheet'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimeSheetEntry">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheet | null> | prisma.TimeSheet | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TimeSheetConnection

type TimeSheetConnectionObject =
  | TimeSheetConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TimeSheetConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TimeSheetConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TimeSheetEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEdge[]> | prisma.TimeSheetEdge[]
  }
  aggregate: {
    type: 'AggregateTimeSheet'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTimeSheet> | prisma.AggregateTimeSheet
  }
}
  

// Types for TimeSheetEdge

type TimeSheetEdgeObject =
  | TimeSheetEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TimeSheetEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TimeSheetEdgeFieldDetails {
  node: {
    type: 'TimeSheet'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheetEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheet> | prisma.TimeSheet
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTimeSheet

type AggregateTimeSheetObject =
  | AggregateTimeSheetFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTimeSheetFields =
  | 'count'



  

export interface AggregateTimeSheetFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AttachmentConnection

type AttachmentConnectionObject =
  | AttachmentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AttachmentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AttachmentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttachmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AttachmentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AttachmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttachmentEdge[]> | prisma.AttachmentEdge[]
  }
  aggregate: {
    type: 'AggregateAttachment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttachmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAttachment> | prisma.AggregateAttachment
  }
}
  

// Types for AttachmentEdge

type AttachmentEdgeObject =
  | AttachmentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AttachmentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AttachmentEdgeFieldDetails {
  node: {
    type: 'Attachment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttachmentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment> | prisma.Attachment
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAttachment

type AggregateAttachmentObject =
  | AggregateAttachmentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAttachmentFields =
  | 'count'



  

export interface AggregateAttachmentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TimeSheetEntryConnection

type TimeSheetEntryConnectionObject =
  | TimeSheetEntryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TimeSheetEntryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TimeSheetEntryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheetEntryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TimeSheetEntryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheetEntryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntryEdge[]> | prisma.TimeSheetEntryEdge[]
  }
  aggregate: {
    type: 'AggregateTimeSheetEntry'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheetEntryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTimeSheetEntry> | prisma.AggregateTimeSheetEntry
  }
}
  

// Types for TimeSheetEntryEdge

type TimeSheetEntryEdgeObject =
  | TimeSheetEntryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TimeSheetEntryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TimeSheetEntryEdgeFieldDetails {
  node: {
    type: 'TimeSheetEntry'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheetEntryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntry> | prisma.TimeSheetEntry
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTimeSheetEntry

type AggregateTimeSheetEntryObject =
  | AggregateTimeSheetEntryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTimeSheetEntryFields =
  | 'count'



  

export interface AggregateTimeSheetEntryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InvoiceItemEntry

type InvoiceItemEntryObject =
  | InvoiceItemEntryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'order', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'quantity', args?: [] | false, alias?: string  } 
  | { name: 'tax', args?: [] | false, alias?: string  } 
  | { name: 'invoice', args?: [] | false, alias?: string  } 
  | { name: 'project', args?: [] | false, alias?: string  } 
  | { name: 'service', args?: [] | false, alias?: string  } 
  | { name: 'timeSheetEntry', args?: [] | false, alias?: string  } 
  | { name: 'timeSheet', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type InvoiceItemEntryFields =
  | 'id'
  | 'order'
  | 'description'
  | 'name'
  | 'price'
  | 'quantity'
  | 'tax'
  | 'invoice'
  | 'project'
  | 'service'
  | 'timeSheetEntry'
  | 'timeSheet'
  | 'createdAt'
  | 'updatedAt'



  

export interface InvoiceItemEntryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  order: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  quantity: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  tax: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  invoice: {
    type: 'Invoice'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InvoiceItemEntry">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Invoice | null> | prisma.Invoice | null
  }
  project: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InvoiceItemEntry">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  service: {
    type: 'Service'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InvoiceItemEntry">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service | null> | prisma.Service | null
  }
  timeSheetEntry: {
    type: 'TimeSheetEntry'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InvoiceItemEntry">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntry | null> | prisma.TimeSheetEntry | null
  }
  timeSheet: {
    type: 'TimeSheet'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InvoiceItemEntry">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheet | null> | prisma.TimeSheet | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Invoice

type InvoiceObject =
  | InvoiceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'attachments', args?: InvoiceAttachmentsArgs[] | false, alias?: string  } 
  | { name: 'buyer', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'invoiceDate', args?: [] | false, alias?: string  } 
  | { name: 'dueDate', args?: [] | false, alias?: string  } 
  | { name: 'preview', args?: [] | false, alias?: string  } 
  | { name: 'items', args?: InvoiceItemsArgs[] | false, alias?: string  } 
  | { name: 'seller', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'total', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type InvoiceFields =
  | 'id'
  | 'title'
  | 'attachments'
  | 'buyer'
  | 'number'
  | 'description'
  | 'invoiceDate'
  | 'dueDate'
  | 'preview'
  | 'items'
  | 'seller'
  | 'status'
  | 'type'
  | 'total'
  | 'createdAt'
  | 'updatedAt'


type InvoiceAttachmentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type InvoiceItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface InvoiceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  attachments: {
    type: 'Attachment'
    args: Record<InvoiceAttachmentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Invoice">,
      args: { where?: AttachmentWhereInput | null, orderBy?: prisma.AttachmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment[]> | prisma.Attachment[]
  }
  buyer: {
    type: 'Customer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Invoice">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer | null> | prisma.Customer | null
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  invoiceDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dueDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  preview: {
    type: 'Attachment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Invoice">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment | null> | prisma.Attachment | null
  }
  items: {
    type: 'InvoiceItemEntry'
    args: Record<InvoiceItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Invoice">,
      args: { where?: InvoiceItemEntryWhereInput | null, orderBy?: prisma.InvoiceItemEntryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntry[]> | prisma.InvoiceItemEntry[]
  }
  seller: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Invoice">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  status: {
    type: 'InvoiceStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Invoice">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceStatus | null> | prisma.InvoiceStatus | null
  }
  type: {
    type: 'InvoiceType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Invoice">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceType | null> | prisma.InvoiceType | null
  }
  total: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InvoiceItemEntryConnection

type InvoiceItemEntryConnectionObject =
  | InvoiceItemEntryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type InvoiceItemEntryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface InvoiceItemEntryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InvoiceItemEntryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'InvoiceItemEntryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"InvoiceItemEntryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntryEdge[]> | prisma.InvoiceItemEntryEdge[]
  }
  aggregate: {
    type: 'AggregateInvoiceItemEntry'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InvoiceItemEntryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateInvoiceItemEntry> | prisma.AggregateInvoiceItemEntry
  }
}
  

// Types for InvoiceItemEntryEdge

type InvoiceItemEntryEdgeObject =
  | InvoiceItemEntryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type InvoiceItemEntryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface InvoiceItemEntryEdgeFieldDetails {
  node: {
    type: 'InvoiceItemEntry'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InvoiceItemEntryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntry> | prisma.InvoiceItemEntry
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateInvoiceItemEntry

type AggregateInvoiceItemEntryObject =
  | AggregateInvoiceItemEntryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateInvoiceItemEntryFields =
  | 'count'



  

export interface AggregateInvoiceItemEntryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InvoiceConnection

type InvoiceConnectionObject =
  | InvoiceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type InvoiceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface InvoiceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InvoiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'InvoiceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"InvoiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceEdge[]> | prisma.InvoiceEdge[]
  }
  aggregate: {
    type: 'AggregateInvoice'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InvoiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateInvoice> | prisma.AggregateInvoice
  }
}
  

// Types for InvoiceEdge

type InvoiceEdgeObject =
  | InvoiceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type InvoiceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface InvoiceEdgeFieldDetails {
  node: {
    type: 'Invoice'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InvoiceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Invoice> | prisma.Invoice
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateInvoice

type AggregateInvoiceObject =
  | AggregateInvoiceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateInvoiceFields =
  | 'count'



  

export interface AggregateInvoiceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MainAccount

type MainAccountObject =
  | MainAccountFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'ConsTaxFree', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type MainAccountFields =
  | 'id'
  | 'code'
  | 'name'
  | 'description'
  | 'type'
  | 'ConsTaxFree'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface MainAccountFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'MainAccountType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainAccount">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccountType> | prisma.MainAccountType
  }
  ConsTaxFree: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainAccount">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MainAccountConnection

type MainAccountConnectionObject =
  | MainAccountConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MainAccountConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MainAccountConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainAccountConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MainAccountEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MainAccountConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccountEdge[]> | prisma.MainAccountEdge[]
  }
  aggregate: {
    type: 'AggregateMainAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainAccountConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMainAccount> | prisma.AggregateMainAccount
  }
}
  

// Types for MainAccountEdge

type MainAccountEdgeObject =
  | MainAccountEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MainAccountEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MainAccountEdgeFieldDetails {
  node: {
    type: 'MainAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainAccountEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccount> | prisma.MainAccount
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMainAccount

type AggregateMainAccountObject =
  | AggregateMainAccountFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMainAccountFields =
  | 'count'



  

export interface AggregateMainAccountFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LedgerJournal

type LedgerJournalObject =
  | LedgerJournalFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'total', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'currency', args?: [] | false, alias?: string  } 
  | { name: 'includeConsTax', args?: [] | false, alias?: string  } 
  | { name: 'posted', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type LedgerJournalFields =
  | 'id'
  | 'total'
  | 'description'
  | 'currency'
  | 'includeConsTax'
  | 'posted'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface LedgerJournalFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  total: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  currency: {
    type: 'Currency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerJournal">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Currency> | prisma.Currency
  }
  includeConsTax: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  posted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerJournal">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LedgerJournalConnection

type LedgerJournalConnectionObject =
  | LedgerJournalConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type LedgerJournalConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface LedgerJournalConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerJournalConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'LedgerJournalEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerJournalConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournalEdge[]> | prisma.LedgerJournalEdge[]
  }
  aggregate: {
    type: 'AggregateLedgerJournal'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerJournalConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateLedgerJournal> | prisma.AggregateLedgerJournal
  }
}
  

// Types for LedgerJournalEdge

type LedgerJournalEdgeObject =
  | LedgerJournalEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type LedgerJournalEdgeFields =
  | 'node'
  | 'cursor'



  

export interface LedgerJournalEdgeFieldDetails {
  node: {
    type: 'LedgerJournal'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerJournalEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournal> | prisma.LedgerJournal
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateLedgerJournal

type AggregateLedgerJournalObject =
  | AggregateLedgerJournalFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateLedgerJournalFields =
  | 'count'



  

export interface AggregateLedgerJournalFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LedgerTransaction

type LedgerTransactionObject =
  | LedgerTransactionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'mainAccount', args?: [] | false, alias?: string  } 
  | { name: 'ledgerJournal', args?: [] | false, alias?: string  } 
  | { name: 'drcr', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'currency', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type LedgerTransactionFields =
  | 'id'
  | 'mainAccount'
  | 'ledgerJournal'
  | 'drcr'
  | 'amount'
  | 'currency'
  | 'date'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface LedgerTransactionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  mainAccount: {
    type: 'MainAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerTransaction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccount> | prisma.MainAccount
  }
  ledgerJournal: {
    type: 'LedgerJournal'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerTransaction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournal> | prisma.LedgerJournal
  }
  drcr: {
    type: 'DrCr'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerTransaction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DrCr> | prisma.DrCr
  }
  amount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  currency: {
    type: 'Currency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerTransaction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Currency> | prisma.Currency
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerTransaction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LedgerTransactionConnection

type LedgerTransactionConnectionObject =
  | LedgerTransactionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type LedgerTransactionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface LedgerTransactionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerTransactionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'LedgerTransactionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerTransactionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerTransactionEdge[]> | prisma.LedgerTransactionEdge[]
  }
  aggregate: {
    type: 'AggregateLedgerTransaction'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerTransactionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateLedgerTransaction> | prisma.AggregateLedgerTransaction
  }
}
  

// Types for LedgerTransactionEdge

type LedgerTransactionEdgeObject =
  | LedgerTransactionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type LedgerTransactionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface LedgerTransactionEdgeFieldDetails {
  node: {
    type: 'LedgerTransaction'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerTransactionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerTransaction> | prisma.LedgerTransaction
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateLedgerTransaction

type AggregateLedgerTransactionObject =
  | AggregateLedgerTransactionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateLedgerTransactionFields =
  | 'count'



  

export interface AggregateLedgerTransactionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LedgerPosting

type LedgerPostingObject =
  | LedgerPostingFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'postingType', args?: [] | false, alias?: string  } 
  | { name: 'mainAccount', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type LedgerPostingFields =
  | 'id'
  | 'postingType'
  | 'mainAccount'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface LedgerPostingFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  postingType: {
    type: 'PostingType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LedgerPosting">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostingType | null> | prisma.PostingType | null
  }
  mainAccount: {
    type: 'MainAccount'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LedgerPosting">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccount | null> | prisma.MainAccount | null
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerPosting">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LedgerPostingConnection

type LedgerPostingConnectionObject =
  | LedgerPostingConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type LedgerPostingConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface LedgerPostingConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerPostingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'LedgerPostingEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerPostingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerPostingEdge[]> | prisma.LedgerPostingEdge[]
  }
  aggregate: {
    type: 'AggregateLedgerPosting'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerPostingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateLedgerPosting> | prisma.AggregateLedgerPosting
  }
}
  

// Types for LedgerPostingEdge

type LedgerPostingEdgeObject =
  | LedgerPostingEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type LedgerPostingEdgeFields =
  | 'node'
  | 'cursor'



  

export interface LedgerPostingEdgeFieldDetails {
  node: {
    type: 'LedgerPosting'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerPostingEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerPosting> | prisma.LedgerPosting
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateLedgerPosting

type AggregateLedgerPostingObject =
  | AggregateLedgerPostingFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateLedgerPostingFields =
  | 'count'



  

export interface AggregateLedgerPostingFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Bank

type BankObject =
  | BankFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'institution', args?: [] | false, alias?: string  } 
  | { name: 'bsb', args?: [] | false, alias?: string  } 
  | { name: 'accountNumber', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type BankFields =
  | 'id'
  | 'name'
  | 'institution'
  | 'bsb'
  | 'accountNumber'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface BankFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  institution: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  bsb: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  accountNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Bank">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BankConnection

type BankConnectionObject =
  | BankConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type BankConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface BankConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BankConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'BankEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"BankConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankEdge[]> | prisma.BankEdge[]
  }
  aggregate: {
    type: 'AggregateBank'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BankConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateBank> | prisma.AggregateBank
  }
}
  

// Types for BankEdge

type BankEdgeObject =
  | BankEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type BankEdgeFields =
  | 'node'
  | 'cursor'



  

export interface BankEdgeFieldDetails {
  node: {
    type: 'Bank'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BankEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bank> | prisma.Bank
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateBank

type AggregateBankObject =
  | AggregateBankFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateBankFields =
  | 'count'



  

export interface AggregateBankFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BankTransaction

type BankTransactionObject =
  | BankTransactionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'transactionDate', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'posted', args?: [] | false, alias?: string  } 
  | { name: 'ledgerJournal', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type BankTransactionFields =
  | 'id'
  | 'transactionDate'
  | 'amount'
  | 'description'
  | 'posted'
  | 'ledgerJournal'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface BankTransactionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  transactionDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  amount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  posted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  ledgerJournal: {
    type: 'LedgerJournal'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BankTransaction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournal | null> | prisma.LedgerJournal | null
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BankTransaction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BankTransactionConnection

type BankTransactionConnectionObject =
  | BankTransactionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type BankTransactionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface BankTransactionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BankTransactionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'BankTransactionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"BankTransactionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankTransactionEdge[]> | prisma.BankTransactionEdge[]
  }
  aggregate: {
    type: 'AggregateBankTransaction'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BankTransactionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateBankTransaction> | prisma.AggregateBankTransaction
  }
}
  

// Types for BankTransactionEdge

type BankTransactionEdgeObject =
  | BankTransactionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type BankTransactionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface BankTransactionEdgeFieldDetails {
  node: {
    type: 'BankTransaction'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BankTransactionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankTransaction> | prisma.BankTransaction
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateBankTransaction

type AggregateBankTransactionObject =
  | AggregateBankTransactionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateBankTransactionFields =
  | 'count'



  

export interface AggregateBankTransactionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for WareHouse

type WareHouseObject =
  | WareHouseFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type WareHouseFields =
  | 'id'
  | 'name'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface WareHouseFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WareHouse">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for WareHouseConnection

type WareHouseConnectionObject =
  | WareHouseConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type WareHouseConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface WareHouseConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WareHouseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'WareHouseEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"WareHouseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouseEdge[]> | prisma.WareHouseEdge[]
  }
  aggregate: {
    type: 'AggregateWareHouse'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WareHouseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateWareHouse> | prisma.AggregateWareHouse
  }
}
  

// Types for WareHouseEdge

type WareHouseEdgeObject =
  | WareHouseEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type WareHouseEdgeFields =
  | 'node'
  | 'cursor'



  

export interface WareHouseEdgeFieldDetails {
  node: {
    type: 'WareHouse'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WareHouseEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouse> | prisma.WareHouse
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateWareHouse

type AggregateWareHouseObject =
  | AggregateWareHouseFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateWareHouseFields =
  | 'count'



  

export interface AggregateWareHouseFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Inventory

type InventoryObject =
  | InventoryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'inventoryModel', args?: [] | false, alias?: string  } 
  | { name: 'uom', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'SellingPrice', args?: [] | false, alias?: string  } 
  | { name: 'Barcode', args?: [] | false, alias?: string  } 
  | { name: 'Taxable', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type InventoryFields =
  | 'id'
  | 'name'
  | 'inventoryModel'
  | 'uom'
  | 'price'
  | 'SellingPrice'
  | 'Barcode'
  | 'Taxable'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface InventoryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  inventoryModel: {
    type: 'InventoryModel'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Inventory">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryModel | null> | prisma.InventoryModel | null
  }
  uom: {
    type: 'UOM'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Inventory">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UOM | null> | prisma.UOM | null
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  SellingPrice: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  Barcode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  Taxable: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Inventory">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InventoryConnection

type InventoryConnectionObject =
  | InventoryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type InventoryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface InventoryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InventoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'InventoryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"InventoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryEdge[]> | prisma.InventoryEdge[]
  }
  aggregate: {
    type: 'AggregateInventory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InventoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateInventory> | prisma.AggregateInventory
  }
}
  

// Types for InventoryEdge

type InventoryEdgeObject =
  | InventoryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type InventoryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface InventoryEdgeFieldDetails {
  node: {
    type: 'Inventory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InventoryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inventory> | prisma.Inventory
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateInventory

type AggregateInventoryObject =
  | AggregateInventoryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateInventoryFields =
  | 'count'



  

export interface AggregateInventoryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Supplier

type SupplierObject =
  | SupplierFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: SupplierAddressArgs[] | false, alias?: string  } 
  | { name: 'termsOfPayment', args?: [] | false, alias?: string  } 
  | { name: 'bankAccount', args?: [] | false, alias?: string  } 
  | { name: 'emailAddressForRemittance', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type SupplierFields =
  | 'id'
  | 'name'
  | 'address'
  | 'termsOfPayment'
  | 'bankAccount'
  | 'emailAddressForRemittance'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'


type SupplierAddressArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface SupplierFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  address: {
    type: 'Address'
    args: Record<SupplierAddressArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Supplier">,
      args: { where?: AddressWhereInput | null, orderBy?: prisma.AddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address[]> | prisma.Address[]
  }
  termsOfPayment: {
    type: 'SupplierTermsOfPayment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Supplier">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SupplierTermsOfPayment | null> | prisma.SupplierTermsOfPayment | null
  }
  bankAccount: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  emailAddressForRemittance: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Supplier">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SupplierConnection

type SupplierConnectionObject =
  | SupplierConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SupplierConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SupplierConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SupplierConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SupplierEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SupplierConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SupplierEdge[]> | prisma.SupplierEdge[]
  }
  aggregate: {
    type: 'AggregateSupplier'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SupplierConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSupplier> | prisma.AggregateSupplier
  }
}
  

// Types for SupplierEdge

type SupplierEdgeObject =
  | SupplierEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SupplierEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SupplierEdgeFieldDetails {
  node: {
    type: 'Supplier'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SupplierEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Supplier> | prisma.Supplier
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSupplier

type AggregateSupplierObject =
  | AggregateSupplierFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSupplierFields =
  | 'count'



  

export interface AggregateSupplierFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AssetGroup

type AssetGroupObject =
  | AssetGroupFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'depreciationType', args?: [] | false, alias?: string  } 
  | { name: 'usefulLife', args?: [] | false, alias?: string  } 
  | { name: 'deprMainAccount', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type AssetGroupFields =
  | 'id'
  | 'name'
  | 'depreciationType'
  | 'usefulLife'
  | 'deprMainAccount'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface AssetGroupFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  depreciationType: {
    type: 'AssetGroupDepreciationType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AssetGroup">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroupDepreciationType | null> | prisma.AssetGroupDepreciationType | null
  }
  usefulLife: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  deprMainAccount: {
    type: 'MainAccount'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AssetGroup">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccount | null> | prisma.MainAccount | null
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssetGroup">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AssetGroupConnection

type AssetGroupConnectionObject =
  | AssetGroupConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AssetGroupConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AssetGroupConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssetGroupConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AssetGroupEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AssetGroupConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroupEdge[]> | prisma.AssetGroupEdge[]
  }
  aggregate: {
    type: 'AggregateAssetGroup'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssetGroupConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAssetGroup> | prisma.AggregateAssetGroup
  }
}
  

// Types for AssetGroupEdge

type AssetGroupEdgeObject =
  | AssetGroupEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AssetGroupEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AssetGroupEdgeFieldDetails {
  node: {
    type: 'AssetGroup'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssetGroupEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroup> | prisma.AssetGroup
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAssetGroup

type AggregateAssetGroupObject =
  | AggregateAssetGroupFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAssetGroupFields =
  | 'count'



  

export interface AggregateAssetGroupFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Asset

type AssetObject =
  | AssetFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'assetGroup', args?: [] | false, alias?: string  } 
  | { name: 'dateOfAquisition', args?: [] | false, alias?: string  } 
  | { name: 'aquisitionPrice', args?: [] | false, alias?: string  } 
  | { name: 'netBookValue', args?: [] | false, alias?: string  } 
  | { name: 'depreciation', args?: [] | false, alias?: string  } 
  | { name: 'salvageValue', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type AssetFields =
  | 'id'
  | 'name'
  | 'assetGroup'
  | 'dateOfAquisition'
  | 'aquisitionPrice'
  | 'netBookValue'
  | 'depreciation'
  | 'salvageValue'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface AssetFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  assetGroup: {
    type: 'AssetGroup'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Asset">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroup | null> | prisma.AssetGroup | null
  }
  dateOfAquisition: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  aquisitionPrice: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  netBookValue: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  depreciation: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  salvageValue: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Asset">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AssetConnection

type AssetConnectionObject =
  | AssetConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AssetConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AssetConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AssetEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AssetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetEdge[]> | prisma.AssetEdge[]
  }
  aggregate: {
    type: 'AggregateAsset'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAsset> | prisma.AggregateAsset
  }
}
  

// Types for AssetEdge

type AssetEdgeObject =
  | AssetEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AssetEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AssetEdgeFieldDetails {
  node: {
    type: 'Asset'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssetEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Asset> | prisma.Asset
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAsset

type AggregateAssetObject =
  | AggregateAssetFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAssetFields =
  | 'count'



  

export interface AggregateAssetFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PurchaseOrder

type PurchaseOrderObject =
  | PurchaseOrderFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'pbsOrganisation', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'orderer', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'supplier', args?: [] | false, alias?: string  } 
  | { name: 'isPbsPO', args?: [] | false, alias?: string  } 
  | { name: 'poNumber', args?: [] | false, alias?: string  } 
  | { name: 'preview', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PurchaseOrderFields =
  | 'id'
  | 'pbsOrganisation'
  | 'date'
  | 'orderer'
  | 'status'
  | 'supplier'
  | 'isPbsPO'
  | 'poNumber'
  | 'preview'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface PurchaseOrderFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  pbsOrganisation: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  orderer: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrder">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  status: {
    type: 'PoStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrder">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoStatus | null> | prisma.PoStatus | null
  }
  supplier: {
    type: 'Supplier'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrder">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Supplier | null> | prisma.Supplier | null
  }
  isPbsPO: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  poNumber: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  preview: {
    type: 'Attachment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrder">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment | null> | prisma.Attachment | null
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PurchaseOrder">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PurchaseOrderConnection

type PurchaseOrderConnectionObject =
  | PurchaseOrderConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PurchaseOrderConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PurchaseOrderConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PurchaseOrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PurchaseOrderEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PurchaseOrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderEdge[]> | prisma.PurchaseOrderEdge[]
  }
  aggregate: {
    type: 'AggregatePurchaseOrder'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PurchaseOrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePurchaseOrder> | prisma.AggregatePurchaseOrder
  }
}
  

// Types for PurchaseOrderEdge

type PurchaseOrderEdgeObject =
  | PurchaseOrderEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PurchaseOrderEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PurchaseOrderEdgeFieldDetails {
  node: {
    type: 'PurchaseOrder'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PurchaseOrderEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrder> | prisma.PurchaseOrder
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePurchaseOrder

type AggregatePurchaseOrderObject =
  | AggregatePurchaseOrderFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePurchaseOrderFields =
  | 'count'



  

export interface AggregatePurchaseOrderFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PoReceipt

type PoReceiptObject =
  | PoReceiptFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'receiptNumber', args?: [] | false, alias?: string  } 
  | { name: 'purchaseOrder', args?: [] | false, alias?: string  } 
  | { name: 'receiptDate', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PoReceiptFields =
  | 'id'
  | 'receiptNumber'
  | 'purchaseOrder'
  | 'receiptDate'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface PoReceiptFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  receiptNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  purchaseOrder: {
    type: 'PurchaseOrder'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PoReceipt">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrder | null> | prisma.PurchaseOrder | null
  }
  receiptDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PoReceiptConnection

type PoReceiptConnectionObject =
  | PoReceiptConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PoReceiptConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PoReceiptConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PoReceiptConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PoReceiptEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PoReceiptConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceiptEdge[]> | prisma.PoReceiptEdge[]
  }
  aggregate: {
    type: 'AggregatePoReceipt'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PoReceiptConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePoReceipt> | prisma.AggregatePoReceipt
  }
}
  

// Types for PoReceiptEdge

type PoReceiptEdgeObject =
  | PoReceiptEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PoReceiptEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PoReceiptEdgeFieldDetails {
  node: {
    type: 'PoReceipt'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PoReceiptEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceipt> | prisma.PoReceipt
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePoReceipt

type AggregatePoReceiptObject =
  | AggregatePoReceiptFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePoReceiptFields =
  | 'count'



  

export interface AggregatePoReceiptFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InventoryOnHand

type InventoryOnHandObject =
  | InventoryOnHandFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'item', args?: [] | false, alias?: string  } 
  | { name: 'pbsDrug', args?: [] | false, alias?: string  } 
  | { name: 'onHandQty', args?: [] | false, alias?: string  } 
  | { name: 'purchaseOrder', args?: [] | false, alias?: string  } 
  | { name: 'warehouse', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type InventoryOnHandFields =
  | 'id'
  | 'date'
  | 'item'
  | 'pbsDrug'
  | 'onHandQty'
  | 'purchaseOrder'
  | 'warehouse'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface InventoryOnHandFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  item: {
    type: 'Inventory'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InventoryOnHand">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inventory | null> | prisma.Inventory | null
  }
  pbsDrug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  onHandQty: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  purchaseOrder: {
    type: 'PurchaseOrder'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InventoryOnHand">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrder | null> | prisma.PurchaseOrder | null
  }
  warehouse: {
    type: 'WareHouse'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InventoryOnHand">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouse | null> | prisma.WareHouse | null
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InventoryOnHand">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InventoryOnHandConnection

type InventoryOnHandConnectionObject =
  | InventoryOnHandConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type InventoryOnHandConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface InventoryOnHandConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InventoryOnHandConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'InventoryOnHandEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"InventoryOnHandConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryOnHandEdge[]> | prisma.InventoryOnHandEdge[]
  }
  aggregate: {
    type: 'AggregateInventoryOnHand'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InventoryOnHandConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateInventoryOnHand> | prisma.AggregateInventoryOnHand
  }
}
  

// Types for InventoryOnHandEdge

type InventoryOnHandEdgeObject =
  | InventoryOnHandEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type InventoryOnHandEdgeFields =
  | 'node'
  | 'cursor'



  

export interface InventoryOnHandEdgeFieldDetails {
  node: {
    type: 'InventoryOnHand'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InventoryOnHandEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryOnHand> | prisma.InventoryOnHand
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateInventoryOnHand

type AggregateInventoryOnHandObject =
  | AggregateInventoryOnHandFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateInventoryOnHandFields =
  | 'count'



  

export interface AggregateInventoryOnHandFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PurchaseOrderLine

type PurchaseOrderLineObject =
  | PurchaseOrderLineFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'item', args?: [] | false, alias?: string  } 
  | { name: 'pbsDrug', args?: [] | false, alias?: string  } 
  | { name: 'qty', args?: [] | false, alias?: string  } 
  | { name: 'unit', args?: [] | false, alias?: string  } 
  | { name: 'unitPrice', args?: [] | false, alias?: string  } 
  | { name: 'site', args?: [] | false, alias?: string  } 
  | { name: 'purchaseOrder', args?: [] | false, alias?: string  } 
  | { name: 'poReceipt', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PurchaseOrderLineFields =
  | 'id'
  | 'item'
  | 'pbsDrug'
  | 'qty'
  | 'unit'
  | 'unitPrice'
  | 'site'
  | 'purchaseOrder'
  | 'poReceipt'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface PurchaseOrderLineFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  item: {
    type: 'Inventory'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrderLine">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inventory | null> | prisma.Inventory | null
  }
  pbsDrug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  qty: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  unit: {
    type: 'UOM'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrderLine">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UOM | null> | prisma.UOM | null
  }
  unitPrice: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  site: {
    type: 'WareHouse'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrderLine">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouse | null> | prisma.WareHouse | null
  }
  purchaseOrder: {
    type: 'PurchaseOrder'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrderLine">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrder | null> | prisma.PurchaseOrder | null
  }
  poReceipt: {
    type: 'PoReceipt'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrderLine">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceipt | null> | prisma.PoReceipt | null
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PurchaseOrderLineConnection

type PurchaseOrderLineConnectionObject =
  | PurchaseOrderLineConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PurchaseOrderLineConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PurchaseOrderLineConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PurchaseOrderLineConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PurchaseOrderLineEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PurchaseOrderLineConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderLineEdge[]> | prisma.PurchaseOrderLineEdge[]
  }
  aggregate: {
    type: 'AggregatePurchaseOrderLine'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PurchaseOrderLineConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePurchaseOrderLine> | prisma.AggregatePurchaseOrderLine
  }
}
  

// Types for PurchaseOrderLineEdge

type PurchaseOrderLineEdgeObject =
  | PurchaseOrderLineEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PurchaseOrderLineEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PurchaseOrderLineEdgeFieldDetails {
  node: {
    type: 'PurchaseOrderLine'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PurchaseOrderLineEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderLine> | prisma.PurchaseOrderLine
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePurchaseOrderLine

type AggregatePurchaseOrderLineObject =
  | AggregatePurchaseOrderLineFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePurchaseOrderLineFields =
  | 'count'



  

export interface AggregatePurchaseOrderLineFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ApInvoice

type ApInvoiceObject =
  | ApInvoiceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'invoiceNumber', args?: [] | false, alias?: string  } 
  | { name: 'purchaseOrder', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ApInvoiceFields =
  | 'id'
  | 'status'
  | 'invoiceNumber'
  | 'purchaseOrder'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface ApInvoiceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'ApInvoiceStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ApInvoice">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoiceStatus | null> | prisma.ApInvoiceStatus | null
  }
  invoiceNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  purchaseOrder: {
    type: 'PurchaseOrder'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ApInvoice">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrder | null> | prisma.PurchaseOrder | null
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ApInvoice">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ApInvoiceConnection

type ApInvoiceConnectionObject =
  | ApInvoiceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ApInvoiceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ApInvoiceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ApInvoiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ApInvoiceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ApInvoiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoiceEdge[]> | prisma.ApInvoiceEdge[]
  }
  aggregate: {
    type: 'AggregateApInvoice'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ApInvoiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateApInvoice> | prisma.AggregateApInvoice
  }
}
  

// Types for ApInvoiceEdge

type ApInvoiceEdgeObject =
  | ApInvoiceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ApInvoiceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ApInvoiceEdgeFieldDetails {
  node: {
    type: 'ApInvoice'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ApInvoiceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoice> | prisma.ApInvoice
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateApInvoice

type AggregateApInvoiceObject =
  | AggregateApInvoiceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateApInvoiceFields =
  | 'count'



  

export interface AggregateApInvoiceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SalesOrder

type SalesOrderObject =
  | SalesOrderFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'customer', args?: [] | false, alias?: string  } 
  | { name: 'transactionDate', args?: [] | false, alias?: string  } 
  | { name: 'currency', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type SalesOrderFields =
  | 'id'
  | 'customer'
  | 'transactionDate'
  | 'currency'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface SalesOrderFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  customer: {
    type: 'Customer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SalesOrder">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer | null> | prisma.Customer | null
  }
  transactionDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  currency: {
    type: 'Currency'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SalesOrder">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Currency | null> | prisma.Currency | null
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SalesOrder">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SalesOrderConnection

type SalesOrderConnectionObject =
  | SalesOrderConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SalesOrderConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SalesOrderConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SalesOrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SalesOrderEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SalesOrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderEdge[]> | prisma.SalesOrderEdge[]
  }
  aggregate: {
    type: 'AggregateSalesOrder'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SalesOrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSalesOrder> | prisma.AggregateSalesOrder
  }
}
  

// Types for SalesOrderEdge

type SalesOrderEdgeObject =
  | SalesOrderEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SalesOrderEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SalesOrderEdgeFieldDetails {
  node: {
    type: 'SalesOrder'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SalesOrderEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrder> | prisma.SalesOrder
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSalesOrder

type AggregateSalesOrderObject =
  | AggregateSalesOrderFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSalesOrderFields =
  | 'count'



  

export interface AggregateSalesOrderFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SalesOrderLine

type SalesOrderLineObject =
  | SalesOrderLineFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'salesOrder', args?: [] | false, alias?: string  } 
  | { name: 'inventory', args?: [] | false, alias?: string  } 
  | { name: 'qty', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type SalesOrderLineFields =
  | 'id'
  | 'salesOrder'
  | 'inventory'
  | 'qty'
  | 'price'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface SalesOrderLineFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  salesOrder: {
    type: 'SalesOrder'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SalesOrderLine">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrder | null> | prisma.SalesOrder | null
  }
  inventory: {
    type: 'Inventory'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SalesOrderLine">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inventory | null> | prisma.Inventory | null
  }
  qty: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SalesOrderLineConnection

type SalesOrderLineConnectionObject =
  | SalesOrderLineConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SalesOrderLineConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SalesOrderLineConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SalesOrderLineConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SalesOrderLineEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SalesOrderLineConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderLineEdge[]> | prisma.SalesOrderLineEdge[]
  }
  aggregate: {
    type: 'AggregateSalesOrderLine'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SalesOrderLineConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSalesOrderLine> | prisma.AggregateSalesOrderLine
  }
}
  

// Types for SalesOrderLineEdge

type SalesOrderLineEdgeObject =
  | SalesOrderLineEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SalesOrderLineEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SalesOrderLineEdgeFieldDetails {
  node: {
    type: 'SalesOrderLine'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SalesOrderLineEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderLine> | prisma.SalesOrderLine
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSalesOrderLine

type AggregateSalesOrderLineObject =
  | AggregateSalesOrderLineFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSalesOrderLineFields =
  | 'count'



  

export interface AggregateSalesOrderLineFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PredictedSalesValueByCompany

type PredictedSalesValueByCompanyObject =
  | PredictedSalesValueByCompanyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'datePredictionRun', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'predictedSalesValue', args?: [] | false, alias?: string  } 
  | { name: 'predictedDate', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PredictedSalesValueByCompanyFields =
  | 'id'
  | 'datePredictionRun'
  | 'company'
  | 'predictedSalesValue'
  | 'predictedDate'
  | 'createdAt'
  | 'updatedAt'



  

export interface PredictedSalesValueByCompanyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  datePredictionRun: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictedSalesValueByCompany">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  predictedSalesValue: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  predictedDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PredictedSalesValueByCompanyConnection

type PredictedSalesValueByCompanyConnectionObject =
  | PredictedSalesValueByCompanyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PredictedSalesValueByCompanyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PredictedSalesValueByCompanyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictedSalesValueByCompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PredictedSalesValueByCompanyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PredictedSalesValueByCompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesValueByCompanyEdge[]> | prisma.PredictedSalesValueByCompanyEdge[]
  }
  aggregate: {
    type: 'AggregatePredictedSalesValueByCompany'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictedSalesValueByCompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePredictedSalesValueByCompany> | prisma.AggregatePredictedSalesValueByCompany
  }
}
  

// Types for PredictedSalesValueByCompanyEdge

type PredictedSalesValueByCompanyEdgeObject =
  | PredictedSalesValueByCompanyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PredictedSalesValueByCompanyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PredictedSalesValueByCompanyEdgeFieldDetails {
  node: {
    type: 'PredictedSalesValueByCompany'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictedSalesValueByCompanyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesValueByCompany> | prisma.PredictedSalesValueByCompany
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePredictedSalesValueByCompany

type AggregatePredictedSalesValueByCompanyObject =
  | AggregatePredictedSalesValueByCompanyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePredictedSalesValueByCompanyFields =
  | 'count'



  

export interface AggregatePredictedSalesValueByCompanyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PredictedSalesQuantityOfItemsByCompany

type PredictedSalesQuantityOfItemsByCompanyObject =
  | PredictedSalesQuantityOfItemsByCompanyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'datePredictionRun', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'inventory', args?: [] | false, alias?: string  } 
  | { name: 'predictedSalesValue', args?: [] | false, alias?: string  } 
  | { name: 'predictedDate', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PredictedSalesQuantityOfItemsByCompanyFields =
  | 'id'
  | 'datePredictionRun'
  | 'company'
  | 'inventory'
  | 'predictedSalesValue'
  | 'predictedDate'
  | 'createdAt'
  | 'updatedAt'



  

export interface PredictedSalesQuantityOfItemsByCompanyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  datePredictionRun: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictedSalesQuantityOfItemsByCompany">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  inventory: {
    type: 'Inventory'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PredictedSalesQuantityOfItemsByCompany">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inventory | null> | prisma.Inventory | null
  }
  predictedSalesValue: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  predictedDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PredictedSalesQuantityOfItemsByCompanyConnection

type PredictedSalesQuantityOfItemsByCompanyConnectionObject =
  | PredictedSalesQuantityOfItemsByCompanyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PredictedSalesQuantityOfItemsByCompanyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PredictedSalesQuantityOfItemsByCompanyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictedSalesQuantityOfItemsByCompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PredictedSalesQuantityOfItemsByCompanyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PredictedSalesQuantityOfItemsByCompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesQuantityOfItemsByCompanyEdge[]> | prisma.PredictedSalesQuantityOfItemsByCompanyEdge[]
  }
  aggregate: {
    type: 'AggregatePredictedSalesQuantityOfItemsByCompany'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictedSalesQuantityOfItemsByCompanyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePredictedSalesQuantityOfItemsByCompany> | prisma.AggregatePredictedSalesQuantityOfItemsByCompany
  }
}
  

// Types for PredictedSalesQuantityOfItemsByCompanyEdge

type PredictedSalesQuantityOfItemsByCompanyEdgeObject =
  | PredictedSalesQuantityOfItemsByCompanyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PredictedSalesQuantityOfItemsByCompanyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PredictedSalesQuantityOfItemsByCompanyEdgeFieldDetails {
  node: {
    type: 'PredictedSalesQuantityOfItemsByCompany'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictedSalesQuantityOfItemsByCompanyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesQuantityOfItemsByCompany> | prisma.PredictedSalesQuantityOfItemsByCompany
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePredictedSalesQuantityOfItemsByCompany

type AggregatePredictedSalesQuantityOfItemsByCompanyObject =
  | AggregatePredictedSalesQuantityOfItemsByCompanyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePredictedSalesQuantityOfItemsByCompanyFields =
  | 'count'



  

export interface AggregatePredictedSalesQuantityOfItemsByCompanyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MedicareService

type MedicareServiceObject =
  | MedicareServiceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'MBSScheduleFee', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'isActive', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type MedicareServiceFields =
  | 'id'
  | 'MBSScheduleFee'
  | 'description'
  | 'isActive'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface MedicareServiceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  MBSScheduleFee: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isActive: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MedicareServiceConnection

type MedicareServiceConnectionObject =
  | MedicareServiceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MedicareServiceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MedicareServiceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MedicareServiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MedicareServiceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MedicareServiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MedicareServiceEdge[]> | prisma.MedicareServiceEdge[]
  }
  aggregate: {
    type: 'AggregateMedicareService'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MedicareServiceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMedicareService> | prisma.AggregateMedicareService
  }
}
  

// Types for MedicareServiceEdge

type MedicareServiceEdgeObject =
  | MedicareServiceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MedicareServiceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MedicareServiceEdgeFieldDetails {
  node: {
    type: 'MedicareService'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MedicareServiceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MedicareService> | prisma.MedicareService
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMedicareService

type AggregateMedicareServiceObject =
  | AggregateMedicareServiceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMedicareServiceFields =
  | 'count'



  

export interface AggregateMedicareServiceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Patient

type PatientObject =
  | PatientFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'names', args?: PatientNamesArgs[] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'birthAddress', args?: [] | false, alias?: string  } 
  | { name: 'dateOfBirth', args?: [] | false, alias?: string  } 
  | { name: 'customer', args?: [] | false, alias?: string  } 
  | { name: 'gender', args?: [] | false, alias?: string  } 
  | { name: 'dvaCardType', args?: [] | false, alias?: string  } 
  | { name: 'aboriginalStatus', args?: [] | false, alias?: string  } 
  | { name: 'pensionerConcession', args?: [] | false, alias?: string  } 
  | { name: 'commonwealthSeniors', args?: [] | false, alias?: string  } 
  | { name: 'healthcareConcession', args?: [] | false, alias?: string  } 
  | { name: 'safetyNetConcession', args?: [] | false, alias?: string  } 
  | { name: 'medicareNumber', args?: [] | false, alias?: string  } 
  | { name: 'DVA', args?: [] | false, alias?: string  } 
  | { name: 'potentialDuplicate', args?: [] | false, alias?: string  } 
  | { name: 'oneName', args?: [] | false, alias?: string  } 
  | { name: 'ihi', args?: [] | false, alias?: string  } 
  | { name: 'ihiValidatedDate', args?: [] | false, alias?: string  } 
  | { name: 'noOfBirths', args?: [] | false, alias?: string  } 
  | { name: 'deceasedDate', args?: [] | false, alias?: string  } 
  | { name: 'basicDailyFee', args?: PatientBasicDailyFeeArgs[] | false, alias?: string  } 
  | { name: 'levelOfCare', args?: [] | false, alias?: string  } 
  | { name: 'dateEnteredAgedCare', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PatientFields =
  | 'id'
  | 'title'
  | 'firstName'
  | 'lastName'
  | 'names'
  | 'address'
  | 'birthAddress'
  | 'dateOfBirth'
  | 'customer'
  | 'gender'
  | 'dvaCardType'
  | 'aboriginalStatus'
  | 'pensionerConcession'
  | 'commonwealthSeniors'
  | 'healthcareConcession'
  | 'safetyNetConcession'
  | 'medicareNumber'
  | 'DVA'
  | 'potentialDuplicate'
  | 'oneName'
  | 'ihi'
  | 'ihiValidatedDate'
  | 'noOfBirths'
  | 'deceasedDate'
  | 'basicDailyFee'
  | 'levelOfCare'
  | 'dateEnteredAgedCare'
  | 'company'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'


type PatientNamesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PatientBasicDailyFeeArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PatientFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  names: {
    type: 'Name'
    args: Record<PatientNamesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Patient">,
      args: { where?: NameWhereInput | null, orderBy?: prisma.NameOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name[]> | prisma.Name[]
  }
  address: {
    type: 'Address'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Patient">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  birthAddress: {
    type: 'Address'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Patient">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  dateOfBirth: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  customer: {
    type: 'Customer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Patient">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer | null> | prisma.Customer | null
  }
  gender: {
    type: 'Gender'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Patient">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gender | null> | prisma.Gender | null
  }
  dvaCardType: {
    type: 'DVACardType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Patient">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DVACardType | null> | prisma.DVACardType | null
  }
  aboriginalStatus: {
    type: 'AboriginalStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Patient">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AboriginalStatus | null> | prisma.AboriginalStatus | null
  }
  pensionerConcession: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  commonwealthSeniors: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  healthcareConcession: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  safetyNetConcession: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  medicareNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  DVA: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  potentialDuplicate: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  oneName: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  ihi: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  ihiValidatedDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  noOfBirths: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  deceasedDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  basicDailyFee: {
    type: 'BasicDailyFee'
    args: Record<PatientBasicDailyFeeArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Patient">,
      args: { where?: BasicDailyFeeWhereInput | null, orderBy?: prisma.BasicDailyFeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFee[]> | prisma.BasicDailyFee[]
  }
  levelOfCare: {
    type: 'LevelOfCare'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Patient">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LevelOfCare | null> | prisma.LevelOfCare | null
  }
  dateEnteredAgedCare: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Patient">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Name

type NameObject =
  | NameFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'isPrimary', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type NameFields =
  | 'id'
  | 'name'
  | 'isPrimary'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface NameFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isPrimary: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PatientConnection

type PatientConnectionObject =
  | PatientConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PatientConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PatientConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PatientConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PatientEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PatientConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PatientEdge[]> | prisma.PatientEdge[]
  }
  aggregate: {
    type: 'AggregatePatient'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PatientConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePatient> | prisma.AggregatePatient
  }
}
  

// Types for PatientEdge

type PatientEdgeObject =
  | PatientEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PatientEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PatientEdgeFieldDetails {
  node: {
    type: 'Patient'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PatientEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient> | prisma.Patient
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePatient

type AggregatePatientObject =
  | AggregatePatientFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePatientFields =
  | 'count'



  

export interface AggregatePatientFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for NameConnection

type NameConnectionObject =
  | NameConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type NameConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface NameConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NameConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'NameEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"NameConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NameEdge[]> | prisma.NameEdge[]
  }
  aggregate: {
    type: 'AggregateName'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NameConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateName> | prisma.AggregateName
  }
}
  

// Types for NameEdge

type NameEdgeObject =
  | NameEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type NameEdgeFields =
  | 'node'
  | 'cursor'



  

export interface NameEdgeFieldDetails {
  node: {
    type: 'Name'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NameEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name> | prisma.Name
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateName

type AggregateNameObject =
  | AggregateNameFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateNameFields =
  | 'count'



  

export interface AggregateNameFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for HealthcareProvider

type HealthcareProviderObject =
  | HealthcareProviderFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'occupation', args?: [] | false, alias?: string  } 
  | { name: 'hpii', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'dateOfBirth', args?: [] | false, alias?: string  } 
  | { name: 'emailAddress', args?: [] | false, alias?: string  } 
  | { name: 'gender', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'company', args?: [] | false, alias?: string  } 
  | { name: 'ahpraNumber', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type HealthcareProviderFields =
  | 'id'
  | 'occupation'
  | 'hpii'
  | 'firstName'
  | 'lastName'
  | 'dateOfBirth'
  | 'emailAddress'
  | 'gender'
  | 'address'
  | 'company'
  | 'ahpraNumber'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface HealthcareProviderFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  occupation: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  hpii: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateOfBirth: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  emailAddress: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  gender: {
    type: 'Gender'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HealthcareProvider">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gender | null> | prisma.Gender | null
  }
  address: {
    type: 'Address'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HealthcareProvider">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  company: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HealthcareProvider">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  ahpraNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for HealthcareProviderConnection

type HealthcareProviderConnectionObject =
  | HealthcareProviderConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type HealthcareProviderConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface HealthcareProviderConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HealthcareProviderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'HealthcareProviderEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"HealthcareProviderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HealthcareProviderEdge[]> | prisma.HealthcareProviderEdge[]
  }
  aggregate: {
    type: 'AggregateHealthcareProvider'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HealthcareProviderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateHealthcareProvider> | prisma.AggregateHealthcareProvider
  }
}
  

// Types for HealthcareProviderEdge

type HealthcareProviderEdgeObject =
  | HealthcareProviderEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type HealthcareProviderEdgeFields =
  | 'node'
  | 'cursor'



  

export interface HealthcareProviderEdgeFieldDetails {
  node: {
    type: 'HealthcareProvider'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HealthcareProviderEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HealthcareProvider> | prisma.HealthcareProvider
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateHealthcareProvider

type AggregateHealthcareProviderObject =
  | AggregateHealthcareProviderFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateHealthcareProviderFields =
  | 'count'



  

export interface AggregateHealthcareProviderFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ImmunisationSchedule

type ImmunisationScheduleObject =
  | ImmunisationScheduleFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'ageNumber', args?: [] | false, alias?: string  } 
  | { name: 'agePeriod', args?: [] | false, alias?: string  } 
  | { name: 'disease', args?: [] | false, alias?: string  } 
  | { name: 'vaccineBrand', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ImmunisationScheduleFields =
  | 'id'
  | 'ageNumber'
  | 'agePeriod'
  | 'disease'
  | 'vaccineBrand'
  | 'createdAt'
  | 'updatedAt'



  

export interface ImmunisationScheduleFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  ageNumber: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  agePeriod: {
    type: 'PeriodUnit'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ImmunisationSchedule">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PeriodUnit | null> | prisma.PeriodUnit | null
  }
  disease: {
    type: 'Disease'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ImmunisationSchedule">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Disease | null> | prisma.Disease | null
  }
  vaccineBrand: {
    type: 'VaccineBrand'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ImmunisationSchedule">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrand | null> | prisma.VaccineBrand | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Disease

type DiseaseObject =
  | DiseaseFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type DiseaseFields =
  | 'id'
  | 'name'



  

export interface DiseaseFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for VaccineBrand

type VaccineBrandObject =
  | VaccineBrandFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type VaccineBrandFields =
  | 'id'
  | 'name'



  

export interface VaccineBrandFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ImmunisationScheduleConnection

type ImmunisationScheduleConnectionObject =
  | ImmunisationScheduleConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ImmunisationScheduleConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ImmunisationScheduleConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ImmunisationScheduleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ImmunisationScheduleEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ImmunisationScheduleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImmunisationScheduleEdge[]> | prisma.ImmunisationScheduleEdge[]
  }
  aggregate: {
    type: 'AggregateImmunisationSchedule'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ImmunisationScheduleConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateImmunisationSchedule> | prisma.AggregateImmunisationSchedule
  }
}
  

// Types for ImmunisationScheduleEdge

type ImmunisationScheduleEdgeObject =
  | ImmunisationScheduleEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ImmunisationScheduleEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ImmunisationScheduleEdgeFieldDetails {
  node: {
    type: 'ImmunisationSchedule'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ImmunisationScheduleEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImmunisationSchedule> | prisma.ImmunisationSchedule
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateImmunisationSchedule

type AggregateImmunisationScheduleObject =
  | AggregateImmunisationScheduleFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateImmunisationScheduleFields =
  | 'count'



  

export interface AggregateImmunisationScheduleFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VaccineBrandConnection

type VaccineBrandConnectionObject =
  | VaccineBrandConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type VaccineBrandConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface VaccineBrandConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VaccineBrandConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'VaccineBrandEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"VaccineBrandConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrandEdge[]> | prisma.VaccineBrandEdge[]
  }
  aggregate: {
    type: 'AggregateVaccineBrand'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VaccineBrandConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateVaccineBrand> | prisma.AggregateVaccineBrand
  }
}
  

// Types for VaccineBrandEdge

type VaccineBrandEdgeObject =
  | VaccineBrandEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type VaccineBrandEdgeFields =
  | 'node'
  | 'cursor'



  

export interface VaccineBrandEdgeFieldDetails {
  node: {
    type: 'VaccineBrand'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VaccineBrandEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrand> | prisma.VaccineBrand
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateVaccineBrand

type AggregateVaccineBrandObject =
  | AggregateVaccineBrandFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateVaccineBrandFields =
  | 'count'



  

export interface AggregateVaccineBrandFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DiseaseConnection

type DiseaseConnectionObject =
  | DiseaseConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DiseaseConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DiseaseConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DiseaseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DiseaseEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DiseaseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DiseaseEdge[]> | prisma.DiseaseEdge[]
  }
  aggregate: {
    type: 'AggregateDisease'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DiseaseConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDisease> | prisma.AggregateDisease
  }
}
  

// Types for DiseaseEdge

type DiseaseEdgeObject =
  | DiseaseEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DiseaseEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DiseaseEdgeFieldDetails {
  node: {
    type: 'Disease'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DiseaseEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Disease> | prisma.Disease
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDisease

type AggregateDiseaseObject =
  | AggregateDiseaseFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDiseaseFields =
  | 'count'



  

export interface AggregateDiseaseFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for HILog

type HILogObject =
  | HILogFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'hpio', args?: [] | false, alias?: string  } 
  | { name: 'hpii', args?: [] | false, alias?: string  } 
  | { name: 'ihi', args?: [] | false, alias?: string  } 
  | { name: 'timeWaitedForSalus', args?: [] | false, alias?: string  } 
  | { name: 'csp', args?: [] | false, alias?: string  } 
  | { name: 'hiWebServiceUsed', args?: [] | false, alias?: string  } 
  | { name: 'hiWebServiceVersion', args?: [] | false, alias?: string  } 
  | { name: 'hiNumberStatus', args?: [] | false, alias?: string  } 
  | { name: 'recordStatus', args?: [] | false, alias?: string  } 
  | { name: 'salusResponse', args?: [] | false, alias?: string  } 
  | { name: 'failureMessage', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type HILogFields =
  | 'id'
  | 'hpio'
  | 'hpii'
  | 'ihi'
  | 'timeWaitedForSalus'
  | 'csp'
  | 'hiWebServiceUsed'
  | 'hiWebServiceVersion'
  | 'hiNumberStatus'
  | 'recordStatus'
  | 'salusResponse'
  | 'failureMessage'
  | 'createdAt'
  | 'updatedAt'



  

export interface HILogFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hpio: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  hpii: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  ihi: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  timeWaitedForSalus: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  csp: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  hiWebServiceUsed: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  hiWebServiceVersion: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  hiNumberStatus: {
    type: 'HINumberStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HILog">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HINumberStatus | null> | prisma.HINumberStatus | null
  }
  recordStatus: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  salusResponse: {
    type: 'SalusResponse'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HILog">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalusResponse | null> | prisma.SalusResponse | null
  }
  failureMessage: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for HILogConnection

type HILogConnectionObject =
  | HILogConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type HILogConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface HILogConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HILogConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'HILogEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"HILogConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HILogEdge[]> | prisma.HILogEdge[]
  }
  aggregate: {
    type: 'AggregateHILog'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HILogConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateHILog> | prisma.AggregateHILog
  }
}
  

// Types for HILogEdge

type HILogEdgeObject =
  | HILogEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type HILogEdgeFields =
  | 'node'
  | 'cursor'



  

export interface HILogEdgeFieldDetails {
  node: {
    type: 'HILog'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HILogEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HILog> | prisma.HILog
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateHILog

type AggregateHILogObject =
  | AggregateHILogFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateHILogFields =
  | 'count'



  

export interface AggregateHILogFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PbsOrganisation

type PbsOrganisationObject =
  | PbsOrganisationFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'street', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'stateAddress', args?: [] | false, alias?: string  } 
  | { name: 'postcode', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'effectiveFrom', args?: [] | false, alias?: string  } 
  | { name: 'effectiveTo', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PbsOrganisationFields =
  | 'id'
  | 'code'
  | 'title'
  | 'street'
  | 'city'
  | 'stateAddress'
  | 'postcode'
  | 'phone'
  | 'effectiveFrom'
  | 'effectiveTo'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface PbsOrganisationFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  street: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  stateAddress: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  postcode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  effectiveFrom: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  effectiveTo: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PbsOrganisationConnection

type PbsOrganisationConnectionObject =
  | PbsOrganisationConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PbsOrganisationConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PbsOrganisationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PbsOrganisationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PbsOrganisationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PbsOrganisationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisationEdge[]> | prisma.PbsOrganisationEdge[]
  }
  aggregate: {
    type: 'AggregatePbsOrganisation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PbsOrganisationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePbsOrganisation> | prisma.AggregatePbsOrganisation
  }
}
  

// Types for PbsOrganisationEdge

type PbsOrganisationEdgeObject =
  | PbsOrganisationEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PbsOrganisationEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PbsOrganisationEdgeFieldDetails {
  node: {
    type: 'PbsOrganisation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PbsOrganisationEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisation> | prisma.PbsOrganisation
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePbsOrganisation

type AggregatePbsOrganisationObject =
  | AggregatePbsOrganisationFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePbsOrganisationFields =
  | 'count'



  

export interface AggregatePbsOrganisationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PbsTPP

type PbsTPPObject =
  | PbsTPPFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'snomedCode', args?: [] | false, alias?: string  } 
  | { name: 'clinicalPreferredTerm', args?: [] | false, alias?: string  } 
  | { name: 'packSize', args?: [] | false, alias?: string  } 
  | { name: 'brandName', args?: [] | false, alias?: string  } 
  | { name: 'exManufacturerPrice', args?: [] | false, alias?: string  } 
  | { name: 'pricingModel', args?: [] | false, alias?: string  } 
  | { name: 'mpp_id', args?: [] | false, alias?: string  } 
  | { name: 'organisation_id', args?: [] | false, alias?: string  } 
  | { name: 'effectiveFrom', args?: [] | false, alias?: string  } 
  | { name: 'effectiveTo', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PbsTPPFields =
  | 'id'
  | 'snomedCode'
  | 'clinicalPreferredTerm'
  | 'packSize'
  | 'brandName'
  | 'exManufacturerPrice'
  | 'pricingModel'
  | 'mpp_id'
  | 'organisation_id'
  | 'effectiveFrom'
  | 'effectiveTo'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface PbsTPPFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  snomedCode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  clinicalPreferredTerm: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  packSize: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  brandName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  exManufacturerPrice: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  pricingModel: {
    type: 'PBSPricingModel'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PbsTPP">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PBSPricingModel | null> | prisma.PBSPricingModel | null
  }
  mpp_id: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  organisation_id: {
    type: 'PbsOrganisation'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PbsTPP">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisation | null> | prisma.PbsOrganisation | null
  }
  effectiveFrom: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  effectiveTo: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PbsTPPConnection

type PbsTPPConnectionObject =
  | PbsTPPConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PbsTPPConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PbsTPPConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PbsTPPConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PbsTPPEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PbsTPPConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsTPPEdge[]> | prisma.PbsTPPEdge[]
  }
  aggregate: {
    type: 'AggregatePbsTPP'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PbsTPPConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePbsTPP> | prisma.AggregatePbsTPP
  }
}
  

// Types for PbsTPPEdge

type PbsTPPEdgeObject =
  | PbsTPPEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PbsTPPEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PbsTPPEdgeFieldDetails {
  node: {
    type: 'PbsTPP'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PbsTPPEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsTPP> | prisma.PbsTPP
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePbsTPP

type AggregatePbsTPPObject =
  | AggregatePbsTPPFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePbsTPPFields =
  | 'count'



  

export interface AggregatePbsTPPFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MeansTestedFeeConnection

type MeansTestedFeeConnectionObject =
  | MeansTestedFeeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MeansTestedFeeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MeansTestedFeeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MeansTestedFeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MeansTestedFeeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MeansTestedFeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFeeEdge[]> | prisma.MeansTestedFeeEdge[]
  }
  aggregate: {
    type: 'AggregateMeansTestedFee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MeansTestedFeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMeansTestedFee> | prisma.AggregateMeansTestedFee
  }
}
  

// Types for MeansTestedFeeEdge

type MeansTestedFeeEdgeObject =
  | MeansTestedFeeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MeansTestedFeeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MeansTestedFeeEdgeFieldDetails {
  node: {
    type: 'MeansTestedFee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MeansTestedFeeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFee> | prisma.MeansTestedFee
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMeansTestedFee

type AggregateMeansTestedFeeObject =
  | AggregateMeansTestedFeeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMeansTestedFeeFields =
  | 'count'



  

export interface AggregateMeansTestedFeeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MeansTestLimits

type MeansTestLimitsObject =
  | MeansTestLimitsFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'annual', args?: [] | false, alias?: string  } 
  | { name: 'lifetime', args?: [] | false, alias?: string  } 
  | { name: 'dateFrom', args?: [] | false, alias?: string  } 
  | { name: 'dateTo', args?: [] | false, alias?: string  } 

type MeansTestLimitsFields =
  | 'id'
  | 'annual'
  | 'lifetime'
  | 'dateFrom'
  | 'dateTo'



  

export interface MeansTestLimitsFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  annual: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lifetime: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateFrom: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateTo: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for MeansTestLimitsConnection

type MeansTestLimitsConnectionObject =
  | MeansTestLimitsConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MeansTestLimitsConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MeansTestLimitsConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MeansTestLimitsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MeansTestLimitsEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MeansTestLimitsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestLimitsEdge[]> | prisma.MeansTestLimitsEdge[]
  }
  aggregate: {
    type: 'AggregateMeansTestLimits'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MeansTestLimitsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMeansTestLimits> | prisma.AggregateMeansTestLimits
  }
}
  

// Types for MeansTestLimitsEdge

type MeansTestLimitsEdgeObject =
  | MeansTestLimitsEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MeansTestLimitsEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MeansTestLimitsEdgeFieldDetails {
  node: {
    type: 'MeansTestLimits'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MeansTestLimitsEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestLimits> | prisma.MeansTestLimits
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMeansTestLimits

type AggregateMeansTestLimitsObject =
  | AggregateMeansTestLimitsFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMeansTestLimitsFields =
  | 'count'



  

export interface AggregateMeansTestLimitsFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BasicDailyFeeConnection

type BasicDailyFeeConnectionObject =
  | BasicDailyFeeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type BasicDailyFeeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface BasicDailyFeeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BasicDailyFeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'BasicDailyFeeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"BasicDailyFeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFeeEdge[]> | prisma.BasicDailyFeeEdge[]
  }
  aggregate: {
    type: 'AggregateBasicDailyFee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BasicDailyFeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateBasicDailyFee> | prisma.AggregateBasicDailyFee
  }
}
  

// Types for BasicDailyFeeEdge

type BasicDailyFeeEdgeObject =
  | BasicDailyFeeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type BasicDailyFeeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface BasicDailyFeeEdgeFieldDetails {
  node: {
    type: 'BasicDailyFee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BasicDailyFeeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFee> | prisma.BasicDailyFee
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateBasicDailyFee

type AggregateBasicDailyFeeObject =
  | AggregateBasicDailyFeeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateBasicDailyFeeFields =
  | 'count'



  

export interface AggregateBasicDailyFeeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createAddress', args?: MutationCreateAddressArgs[] | false, alias?: string  } 
  | { name: 'updateAddress', args?: MutationUpdateAddressArgs[] | false, alias?: string  } 
  | { name: 'updateManyAddresses', args?: MutationUpdateManyAddressesArgs[] | false, alias?: string  } 
  | { name: 'upsertAddress', args?: MutationUpsertAddressArgs[] | false, alias?: string  } 
  | { name: 'deleteAddress', args?: MutationDeleteAddressArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAddresses', args?: MutationDeleteManyAddressesArgs[] | false, alias?: string  } 
  | { name: 'createContact', args?: MutationCreateContactArgs[] | false, alias?: string  } 
  | { name: 'updateContact', args?: MutationUpdateContactArgs[] | false, alias?: string  } 
  | { name: 'updateManyContacts', args?: MutationUpdateManyContactsArgs[] | false, alias?: string  } 
  | { name: 'upsertContact', args?: MutationUpsertContactArgs[] | false, alias?: string  } 
  | { name: 'deleteContact', args?: MutationDeleteContactArgs[] | false, alias?: string  } 
  | { name: 'deleteManyContacts', args?: MutationDeleteManyContactsArgs[] | false, alias?: string  } 
  | { name: 'createCompany', args?: MutationCreateCompanyArgs[] | false, alias?: string  } 
  | { name: 'updateCompany', args?: MutationUpdateCompanyArgs[] | false, alias?: string  } 
  | { name: 'updateManyCompanies', args?: MutationUpdateManyCompaniesArgs[] | false, alias?: string  } 
  | { name: 'upsertCompany', args?: MutationUpsertCompanyArgs[] | false, alias?: string  } 
  | { name: 'deleteCompany', args?: MutationDeleteCompanyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCompanies', args?: MutationDeleteManyCompaniesArgs[] | false, alias?: string  } 
  | { name: 'createCompanyMember', args?: MutationCreateCompanyMemberArgs[] | false, alias?: string  } 
  | { name: 'updateCompanyMember', args?: MutationUpdateCompanyMemberArgs[] | false, alias?: string  } 
  | { name: 'updateManyCompanyMembers', args?: MutationUpdateManyCompanyMembersArgs[] | false, alias?: string  } 
  | { name: 'upsertCompanyMember', args?: MutationUpsertCompanyMemberArgs[] | false, alias?: string  } 
  | { name: 'deleteCompanyMember', args?: MutationDeleteCompanyMemberArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCompanyMembers', args?: MutationDeleteManyCompanyMembersArgs[] | false, alias?: string  } 
  | { name: 'createCustomer', args?: MutationCreateCustomerArgs[] | false, alias?: string  } 
  | { name: 'updateCustomer', args?: MutationUpdateCustomerArgs[] | false, alias?: string  } 
  | { name: 'updateManyCustomers', args?: MutationUpdateManyCustomersArgs[] | false, alias?: string  } 
  | { name: 'upsertCustomer', args?: MutationUpsertCustomerArgs[] | false, alias?: string  } 
  | { name: 'deleteCustomer', args?: MutationDeleteCustomerArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCustomers', args?: MutationDeleteManyCustomersArgs[] | false, alias?: string  } 
  | { name: 'createIntegration', args?: MutationCreateIntegrationArgs[] | false, alias?: string  } 
  | { name: 'updateIntegration', args?: MutationUpdateIntegrationArgs[] | false, alias?: string  } 
  | { name: 'updateManyIntegrations', args?: MutationUpdateManyIntegrationsArgs[] | false, alias?: string  } 
  | { name: 'upsertIntegration', args?: MutationUpsertIntegrationArgs[] | false, alias?: string  } 
  | { name: 'deleteIntegration', args?: MutationDeleteIntegrationArgs[] | false, alias?: string  } 
  | { name: 'deleteManyIntegrations', args?: MutationDeleteManyIntegrationsArgs[] | false, alias?: string  } 
  | { name: 'createService', args?: MutationCreateServiceArgs[] | false, alias?: string  } 
  | { name: 'updateService', args?: MutationUpdateServiceArgs[] | false, alias?: string  } 
  | { name: 'updateManyServices', args?: MutationUpdateManyServicesArgs[] | false, alias?: string  } 
  | { name: 'upsertService', args?: MutationUpsertServiceArgs[] | false, alias?: string  } 
  | { name: 'deleteService', args?: MutationDeleteServiceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyServices', args?: MutationDeleteManyServicesArgs[] | false, alias?: string  } 
  | { name: 'createProject', args?: MutationCreateProjectArgs[] | false, alias?: string  } 
  | { name: 'updateProject', args?: MutationUpdateProjectArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjects', args?: MutationUpdateManyProjectsArgs[] | false, alias?: string  } 
  | { name: 'upsertProject', args?: MutationUpsertProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteProject', args?: MutationDeleteProjectArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjects', args?: MutationDeleteManyProjectsArgs[] | false, alias?: string  } 
  | { name: 'createProjectService', args?: MutationCreateProjectServiceArgs[] | false, alias?: string  } 
  | { name: 'updateProjectService', args?: MutationUpdateProjectServiceArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectServices', args?: MutationUpdateManyProjectServicesArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectService', args?: MutationUpsertProjectServiceArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectService', args?: MutationDeleteProjectServiceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectServices', args?: MutationDeleteManyProjectServicesArgs[] | false, alias?: string  } 
  | { name: 'createProjectServiceRule', args?: MutationCreateProjectServiceRuleArgs[] | false, alias?: string  } 
  | { name: 'updateProjectServiceRule', args?: MutationUpdateProjectServiceRuleArgs[] | false, alias?: string  } 
  | { name: 'updateManyProjectServiceRules', args?: MutationUpdateManyProjectServiceRulesArgs[] | false, alias?: string  } 
  | { name: 'upsertProjectServiceRule', args?: MutationUpsertProjectServiceRuleArgs[] | false, alias?: string  } 
  | { name: 'deleteProjectServiceRule', args?: MutationDeleteProjectServiceRuleArgs[] | false, alias?: string  } 
  | { name: 'deleteManyProjectServiceRules', args?: MutationDeleteManyProjectServiceRulesArgs[] | false, alias?: string  } 
  | { name: 'createPlan', args?: MutationCreatePlanArgs[] | false, alias?: string  } 
  | { name: 'updatePlan', args?: MutationUpdatePlanArgs[] | false, alias?: string  } 
  | { name: 'updateManyPlans', args?: MutationUpdateManyPlansArgs[] | false, alias?: string  } 
  | { name: 'upsertPlan', args?: MutationUpsertPlanArgs[] | false, alias?: string  } 
  | { name: 'deletePlan', args?: MutationDeletePlanArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPlans', args?: MutationDeleteManyPlansArgs[] | false, alias?: string  } 
  | { name: 'createSession', args?: MutationCreateSessionArgs[] | false, alias?: string  } 
  | { name: 'updateSession', args?: MutationUpdateSessionArgs[] | false, alias?: string  } 
  | { name: 'updateManySessions', args?: MutationUpdateManySessionsArgs[] | false, alias?: string  } 
  | { name: 'upsertSession', args?: MutationUpsertSessionArgs[] | false, alias?: string  } 
  | { name: 'deleteSession', args?: MutationDeleteSessionArgs[] | false, alias?: string  } 
  | { name: 'deleteManySessions', args?: MutationDeleteManySessionsArgs[] | false, alias?: string  } 
  | { name: 'createTimeSheet', args?: MutationCreateTimeSheetArgs[] | false, alias?: string  } 
  | { name: 'updateTimeSheet', args?: MutationUpdateTimeSheetArgs[] | false, alias?: string  } 
  | { name: 'updateManyTimeSheets', args?: MutationUpdateManyTimeSheetsArgs[] | false, alias?: string  } 
  | { name: 'upsertTimeSheet', args?: MutationUpsertTimeSheetArgs[] | false, alias?: string  } 
  | { name: 'deleteTimeSheet', args?: MutationDeleteTimeSheetArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTimeSheets', args?: MutationDeleteManyTimeSheetsArgs[] | false, alias?: string  } 
  | { name: 'createAttachment', args?: MutationCreateAttachmentArgs[] | false, alias?: string  } 
  | { name: 'updateAttachment', args?: MutationUpdateAttachmentArgs[] | false, alias?: string  } 
  | { name: 'updateManyAttachments', args?: MutationUpdateManyAttachmentsArgs[] | false, alias?: string  } 
  | { name: 'upsertAttachment', args?: MutationUpsertAttachmentArgs[] | false, alias?: string  } 
  | { name: 'deleteAttachment', args?: MutationDeleteAttachmentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAttachments', args?: MutationDeleteManyAttachmentsArgs[] | false, alias?: string  } 
  | { name: 'createTimeSheetEntry', args?: MutationCreateTimeSheetEntryArgs[] | false, alias?: string  } 
  | { name: 'updateTimeSheetEntry', args?: MutationUpdateTimeSheetEntryArgs[] | false, alias?: string  } 
  | { name: 'updateManyTimeSheetEntries', args?: MutationUpdateManyTimeSheetEntriesArgs[] | false, alias?: string  } 
  | { name: 'upsertTimeSheetEntry', args?: MutationUpsertTimeSheetEntryArgs[] | false, alias?: string  } 
  | { name: 'deleteTimeSheetEntry', args?: MutationDeleteTimeSheetEntryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTimeSheetEntries', args?: MutationDeleteManyTimeSheetEntriesArgs[] | false, alias?: string  } 
  | { name: 'createInvoiceItemEntry', args?: MutationCreateInvoiceItemEntryArgs[] | false, alias?: string  } 
  | { name: 'updateInvoiceItemEntry', args?: MutationUpdateInvoiceItemEntryArgs[] | false, alias?: string  } 
  | { name: 'updateManyInvoiceItemEntries', args?: MutationUpdateManyInvoiceItemEntriesArgs[] | false, alias?: string  } 
  | { name: 'upsertInvoiceItemEntry', args?: MutationUpsertInvoiceItemEntryArgs[] | false, alias?: string  } 
  | { name: 'deleteInvoiceItemEntry', args?: MutationDeleteInvoiceItemEntryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyInvoiceItemEntries', args?: MutationDeleteManyInvoiceItemEntriesArgs[] | false, alias?: string  } 
  | { name: 'createInvoice', args?: MutationCreateInvoiceArgs[] | false, alias?: string  } 
  | { name: 'updateInvoice', args?: MutationUpdateInvoiceArgs[] | false, alias?: string  } 
  | { name: 'updateManyInvoices', args?: MutationUpdateManyInvoicesArgs[] | false, alias?: string  } 
  | { name: 'upsertInvoice', args?: MutationUpsertInvoiceArgs[] | false, alias?: string  } 
  | { name: 'deleteInvoice', args?: MutationDeleteInvoiceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyInvoices', args?: MutationDeleteManyInvoicesArgs[] | false, alias?: string  } 
  | { name: 'createMainAccount', args?: MutationCreateMainAccountArgs[] | false, alias?: string  } 
  | { name: 'updateMainAccount', args?: MutationUpdateMainAccountArgs[] | false, alias?: string  } 
  | { name: 'updateManyMainAccounts', args?: MutationUpdateManyMainAccountsArgs[] | false, alias?: string  } 
  | { name: 'upsertMainAccount', args?: MutationUpsertMainAccountArgs[] | false, alias?: string  } 
  | { name: 'deleteMainAccount', args?: MutationDeleteMainAccountArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMainAccounts', args?: MutationDeleteManyMainAccountsArgs[] | false, alias?: string  } 
  | { name: 'createLedgerJournal', args?: MutationCreateLedgerJournalArgs[] | false, alias?: string  } 
  | { name: 'updateLedgerJournal', args?: MutationUpdateLedgerJournalArgs[] | false, alias?: string  } 
  | { name: 'updateManyLedgerJournals', args?: MutationUpdateManyLedgerJournalsArgs[] | false, alias?: string  } 
  | { name: 'upsertLedgerJournal', args?: MutationUpsertLedgerJournalArgs[] | false, alias?: string  } 
  | { name: 'deleteLedgerJournal', args?: MutationDeleteLedgerJournalArgs[] | false, alias?: string  } 
  | { name: 'deleteManyLedgerJournals', args?: MutationDeleteManyLedgerJournalsArgs[] | false, alias?: string  } 
  | { name: 'createLedgerTransaction', args?: MutationCreateLedgerTransactionArgs[] | false, alias?: string  } 
  | { name: 'updateLedgerTransaction', args?: MutationUpdateLedgerTransactionArgs[] | false, alias?: string  } 
  | { name: 'updateManyLedgerTransactions', args?: MutationUpdateManyLedgerTransactionsArgs[] | false, alias?: string  } 
  | { name: 'upsertLedgerTransaction', args?: MutationUpsertLedgerTransactionArgs[] | false, alias?: string  } 
  | { name: 'deleteLedgerTransaction', args?: MutationDeleteLedgerTransactionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyLedgerTransactions', args?: MutationDeleteManyLedgerTransactionsArgs[] | false, alias?: string  } 
  | { name: 'createLedgerPosting', args?: MutationCreateLedgerPostingArgs[] | false, alias?: string  } 
  | { name: 'updateLedgerPosting', args?: MutationUpdateLedgerPostingArgs[] | false, alias?: string  } 
  | { name: 'updateManyLedgerPostings', args?: MutationUpdateManyLedgerPostingsArgs[] | false, alias?: string  } 
  | { name: 'upsertLedgerPosting', args?: MutationUpsertLedgerPostingArgs[] | false, alias?: string  } 
  | { name: 'deleteLedgerPosting', args?: MutationDeleteLedgerPostingArgs[] | false, alias?: string  } 
  | { name: 'deleteManyLedgerPostings', args?: MutationDeleteManyLedgerPostingsArgs[] | false, alias?: string  } 
  | { name: 'createBank', args?: MutationCreateBankArgs[] | false, alias?: string  } 
  | { name: 'updateBank', args?: MutationUpdateBankArgs[] | false, alias?: string  } 
  | { name: 'updateManyBanks', args?: MutationUpdateManyBanksArgs[] | false, alias?: string  } 
  | { name: 'upsertBank', args?: MutationUpsertBankArgs[] | false, alias?: string  } 
  | { name: 'deleteBank', args?: MutationDeleteBankArgs[] | false, alias?: string  } 
  | { name: 'deleteManyBanks', args?: MutationDeleteManyBanksArgs[] | false, alias?: string  } 
  | { name: 'createBankTransaction', args?: MutationCreateBankTransactionArgs[] | false, alias?: string  } 
  | { name: 'updateBankTransaction', args?: MutationUpdateBankTransactionArgs[] | false, alias?: string  } 
  | { name: 'updateManyBankTransactions', args?: MutationUpdateManyBankTransactionsArgs[] | false, alias?: string  } 
  | { name: 'upsertBankTransaction', args?: MutationUpsertBankTransactionArgs[] | false, alias?: string  } 
  | { name: 'deleteBankTransaction', args?: MutationDeleteBankTransactionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyBankTransactions', args?: MutationDeleteManyBankTransactionsArgs[] | false, alias?: string  } 
  | { name: 'createWareHouse', args?: MutationCreateWareHouseArgs[] | false, alias?: string  } 
  | { name: 'updateWareHouse', args?: MutationUpdateWareHouseArgs[] | false, alias?: string  } 
  | { name: 'updateManyWareHouses', args?: MutationUpdateManyWareHousesArgs[] | false, alias?: string  } 
  | { name: 'upsertWareHouse', args?: MutationUpsertWareHouseArgs[] | false, alias?: string  } 
  | { name: 'deleteWareHouse', args?: MutationDeleteWareHouseArgs[] | false, alias?: string  } 
  | { name: 'deleteManyWareHouses', args?: MutationDeleteManyWareHousesArgs[] | false, alias?: string  } 
  | { name: 'createInventory', args?: MutationCreateInventoryArgs[] | false, alias?: string  } 
  | { name: 'updateInventory', args?: MutationUpdateInventoryArgs[] | false, alias?: string  } 
  | { name: 'updateManyInventories', args?: MutationUpdateManyInventoriesArgs[] | false, alias?: string  } 
  | { name: 'upsertInventory', args?: MutationUpsertInventoryArgs[] | false, alias?: string  } 
  | { name: 'deleteInventory', args?: MutationDeleteInventoryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyInventories', args?: MutationDeleteManyInventoriesArgs[] | false, alias?: string  } 
  | { name: 'createSupplier', args?: MutationCreateSupplierArgs[] | false, alias?: string  } 
  | { name: 'updateSupplier', args?: MutationUpdateSupplierArgs[] | false, alias?: string  } 
  | { name: 'updateManySuppliers', args?: MutationUpdateManySuppliersArgs[] | false, alias?: string  } 
  | { name: 'upsertSupplier', args?: MutationUpsertSupplierArgs[] | false, alias?: string  } 
  | { name: 'deleteSupplier', args?: MutationDeleteSupplierArgs[] | false, alias?: string  } 
  | { name: 'deleteManySuppliers', args?: MutationDeleteManySuppliersArgs[] | false, alias?: string  } 
  | { name: 'createAssetGroup', args?: MutationCreateAssetGroupArgs[] | false, alias?: string  } 
  | { name: 'updateAssetGroup', args?: MutationUpdateAssetGroupArgs[] | false, alias?: string  } 
  | { name: 'updateManyAssetGroups', args?: MutationUpdateManyAssetGroupsArgs[] | false, alias?: string  } 
  | { name: 'upsertAssetGroup', args?: MutationUpsertAssetGroupArgs[] | false, alias?: string  } 
  | { name: 'deleteAssetGroup', args?: MutationDeleteAssetGroupArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAssetGroups', args?: MutationDeleteManyAssetGroupsArgs[] | false, alias?: string  } 
  | { name: 'createAsset', args?: MutationCreateAssetArgs[] | false, alias?: string  } 
  | { name: 'updateAsset', args?: MutationUpdateAssetArgs[] | false, alias?: string  } 
  | { name: 'updateManyAssets', args?: MutationUpdateManyAssetsArgs[] | false, alias?: string  } 
  | { name: 'upsertAsset', args?: MutationUpsertAssetArgs[] | false, alias?: string  } 
  | { name: 'deleteAsset', args?: MutationDeleteAssetArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAssets', args?: MutationDeleteManyAssetsArgs[] | false, alias?: string  } 
  | { name: 'createPurchaseOrder', args?: MutationCreatePurchaseOrderArgs[] | false, alias?: string  } 
  | { name: 'updatePurchaseOrder', args?: MutationUpdatePurchaseOrderArgs[] | false, alias?: string  } 
  | { name: 'updateManyPurchaseOrders', args?: MutationUpdateManyPurchaseOrdersArgs[] | false, alias?: string  } 
  | { name: 'upsertPurchaseOrder', args?: MutationUpsertPurchaseOrderArgs[] | false, alias?: string  } 
  | { name: 'deletePurchaseOrder', args?: MutationDeletePurchaseOrderArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPurchaseOrders', args?: MutationDeleteManyPurchaseOrdersArgs[] | false, alias?: string  } 
  | { name: 'createPoReceipt', args?: MutationCreatePoReceiptArgs[] | false, alias?: string  } 
  | { name: 'updatePoReceipt', args?: MutationUpdatePoReceiptArgs[] | false, alias?: string  } 
  | { name: 'updateManyPoReceipts', args?: MutationUpdateManyPoReceiptsArgs[] | false, alias?: string  } 
  | { name: 'upsertPoReceipt', args?: MutationUpsertPoReceiptArgs[] | false, alias?: string  } 
  | { name: 'deletePoReceipt', args?: MutationDeletePoReceiptArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPoReceipts', args?: MutationDeleteManyPoReceiptsArgs[] | false, alias?: string  } 
  | { name: 'createInventoryOnHand', args?: MutationCreateInventoryOnHandArgs[] | false, alias?: string  } 
  | { name: 'updateInventoryOnHand', args?: MutationUpdateInventoryOnHandArgs[] | false, alias?: string  } 
  | { name: 'updateManyInventoryOnHands', args?: MutationUpdateManyInventoryOnHandsArgs[] | false, alias?: string  } 
  | { name: 'upsertInventoryOnHand', args?: MutationUpsertInventoryOnHandArgs[] | false, alias?: string  } 
  | { name: 'deleteInventoryOnHand', args?: MutationDeleteInventoryOnHandArgs[] | false, alias?: string  } 
  | { name: 'deleteManyInventoryOnHands', args?: MutationDeleteManyInventoryOnHandsArgs[] | false, alias?: string  } 
  | { name: 'createPurchaseOrderLine', args?: MutationCreatePurchaseOrderLineArgs[] | false, alias?: string  } 
  | { name: 'updatePurchaseOrderLine', args?: MutationUpdatePurchaseOrderLineArgs[] | false, alias?: string  } 
  | { name: 'updateManyPurchaseOrderLines', args?: MutationUpdateManyPurchaseOrderLinesArgs[] | false, alias?: string  } 
  | { name: 'upsertPurchaseOrderLine', args?: MutationUpsertPurchaseOrderLineArgs[] | false, alias?: string  } 
  | { name: 'deletePurchaseOrderLine', args?: MutationDeletePurchaseOrderLineArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPurchaseOrderLines', args?: MutationDeleteManyPurchaseOrderLinesArgs[] | false, alias?: string  } 
  | { name: 'createApInvoice', args?: MutationCreateApInvoiceArgs[] | false, alias?: string  } 
  | { name: 'updateApInvoice', args?: MutationUpdateApInvoiceArgs[] | false, alias?: string  } 
  | { name: 'updateManyApInvoices', args?: MutationUpdateManyApInvoicesArgs[] | false, alias?: string  } 
  | { name: 'upsertApInvoice', args?: MutationUpsertApInvoiceArgs[] | false, alias?: string  } 
  | { name: 'deleteApInvoice', args?: MutationDeleteApInvoiceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyApInvoices', args?: MutationDeleteManyApInvoicesArgs[] | false, alias?: string  } 
  | { name: 'createSalesOrder', args?: MutationCreateSalesOrderArgs[] | false, alias?: string  } 
  | { name: 'updateSalesOrder', args?: MutationUpdateSalesOrderArgs[] | false, alias?: string  } 
  | { name: 'updateManySalesOrders', args?: MutationUpdateManySalesOrdersArgs[] | false, alias?: string  } 
  | { name: 'upsertSalesOrder', args?: MutationUpsertSalesOrderArgs[] | false, alias?: string  } 
  | { name: 'deleteSalesOrder', args?: MutationDeleteSalesOrderArgs[] | false, alias?: string  } 
  | { name: 'deleteManySalesOrders', args?: MutationDeleteManySalesOrdersArgs[] | false, alias?: string  } 
  | { name: 'createSalesOrderLine', args?: MutationCreateSalesOrderLineArgs[] | false, alias?: string  } 
  | { name: 'updateSalesOrderLine', args?: MutationUpdateSalesOrderLineArgs[] | false, alias?: string  } 
  | { name: 'updateManySalesOrderLines', args?: MutationUpdateManySalesOrderLinesArgs[] | false, alias?: string  } 
  | { name: 'upsertSalesOrderLine', args?: MutationUpsertSalesOrderLineArgs[] | false, alias?: string  } 
  | { name: 'deleteSalesOrderLine', args?: MutationDeleteSalesOrderLineArgs[] | false, alias?: string  } 
  | { name: 'deleteManySalesOrderLines', args?: MutationDeleteManySalesOrderLinesArgs[] | false, alias?: string  } 
  | { name: 'createPredictedSalesValueByCompany', args?: MutationCreatePredictedSalesValueByCompanyArgs[] | false, alias?: string  } 
  | { name: 'updatePredictedSalesValueByCompany', args?: MutationUpdatePredictedSalesValueByCompanyArgs[] | false, alias?: string  } 
  | { name: 'updateManyPredictedSalesValueByCompanies', args?: MutationUpdateManyPredictedSalesValueByCompaniesArgs[] | false, alias?: string  } 
  | { name: 'upsertPredictedSalesValueByCompany', args?: MutationUpsertPredictedSalesValueByCompanyArgs[] | false, alias?: string  } 
  | { name: 'deletePredictedSalesValueByCompany', args?: MutationDeletePredictedSalesValueByCompanyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPredictedSalesValueByCompanies', args?: MutationDeleteManyPredictedSalesValueByCompaniesArgs[] | false, alias?: string  } 
  | { name: 'createPredictedSalesQuantityOfItemsByCompany', args?: MutationCreatePredictedSalesQuantityOfItemsByCompanyArgs[] | false, alias?: string  } 
  | { name: 'updatePredictedSalesQuantityOfItemsByCompany', args?: MutationUpdatePredictedSalesQuantityOfItemsByCompanyArgs[] | false, alias?: string  } 
  | { name: 'updateManyPredictedSalesQuantityOfItemsByCompanies', args?: MutationUpdateManyPredictedSalesQuantityOfItemsByCompaniesArgs[] | false, alias?: string  } 
  | { name: 'upsertPredictedSalesQuantityOfItemsByCompany', args?: MutationUpsertPredictedSalesQuantityOfItemsByCompanyArgs[] | false, alias?: string  } 
  | { name: 'deletePredictedSalesQuantityOfItemsByCompany', args?: MutationDeletePredictedSalesQuantityOfItemsByCompanyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPredictedSalesQuantityOfItemsByCompanies', args?: MutationDeleteManyPredictedSalesQuantityOfItemsByCompaniesArgs[] | false, alias?: string  } 
  | { name: 'createMedicareService', args?: MutationCreateMedicareServiceArgs[] | false, alias?: string  } 
  | { name: 'updateMedicareService', args?: MutationUpdateMedicareServiceArgs[] | false, alias?: string  } 
  | { name: 'updateManyMedicareServices', args?: MutationUpdateManyMedicareServicesArgs[] | false, alias?: string  } 
  | { name: 'upsertMedicareService', args?: MutationUpsertMedicareServiceArgs[] | false, alias?: string  } 
  | { name: 'deleteMedicareService', args?: MutationDeleteMedicareServiceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMedicareServices', args?: MutationDeleteManyMedicareServicesArgs[] | false, alias?: string  } 
  | { name: 'createPatient', args?: MutationCreatePatientArgs[] | false, alias?: string  } 
  | { name: 'updatePatient', args?: MutationUpdatePatientArgs[] | false, alias?: string  } 
  | { name: 'updateManyPatients', args?: MutationUpdateManyPatientsArgs[] | false, alias?: string  } 
  | { name: 'upsertPatient', args?: MutationUpsertPatientArgs[] | false, alias?: string  } 
  | { name: 'deletePatient', args?: MutationDeletePatientArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPatients', args?: MutationDeleteManyPatientsArgs[] | false, alias?: string  } 
  | { name: 'createName', args?: MutationCreateNameArgs[] | false, alias?: string  } 
  | { name: 'updateName', args?: MutationUpdateNameArgs[] | false, alias?: string  } 
  | { name: 'updateManyNames', args?: MutationUpdateManyNamesArgs[] | false, alias?: string  } 
  | { name: 'upsertName', args?: MutationUpsertNameArgs[] | false, alias?: string  } 
  | { name: 'deleteName', args?: MutationDeleteNameArgs[] | false, alias?: string  } 
  | { name: 'deleteManyNames', args?: MutationDeleteManyNamesArgs[] | false, alias?: string  } 
  | { name: 'createHealthcareProvider', args?: MutationCreateHealthcareProviderArgs[] | false, alias?: string  } 
  | { name: 'updateHealthcareProvider', args?: MutationUpdateHealthcareProviderArgs[] | false, alias?: string  } 
  | { name: 'updateManyHealthcareProviders', args?: MutationUpdateManyHealthcareProvidersArgs[] | false, alias?: string  } 
  | { name: 'upsertHealthcareProvider', args?: MutationUpsertHealthcareProviderArgs[] | false, alias?: string  } 
  | { name: 'deleteHealthcareProvider', args?: MutationDeleteHealthcareProviderArgs[] | false, alias?: string  } 
  | { name: 'deleteManyHealthcareProviders', args?: MutationDeleteManyHealthcareProvidersArgs[] | false, alias?: string  } 
  | { name: 'createImmunisationSchedule', args?: MutationCreateImmunisationScheduleArgs[] | false, alias?: string  } 
  | { name: 'updateImmunisationSchedule', args?: MutationUpdateImmunisationScheduleArgs[] | false, alias?: string  } 
  | { name: 'updateManyImmunisationSchedules', args?: MutationUpdateManyImmunisationSchedulesArgs[] | false, alias?: string  } 
  | { name: 'upsertImmunisationSchedule', args?: MutationUpsertImmunisationScheduleArgs[] | false, alias?: string  } 
  | { name: 'deleteImmunisationSchedule', args?: MutationDeleteImmunisationScheduleArgs[] | false, alias?: string  } 
  | { name: 'deleteManyImmunisationSchedules', args?: MutationDeleteManyImmunisationSchedulesArgs[] | false, alias?: string  } 
  | { name: 'createVaccineBrand', args?: MutationCreateVaccineBrandArgs[] | false, alias?: string  } 
  | { name: 'updateVaccineBrand', args?: MutationUpdateVaccineBrandArgs[] | false, alias?: string  } 
  | { name: 'updateManyVaccineBrands', args?: MutationUpdateManyVaccineBrandsArgs[] | false, alias?: string  } 
  | { name: 'upsertVaccineBrand', args?: MutationUpsertVaccineBrandArgs[] | false, alias?: string  } 
  | { name: 'deleteVaccineBrand', args?: MutationDeleteVaccineBrandArgs[] | false, alias?: string  } 
  | { name: 'deleteManyVaccineBrands', args?: MutationDeleteManyVaccineBrandsArgs[] | false, alias?: string  } 
  | { name: 'createDisease', args?: MutationCreateDiseaseArgs[] | false, alias?: string  } 
  | { name: 'updateDisease', args?: MutationUpdateDiseaseArgs[] | false, alias?: string  } 
  | { name: 'updateManyDiseases', args?: MutationUpdateManyDiseasesArgs[] | false, alias?: string  } 
  | { name: 'upsertDisease', args?: MutationUpsertDiseaseArgs[] | false, alias?: string  } 
  | { name: 'deleteDisease', args?: MutationDeleteDiseaseArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDiseases', args?: MutationDeleteManyDiseasesArgs[] | false, alias?: string  } 
  | { name: 'createHILog', args?: MutationCreateHILogArgs[] | false, alias?: string  } 
  | { name: 'updateHILog', args?: MutationUpdateHILogArgs[] | false, alias?: string  } 
  | { name: 'updateManyHILogs', args?: MutationUpdateManyHILogsArgs[] | false, alias?: string  } 
  | { name: 'upsertHILog', args?: MutationUpsertHILogArgs[] | false, alias?: string  } 
  | { name: 'deleteHILog', args?: MutationDeleteHILogArgs[] | false, alias?: string  } 
  | { name: 'deleteManyHILogs', args?: MutationDeleteManyHILogsArgs[] | false, alias?: string  } 
  | { name: 'createPbsOrganisation', args?: MutationCreatePbsOrganisationArgs[] | false, alias?: string  } 
  | { name: 'updatePbsOrganisation', args?: MutationUpdatePbsOrganisationArgs[] | false, alias?: string  } 
  | { name: 'updateManyPbsOrganisations', args?: MutationUpdateManyPbsOrganisationsArgs[] | false, alias?: string  } 
  | { name: 'upsertPbsOrganisation', args?: MutationUpsertPbsOrganisationArgs[] | false, alias?: string  } 
  | { name: 'deletePbsOrganisation', args?: MutationDeletePbsOrganisationArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPbsOrganisations', args?: MutationDeleteManyPbsOrganisationsArgs[] | false, alias?: string  } 
  | { name: 'createPbsTPP', args?: MutationCreatePbsTPPArgs[] | false, alias?: string  } 
  | { name: 'updatePbsTPP', args?: MutationUpdatePbsTPPArgs[] | false, alias?: string  } 
  | { name: 'updateManyPbsTPPs', args?: MutationUpdateManyPbsTPPsArgs[] | false, alias?: string  } 
  | { name: 'upsertPbsTPP', args?: MutationUpsertPbsTPPArgs[] | false, alias?: string  } 
  | { name: 'deletePbsTPP', args?: MutationDeletePbsTPPArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPbsTPPs', args?: MutationDeleteManyPbsTPPsArgs[] | false, alias?: string  } 
  | { name: 'createMeansTestedFee', args?: MutationCreateMeansTestedFeeArgs[] | false, alias?: string  } 
  | { name: 'updateMeansTestedFee', args?: MutationUpdateMeansTestedFeeArgs[] | false, alias?: string  } 
  | { name: 'updateManyMeansTestedFees', args?: MutationUpdateManyMeansTestedFeesArgs[] | false, alias?: string  } 
  | { name: 'upsertMeansTestedFee', args?: MutationUpsertMeansTestedFeeArgs[] | false, alias?: string  } 
  | { name: 'deleteMeansTestedFee', args?: MutationDeleteMeansTestedFeeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMeansTestedFees', args?: MutationDeleteManyMeansTestedFeesArgs[] | false, alias?: string  } 
  | { name: 'createMeansTestLimits', args?: MutationCreateMeansTestLimitsArgs[] | false, alias?: string  } 
  | { name: 'updateMeansTestLimits', args?: MutationUpdateMeansTestLimitsArgs[] | false, alias?: string  } 
  | { name: 'updateManyMeansTestLimitses', args?: MutationUpdateManyMeansTestLimitsesArgs[] | false, alias?: string  } 
  | { name: 'upsertMeansTestLimits', args?: MutationUpsertMeansTestLimitsArgs[] | false, alias?: string  } 
  | { name: 'deleteMeansTestLimits', args?: MutationDeleteMeansTestLimitsArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMeansTestLimitses', args?: MutationDeleteManyMeansTestLimitsesArgs[] | false, alias?: string  } 
  | { name: 'createBasicDailyFee', args?: MutationCreateBasicDailyFeeArgs[] | false, alias?: string  } 
  | { name: 'updateBasicDailyFee', args?: MutationUpdateBasicDailyFeeArgs[] | false, alias?: string  } 
  | { name: 'updateManyBasicDailyFees', args?: MutationUpdateManyBasicDailyFeesArgs[] | false, alias?: string  } 
  | { name: 'upsertBasicDailyFee', args?: MutationUpsertBasicDailyFeeArgs[] | false, alias?: string  } 
  | { name: 'deleteBasicDailyFee', args?: MutationDeleteBasicDailyFeeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyBasicDailyFees', args?: MutationDeleteManyBasicDailyFeesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createAddress'
  | 'updateAddress'
  | 'updateManyAddresses'
  | 'upsertAddress'
  | 'deleteAddress'
  | 'deleteManyAddresses'
  | 'createContact'
  | 'updateContact'
  | 'updateManyContacts'
  | 'upsertContact'
  | 'deleteContact'
  | 'deleteManyContacts'
  | 'createCompany'
  | 'updateCompany'
  | 'updateManyCompanies'
  | 'upsertCompany'
  | 'deleteCompany'
  | 'deleteManyCompanies'
  | 'createCompanyMember'
  | 'updateCompanyMember'
  | 'updateManyCompanyMembers'
  | 'upsertCompanyMember'
  | 'deleteCompanyMember'
  | 'deleteManyCompanyMembers'
  | 'createCustomer'
  | 'updateCustomer'
  | 'updateManyCustomers'
  | 'upsertCustomer'
  | 'deleteCustomer'
  | 'deleteManyCustomers'
  | 'createIntegration'
  | 'updateIntegration'
  | 'updateManyIntegrations'
  | 'upsertIntegration'
  | 'deleteIntegration'
  | 'deleteManyIntegrations'
  | 'createService'
  | 'updateService'
  | 'updateManyServices'
  | 'upsertService'
  | 'deleteService'
  | 'deleteManyServices'
  | 'createProject'
  | 'updateProject'
  | 'updateManyProjects'
  | 'upsertProject'
  | 'deleteProject'
  | 'deleteManyProjects'
  | 'createProjectService'
  | 'updateProjectService'
  | 'updateManyProjectServices'
  | 'upsertProjectService'
  | 'deleteProjectService'
  | 'deleteManyProjectServices'
  | 'createProjectServiceRule'
  | 'updateProjectServiceRule'
  | 'updateManyProjectServiceRules'
  | 'upsertProjectServiceRule'
  | 'deleteProjectServiceRule'
  | 'deleteManyProjectServiceRules'
  | 'createPlan'
  | 'updatePlan'
  | 'updateManyPlans'
  | 'upsertPlan'
  | 'deletePlan'
  | 'deleteManyPlans'
  | 'createSession'
  | 'updateSession'
  | 'updateManySessions'
  | 'upsertSession'
  | 'deleteSession'
  | 'deleteManySessions'
  | 'createTimeSheet'
  | 'updateTimeSheet'
  | 'updateManyTimeSheets'
  | 'upsertTimeSheet'
  | 'deleteTimeSheet'
  | 'deleteManyTimeSheets'
  | 'createAttachment'
  | 'updateAttachment'
  | 'updateManyAttachments'
  | 'upsertAttachment'
  | 'deleteAttachment'
  | 'deleteManyAttachments'
  | 'createTimeSheetEntry'
  | 'updateTimeSheetEntry'
  | 'updateManyTimeSheetEntries'
  | 'upsertTimeSheetEntry'
  | 'deleteTimeSheetEntry'
  | 'deleteManyTimeSheetEntries'
  | 'createInvoiceItemEntry'
  | 'updateInvoiceItemEntry'
  | 'updateManyInvoiceItemEntries'
  | 'upsertInvoiceItemEntry'
  | 'deleteInvoiceItemEntry'
  | 'deleteManyInvoiceItemEntries'
  | 'createInvoice'
  | 'updateInvoice'
  | 'updateManyInvoices'
  | 'upsertInvoice'
  | 'deleteInvoice'
  | 'deleteManyInvoices'
  | 'createMainAccount'
  | 'updateMainAccount'
  | 'updateManyMainAccounts'
  | 'upsertMainAccount'
  | 'deleteMainAccount'
  | 'deleteManyMainAccounts'
  | 'createLedgerJournal'
  | 'updateLedgerJournal'
  | 'updateManyLedgerJournals'
  | 'upsertLedgerJournal'
  | 'deleteLedgerJournal'
  | 'deleteManyLedgerJournals'
  | 'createLedgerTransaction'
  | 'updateLedgerTransaction'
  | 'updateManyLedgerTransactions'
  | 'upsertLedgerTransaction'
  | 'deleteLedgerTransaction'
  | 'deleteManyLedgerTransactions'
  | 'createLedgerPosting'
  | 'updateLedgerPosting'
  | 'updateManyLedgerPostings'
  | 'upsertLedgerPosting'
  | 'deleteLedgerPosting'
  | 'deleteManyLedgerPostings'
  | 'createBank'
  | 'updateBank'
  | 'updateManyBanks'
  | 'upsertBank'
  | 'deleteBank'
  | 'deleteManyBanks'
  | 'createBankTransaction'
  | 'updateBankTransaction'
  | 'updateManyBankTransactions'
  | 'upsertBankTransaction'
  | 'deleteBankTransaction'
  | 'deleteManyBankTransactions'
  | 'createWareHouse'
  | 'updateWareHouse'
  | 'updateManyWareHouses'
  | 'upsertWareHouse'
  | 'deleteWareHouse'
  | 'deleteManyWareHouses'
  | 'createInventory'
  | 'updateInventory'
  | 'updateManyInventories'
  | 'upsertInventory'
  | 'deleteInventory'
  | 'deleteManyInventories'
  | 'createSupplier'
  | 'updateSupplier'
  | 'updateManySuppliers'
  | 'upsertSupplier'
  | 'deleteSupplier'
  | 'deleteManySuppliers'
  | 'createAssetGroup'
  | 'updateAssetGroup'
  | 'updateManyAssetGroups'
  | 'upsertAssetGroup'
  | 'deleteAssetGroup'
  | 'deleteManyAssetGroups'
  | 'createAsset'
  | 'updateAsset'
  | 'updateManyAssets'
  | 'upsertAsset'
  | 'deleteAsset'
  | 'deleteManyAssets'
  | 'createPurchaseOrder'
  | 'updatePurchaseOrder'
  | 'updateManyPurchaseOrders'
  | 'upsertPurchaseOrder'
  | 'deletePurchaseOrder'
  | 'deleteManyPurchaseOrders'
  | 'createPoReceipt'
  | 'updatePoReceipt'
  | 'updateManyPoReceipts'
  | 'upsertPoReceipt'
  | 'deletePoReceipt'
  | 'deleteManyPoReceipts'
  | 'createInventoryOnHand'
  | 'updateInventoryOnHand'
  | 'updateManyInventoryOnHands'
  | 'upsertInventoryOnHand'
  | 'deleteInventoryOnHand'
  | 'deleteManyInventoryOnHands'
  | 'createPurchaseOrderLine'
  | 'updatePurchaseOrderLine'
  | 'updateManyPurchaseOrderLines'
  | 'upsertPurchaseOrderLine'
  | 'deletePurchaseOrderLine'
  | 'deleteManyPurchaseOrderLines'
  | 'createApInvoice'
  | 'updateApInvoice'
  | 'updateManyApInvoices'
  | 'upsertApInvoice'
  | 'deleteApInvoice'
  | 'deleteManyApInvoices'
  | 'createSalesOrder'
  | 'updateSalesOrder'
  | 'updateManySalesOrders'
  | 'upsertSalesOrder'
  | 'deleteSalesOrder'
  | 'deleteManySalesOrders'
  | 'createSalesOrderLine'
  | 'updateSalesOrderLine'
  | 'updateManySalesOrderLines'
  | 'upsertSalesOrderLine'
  | 'deleteSalesOrderLine'
  | 'deleteManySalesOrderLines'
  | 'createPredictedSalesValueByCompany'
  | 'updatePredictedSalesValueByCompany'
  | 'updateManyPredictedSalesValueByCompanies'
  | 'upsertPredictedSalesValueByCompany'
  | 'deletePredictedSalesValueByCompany'
  | 'deleteManyPredictedSalesValueByCompanies'
  | 'createPredictedSalesQuantityOfItemsByCompany'
  | 'updatePredictedSalesQuantityOfItemsByCompany'
  | 'updateManyPredictedSalesQuantityOfItemsByCompanies'
  | 'upsertPredictedSalesQuantityOfItemsByCompany'
  | 'deletePredictedSalesQuantityOfItemsByCompany'
  | 'deleteManyPredictedSalesQuantityOfItemsByCompanies'
  | 'createMedicareService'
  | 'updateMedicareService'
  | 'updateManyMedicareServices'
  | 'upsertMedicareService'
  | 'deleteMedicareService'
  | 'deleteManyMedicareServices'
  | 'createPatient'
  | 'updatePatient'
  | 'updateManyPatients'
  | 'upsertPatient'
  | 'deletePatient'
  | 'deleteManyPatients'
  | 'createName'
  | 'updateName'
  | 'updateManyNames'
  | 'upsertName'
  | 'deleteName'
  | 'deleteManyNames'
  | 'createHealthcareProvider'
  | 'updateHealthcareProvider'
  | 'updateManyHealthcareProviders'
  | 'upsertHealthcareProvider'
  | 'deleteHealthcareProvider'
  | 'deleteManyHealthcareProviders'
  | 'createImmunisationSchedule'
  | 'updateImmunisationSchedule'
  | 'updateManyImmunisationSchedules'
  | 'upsertImmunisationSchedule'
  | 'deleteImmunisationSchedule'
  | 'deleteManyImmunisationSchedules'
  | 'createVaccineBrand'
  | 'updateVaccineBrand'
  | 'updateManyVaccineBrands'
  | 'upsertVaccineBrand'
  | 'deleteVaccineBrand'
  | 'deleteManyVaccineBrands'
  | 'createDisease'
  | 'updateDisease'
  | 'updateManyDiseases'
  | 'upsertDisease'
  | 'deleteDisease'
  | 'deleteManyDiseases'
  | 'createHILog'
  | 'updateHILog'
  | 'updateManyHILogs'
  | 'upsertHILog'
  | 'deleteHILog'
  | 'deleteManyHILogs'
  | 'createPbsOrganisation'
  | 'updatePbsOrganisation'
  | 'updateManyPbsOrganisations'
  | 'upsertPbsOrganisation'
  | 'deletePbsOrganisation'
  | 'deleteManyPbsOrganisations'
  | 'createPbsTPP'
  | 'updatePbsTPP'
  | 'updateManyPbsTPPs'
  | 'upsertPbsTPP'
  | 'deletePbsTPP'
  | 'deleteManyPbsTPPs'
  | 'createMeansTestedFee'
  | 'updateMeansTestedFee'
  | 'updateManyMeansTestedFees'
  | 'upsertMeansTestedFee'
  | 'deleteMeansTestedFee'
  | 'deleteManyMeansTestedFees'
  | 'createMeansTestLimits'
  | 'updateMeansTestLimits'
  | 'updateManyMeansTestLimitses'
  | 'upsertMeansTestLimits'
  | 'deleteMeansTestLimits'
  | 'deleteManyMeansTestLimitses'
  | 'createBasicDailyFee'
  | 'updateBasicDailyFee'
  | 'updateManyBasicDailyFees'
  | 'upsertBasicDailyFee'
  | 'deleteBasicDailyFee'
  | 'deleteManyBasicDailyFees'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateAddressArgs =
  | 'data'
type MutationUpdateAddressArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAddressesArgs =
  | 'data'
  | 'where'
type MutationUpsertAddressArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAddressArgs =
  | 'where'
type MutationDeleteManyAddressesArgs =
  | 'where'
type MutationCreateContactArgs =
  | 'data'
type MutationUpdateContactArgs =
  | 'data'
  | 'where'
type MutationUpdateManyContactsArgs =
  | 'data'
  | 'where'
type MutationUpsertContactArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteContactArgs =
  | 'where'
type MutationDeleteManyContactsArgs =
  | 'where'
type MutationCreateCompanyArgs =
  | 'data'
type MutationUpdateCompanyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCompaniesArgs =
  | 'data'
  | 'where'
type MutationUpsertCompanyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCompanyArgs =
  | 'where'
type MutationDeleteManyCompaniesArgs =
  | 'where'
type MutationCreateCompanyMemberArgs =
  | 'data'
type MutationUpdateCompanyMemberArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCompanyMembersArgs =
  | 'data'
  | 'where'
type MutationUpsertCompanyMemberArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCompanyMemberArgs =
  | 'where'
type MutationDeleteManyCompanyMembersArgs =
  | 'where'
type MutationCreateCustomerArgs =
  | 'data'
type MutationUpdateCustomerArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCustomersArgs =
  | 'data'
  | 'where'
type MutationUpsertCustomerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCustomerArgs =
  | 'where'
type MutationDeleteManyCustomersArgs =
  | 'where'
type MutationCreateIntegrationArgs =
  | 'data'
type MutationUpdateIntegrationArgs =
  | 'data'
  | 'where'
type MutationUpdateManyIntegrationsArgs =
  | 'data'
  | 'where'
type MutationUpsertIntegrationArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteIntegrationArgs =
  | 'where'
type MutationDeleteManyIntegrationsArgs =
  | 'where'
type MutationCreateServiceArgs =
  | 'data'
type MutationUpdateServiceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyServicesArgs =
  | 'data'
  | 'where'
type MutationUpsertServiceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteServiceArgs =
  | 'where'
type MutationDeleteManyServicesArgs =
  | 'where'
type MutationCreateProjectArgs =
  | 'data'
type MutationUpdateProjectArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectsArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectArgs =
  | 'where'
type MutationDeleteManyProjectsArgs =
  | 'where'
type MutationCreateProjectServiceArgs =
  | 'data'
type MutationUpdateProjectServiceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectServicesArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectServiceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectServiceArgs =
  | 'where'
type MutationDeleteManyProjectServicesArgs =
  | 'where'
type MutationCreateProjectServiceRuleArgs =
  | 'data'
type MutationUpdateProjectServiceRuleArgs =
  | 'data'
  | 'where'
type MutationUpdateManyProjectServiceRulesArgs =
  | 'data'
  | 'where'
type MutationUpsertProjectServiceRuleArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteProjectServiceRuleArgs =
  | 'where'
type MutationDeleteManyProjectServiceRulesArgs =
  | 'where'
type MutationCreatePlanArgs =
  | 'data'
type MutationUpdatePlanArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPlansArgs =
  | 'data'
  | 'where'
type MutationUpsertPlanArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePlanArgs =
  | 'where'
type MutationDeleteManyPlansArgs =
  | 'where'
type MutationCreateSessionArgs =
  | 'data'
type MutationUpdateSessionArgs =
  | 'data'
  | 'where'
type MutationUpdateManySessionsArgs =
  | 'data'
  | 'where'
type MutationUpsertSessionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSessionArgs =
  | 'where'
type MutationDeleteManySessionsArgs =
  | 'where'
type MutationCreateTimeSheetArgs =
  | 'data'
type MutationUpdateTimeSheetArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTimeSheetsArgs =
  | 'data'
  | 'where'
type MutationUpsertTimeSheetArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTimeSheetArgs =
  | 'where'
type MutationDeleteManyTimeSheetsArgs =
  | 'where'
type MutationCreateAttachmentArgs =
  | 'data'
type MutationUpdateAttachmentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAttachmentsArgs =
  | 'data'
  | 'where'
type MutationUpsertAttachmentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAttachmentArgs =
  | 'where'
type MutationDeleteManyAttachmentsArgs =
  | 'where'
type MutationCreateTimeSheetEntryArgs =
  | 'data'
type MutationUpdateTimeSheetEntryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTimeSheetEntriesArgs =
  | 'data'
  | 'where'
type MutationUpsertTimeSheetEntryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTimeSheetEntryArgs =
  | 'where'
type MutationDeleteManyTimeSheetEntriesArgs =
  | 'where'
type MutationCreateInvoiceItemEntryArgs =
  | 'data'
type MutationUpdateInvoiceItemEntryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyInvoiceItemEntriesArgs =
  | 'data'
  | 'where'
type MutationUpsertInvoiceItemEntryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteInvoiceItemEntryArgs =
  | 'where'
type MutationDeleteManyInvoiceItemEntriesArgs =
  | 'where'
type MutationCreateInvoiceArgs =
  | 'data'
type MutationUpdateInvoiceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyInvoicesArgs =
  | 'data'
  | 'where'
type MutationUpsertInvoiceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteInvoiceArgs =
  | 'where'
type MutationDeleteManyInvoicesArgs =
  | 'where'
type MutationCreateMainAccountArgs =
  | 'data'
type MutationUpdateMainAccountArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMainAccountsArgs =
  | 'data'
  | 'where'
type MutationUpsertMainAccountArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMainAccountArgs =
  | 'where'
type MutationDeleteManyMainAccountsArgs =
  | 'where'
type MutationCreateLedgerJournalArgs =
  | 'data'
type MutationUpdateLedgerJournalArgs =
  | 'data'
  | 'where'
type MutationUpdateManyLedgerJournalsArgs =
  | 'data'
  | 'where'
type MutationUpsertLedgerJournalArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteLedgerJournalArgs =
  | 'where'
type MutationDeleteManyLedgerJournalsArgs =
  | 'where'
type MutationCreateLedgerTransactionArgs =
  | 'data'
type MutationUpdateLedgerTransactionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyLedgerTransactionsArgs =
  | 'data'
  | 'where'
type MutationUpsertLedgerTransactionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteLedgerTransactionArgs =
  | 'where'
type MutationDeleteManyLedgerTransactionsArgs =
  | 'where'
type MutationCreateLedgerPostingArgs =
  | 'data'
type MutationUpdateLedgerPostingArgs =
  | 'data'
  | 'where'
type MutationUpdateManyLedgerPostingsArgs =
  | 'data'
  | 'where'
type MutationUpsertLedgerPostingArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteLedgerPostingArgs =
  | 'where'
type MutationDeleteManyLedgerPostingsArgs =
  | 'where'
type MutationCreateBankArgs =
  | 'data'
type MutationUpdateBankArgs =
  | 'data'
  | 'where'
type MutationUpdateManyBanksArgs =
  | 'data'
  | 'where'
type MutationUpsertBankArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteBankArgs =
  | 'where'
type MutationDeleteManyBanksArgs =
  | 'where'
type MutationCreateBankTransactionArgs =
  | 'data'
type MutationUpdateBankTransactionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyBankTransactionsArgs =
  | 'data'
  | 'where'
type MutationUpsertBankTransactionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteBankTransactionArgs =
  | 'where'
type MutationDeleteManyBankTransactionsArgs =
  | 'where'
type MutationCreateWareHouseArgs =
  | 'data'
type MutationUpdateWareHouseArgs =
  | 'data'
  | 'where'
type MutationUpdateManyWareHousesArgs =
  | 'data'
  | 'where'
type MutationUpsertWareHouseArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteWareHouseArgs =
  | 'where'
type MutationDeleteManyWareHousesArgs =
  | 'where'
type MutationCreateInventoryArgs =
  | 'data'
type MutationUpdateInventoryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyInventoriesArgs =
  | 'data'
  | 'where'
type MutationUpsertInventoryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteInventoryArgs =
  | 'where'
type MutationDeleteManyInventoriesArgs =
  | 'where'
type MutationCreateSupplierArgs =
  | 'data'
type MutationUpdateSupplierArgs =
  | 'data'
  | 'where'
type MutationUpdateManySuppliersArgs =
  | 'data'
  | 'where'
type MutationUpsertSupplierArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSupplierArgs =
  | 'where'
type MutationDeleteManySuppliersArgs =
  | 'where'
type MutationCreateAssetGroupArgs =
  | 'data'
type MutationUpdateAssetGroupArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAssetGroupsArgs =
  | 'data'
  | 'where'
type MutationUpsertAssetGroupArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAssetGroupArgs =
  | 'where'
type MutationDeleteManyAssetGroupsArgs =
  | 'where'
type MutationCreateAssetArgs =
  | 'data'
type MutationUpdateAssetArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAssetsArgs =
  | 'data'
  | 'where'
type MutationUpsertAssetArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAssetArgs =
  | 'where'
type MutationDeleteManyAssetsArgs =
  | 'where'
type MutationCreatePurchaseOrderArgs =
  | 'data'
type MutationUpdatePurchaseOrderArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPurchaseOrdersArgs =
  | 'data'
  | 'where'
type MutationUpsertPurchaseOrderArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePurchaseOrderArgs =
  | 'where'
type MutationDeleteManyPurchaseOrdersArgs =
  | 'where'
type MutationCreatePoReceiptArgs =
  | 'data'
type MutationUpdatePoReceiptArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPoReceiptsArgs =
  | 'data'
  | 'where'
type MutationUpsertPoReceiptArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePoReceiptArgs =
  | 'where'
type MutationDeleteManyPoReceiptsArgs =
  | 'where'
type MutationCreateInventoryOnHandArgs =
  | 'data'
type MutationUpdateInventoryOnHandArgs =
  | 'data'
  | 'where'
type MutationUpdateManyInventoryOnHandsArgs =
  | 'data'
  | 'where'
type MutationUpsertInventoryOnHandArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteInventoryOnHandArgs =
  | 'where'
type MutationDeleteManyInventoryOnHandsArgs =
  | 'where'
type MutationCreatePurchaseOrderLineArgs =
  | 'data'
type MutationUpdatePurchaseOrderLineArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPurchaseOrderLinesArgs =
  | 'data'
  | 'where'
type MutationUpsertPurchaseOrderLineArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePurchaseOrderLineArgs =
  | 'where'
type MutationDeleteManyPurchaseOrderLinesArgs =
  | 'where'
type MutationCreateApInvoiceArgs =
  | 'data'
type MutationUpdateApInvoiceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyApInvoicesArgs =
  | 'data'
  | 'where'
type MutationUpsertApInvoiceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteApInvoiceArgs =
  | 'where'
type MutationDeleteManyApInvoicesArgs =
  | 'where'
type MutationCreateSalesOrderArgs =
  | 'data'
type MutationUpdateSalesOrderArgs =
  | 'data'
  | 'where'
type MutationUpdateManySalesOrdersArgs =
  | 'data'
  | 'where'
type MutationUpsertSalesOrderArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSalesOrderArgs =
  | 'where'
type MutationDeleteManySalesOrdersArgs =
  | 'where'
type MutationCreateSalesOrderLineArgs =
  | 'data'
type MutationUpdateSalesOrderLineArgs =
  | 'data'
  | 'where'
type MutationUpdateManySalesOrderLinesArgs =
  | 'data'
  | 'where'
type MutationUpsertSalesOrderLineArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSalesOrderLineArgs =
  | 'where'
type MutationDeleteManySalesOrderLinesArgs =
  | 'where'
type MutationCreatePredictedSalesValueByCompanyArgs =
  | 'data'
type MutationUpdatePredictedSalesValueByCompanyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPredictedSalesValueByCompaniesArgs =
  | 'data'
  | 'where'
type MutationUpsertPredictedSalesValueByCompanyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePredictedSalesValueByCompanyArgs =
  | 'where'
type MutationDeleteManyPredictedSalesValueByCompaniesArgs =
  | 'where'
type MutationCreatePredictedSalesQuantityOfItemsByCompanyArgs =
  | 'data'
type MutationUpdatePredictedSalesQuantityOfItemsByCompanyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPredictedSalesQuantityOfItemsByCompaniesArgs =
  | 'data'
  | 'where'
type MutationUpsertPredictedSalesQuantityOfItemsByCompanyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePredictedSalesQuantityOfItemsByCompanyArgs =
  | 'where'
type MutationDeleteManyPredictedSalesQuantityOfItemsByCompaniesArgs =
  | 'where'
type MutationCreateMedicareServiceArgs =
  | 'data'
type MutationUpdateMedicareServiceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMedicareServicesArgs =
  | 'data'
  | 'where'
type MutationUpsertMedicareServiceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMedicareServiceArgs =
  | 'where'
type MutationDeleteManyMedicareServicesArgs =
  | 'where'
type MutationCreatePatientArgs =
  | 'data'
type MutationUpdatePatientArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPatientsArgs =
  | 'data'
  | 'where'
type MutationUpsertPatientArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePatientArgs =
  | 'where'
type MutationDeleteManyPatientsArgs =
  | 'where'
type MutationCreateNameArgs =
  | 'data'
type MutationUpdateNameArgs =
  | 'data'
  | 'where'
type MutationUpdateManyNamesArgs =
  | 'data'
  | 'where'
type MutationUpsertNameArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteNameArgs =
  | 'where'
type MutationDeleteManyNamesArgs =
  | 'where'
type MutationCreateHealthcareProviderArgs =
  | 'data'
type MutationUpdateHealthcareProviderArgs =
  | 'data'
  | 'where'
type MutationUpdateManyHealthcareProvidersArgs =
  | 'data'
  | 'where'
type MutationUpsertHealthcareProviderArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteHealthcareProviderArgs =
  | 'where'
type MutationDeleteManyHealthcareProvidersArgs =
  | 'where'
type MutationCreateImmunisationScheduleArgs =
  | 'data'
type MutationUpdateImmunisationScheduleArgs =
  | 'data'
  | 'where'
type MutationUpdateManyImmunisationSchedulesArgs =
  | 'data'
  | 'where'
type MutationUpsertImmunisationScheduleArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteImmunisationScheduleArgs =
  | 'where'
type MutationDeleteManyImmunisationSchedulesArgs =
  | 'where'
type MutationCreateVaccineBrandArgs =
  | 'data'
type MutationUpdateVaccineBrandArgs =
  | 'data'
  | 'where'
type MutationUpdateManyVaccineBrandsArgs =
  | 'data'
  | 'where'
type MutationUpsertVaccineBrandArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteVaccineBrandArgs =
  | 'where'
type MutationDeleteManyVaccineBrandsArgs =
  | 'where'
type MutationCreateDiseaseArgs =
  | 'data'
type MutationUpdateDiseaseArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDiseasesArgs =
  | 'data'
  | 'where'
type MutationUpsertDiseaseArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDiseaseArgs =
  | 'where'
type MutationDeleteManyDiseasesArgs =
  | 'where'
type MutationCreateHILogArgs =
  | 'data'
type MutationUpdateHILogArgs =
  | 'data'
  | 'where'
type MutationUpdateManyHILogsArgs =
  | 'data'
  | 'where'
type MutationUpsertHILogArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteHILogArgs =
  | 'where'
type MutationDeleteManyHILogsArgs =
  | 'where'
type MutationCreatePbsOrganisationArgs =
  | 'data'
type MutationUpdatePbsOrganisationArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPbsOrganisationsArgs =
  | 'data'
  | 'where'
type MutationUpsertPbsOrganisationArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePbsOrganisationArgs =
  | 'where'
type MutationDeleteManyPbsOrganisationsArgs =
  | 'where'
type MutationCreatePbsTPPArgs =
  | 'data'
type MutationUpdatePbsTPPArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPbsTPPsArgs =
  | 'data'
  | 'where'
type MutationUpsertPbsTPPArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePbsTPPArgs =
  | 'where'
type MutationDeleteManyPbsTPPsArgs =
  | 'where'
type MutationCreateMeansTestedFeeArgs =
  | 'data'
type MutationUpdateMeansTestedFeeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMeansTestedFeesArgs =
  | 'data'
  | 'where'
type MutationUpsertMeansTestedFeeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMeansTestedFeeArgs =
  | 'where'
type MutationDeleteManyMeansTestedFeesArgs =
  | 'where'
type MutationCreateMeansTestLimitsArgs =
  | 'data'
type MutationUpdateMeansTestLimitsArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMeansTestLimitsesArgs =
  | 'data'
  | 'where'
type MutationUpsertMeansTestLimitsArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMeansTestLimitsArgs =
  | 'where'
type MutationDeleteManyMeansTestLimitsesArgs =
  | 'where'
type MutationCreateBasicDailyFeeArgs =
  | 'data'
type MutationUpdateBasicDailyFeeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyBasicDailyFeesArgs =
  | 'data'
  | 'where'
type MutationUpsertBasicDailyFeeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteBasicDailyFeeArgs =
  | 'where'
type MutationDeleteManyBasicDailyFeesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAddress: {
    type: 'Address'
    args: Record<MutationCreateAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AddressCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address> | prisma.Address
  }
  updateAddress: {
    type: 'Address'
    args: Record<MutationUpdateAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AddressUpdateInput, where: AddressWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  updateManyAddresses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AddressUpdateManyMutationInput, where?: AddressWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAddress: {
    type: 'Address'
    args: Record<MutationUpsertAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AddressWhereUniqueInput, create: AddressCreateInput, update: AddressUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address> | prisma.Address
  }
  deleteAddress: {
    type: 'Address'
    args: Record<MutationDeleteAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AddressWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  deleteManyAddresses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AddressWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createContact: {
    type: 'Contact'
    args: Record<MutationCreateContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContactCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact> | prisma.Contact
  }
  updateContact: {
    type: 'Contact'
    args: Record<MutationUpdateContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContactUpdateInput, where: ContactWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  updateManyContacts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyContactsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ContactUpdateManyMutationInput, where?: ContactWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertContact: {
    type: 'Contact'
    args: Record<MutationUpsertContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ContactWhereUniqueInput, create: ContactCreateInput, update: ContactUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact> | prisma.Contact
  }
  deleteContact: {
    type: 'Contact'
    args: Record<MutationDeleteContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ContactWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  deleteManyContacts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyContactsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ContactWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCompany: {
    type: 'Company'
    args: Record<MutationCreateCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  updateCompany: {
    type: 'Company'
    args: Record<MutationUpdateCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyUpdateInput, where: CompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  updateManyCompanies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyUpdateManyMutationInput, where?: CompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCompany: {
    type: 'Company'
    args: Record<MutationUpsertCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CompanyWhereUniqueInput, create: CompanyCreateInput, update: CompanyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company> | prisma.Company
  }
  deleteCompany: {
    type: 'Company'
    args: Record<MutationDeleteCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  deleteManyCompanies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCompanyMember: {
    type: 'CompanyMember'
    args: Record<MutationCreateCompanyMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyMemberCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMember> | prisma.CompanyMember
  }
  updateCompanyMember: {
    type: 'CompanyMember'
    args: Record<MutationUpdateCompanyMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyMemberUpdateInput, where: CompanyMemberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMember | null> | prisma.CompanyMember | null
  }
  updateManyCompanyMembers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCompanyMembersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CompanyMemberUpdateManyMutationInput, where?: CompanyMemberWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCompanyMember: {
    type: 'CompanyMember'
    args: Record<MutationUpsertCompanyMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CompanyMemberWhereUniqueInput, create: CompanyMemberCreateInput, update: CompanyMemberUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMember> | prisma.CompanyMember
  }
  deleteCompanyMember: {
    type: 'CompanyMember'
    args: Record<MutationDeleteCompanyMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CompanyMemberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMember | null> | prisma.CompanyMember | null
  }
  deleteManyCompanyMembers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCompanyMembersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CompanyMemberWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCustomer: {
    type: 'Customer'
    args: Record<MutationCreateCustomerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CustomerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer> | prisma.Customer
  }
  updateCustomer: {
    type: 'Customer'
    args: Record<MutationUpdateCustomerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CustomerUpdateInput, where: CustomerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer | null> | prisma.Customer | null
  }
  updateManyCustomers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCustomersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CustomerUpdateManyMutationInput, where?: CustomerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCustomer: {
    type: 'Customer'
    args: Record<MutationUpsertCustomerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CustomerWhereUniqueInput, create: CustomerCreateInput, update: CustomerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer> | prisma.Customer
  }
  deleteCustomer: {
    type: 'Customer'
    args: Record<MutationDeleteCustomerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CustomerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer | null> | prisma.Customer | null
  }
  deleteManyCustomers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCustomersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CustomerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createIntegration: {
    type: 'Integration'
    args: Record<MutationCreateIntegrationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: IntegrationCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Integration> | prisma.Integration
  }
  updateIntegration: {
    type: 'Integration'
    args: Record<MutationUpdateIntegrationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: IntegrationUpdateInput, where: IntegrationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Integration | null> | prisma.Integration | null
  }
  updateManyIntegrations: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyIntegrationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: IntegrationUpdateManyMutationInput, where?: IntegrationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertIntegration: {
    type: 'Integration'
    args: Record<MutationUpsertIntegrationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: IntegrationWhereUniqueInput, create: IntegrationCreateInput, update: IntegrationUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Integration> | prisma.Integration
  }
  deleteIntegration: {
    type: 'Integration'
    args: Record<MutationDeleteIntegrationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: IntegrationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Integration | null> | prisma.Integration | null
  }
  deleteManyIntegrations: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyIntegrationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: IntegrationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createService: {
    type: 'Service'
    args: Record<MutationCreateServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ServiceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service> | prisma.Service
  }
  updateService: {
    type: 'Service'
    args: Record<MutationUpdateServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ServiceUpdateInput, where: ServiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service | null> | prisma.Service | null
  }
  updateManyServices: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyServicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ServiceUpdateManyMutationInput, where?: ServiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertService: {
    type: 'Service'
    args: Record<MutationUpsertServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ServiceWhereUniqueInput, create: ServiceCreateInput, update: ServiceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service> | prisma.Service
  }
  deleteService: {
    type: 'Service'
    args: Record<MutationDeleteServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ServiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service | null> | prisma.Service | null
  }
  deleteManyServices: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyServicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ServiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProject: {
    type: 'Project'
    args: Record<MutationCreateProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  updateProject: {
    type: 'Project'
    args: Record<MutationUpdateProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectUpdateInput, where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  updateManyProjects: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectUpdateManyMutationInput, where?: ProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProject: {
    type: 'Project'
    args: Record<MutationUpsertProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectWhereUniqueInput, create: ProjectCreateInput, update: ProjectUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project> | prisma.Project
  }
  deleteProject: {
    type: 'Project'
    args: Record<MutationDeleteProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  deleteManyProjects: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectService: {
    type: 'ProjectService'
    args: Record<MutationCreateProjectServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectServiceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectService> | prisma.ProjectService
  }
  updateProjectService: {
    type: 'ProjectService'
    args: Record<MutationUpdateProjectServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectServiceUpdateInput, where: ProjectServiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectService | null> | prisma.ProjectService | null
  }
  updateManyProjectServices: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectServicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectServiceUpdateManyMutationInput, where?: ProjectServiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectService: {
    type: 'ProjectService'
    args: Record<MutationUpsertProjectServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectServiceWhereUniqueInput, create: ProjectServiceCreateInput, update: ProjectServiceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectService> | prisma.ProjectService
  }
  deleteProjectService: {
    type: 'ProjectService'
    args: Record<MutationDeleteProjectServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectServiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectService | null> | prisma.ProjectService | null
  }
  deleteManyProjectServices: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectServicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectServiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createProjectServiceRule: {
    type: 'ProjectServiceRule'
    args: Record<MutationCreateProjectServiceRuleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectServiceRuleCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRule> | prisma.ProjectServiceRule
  }
  updateProjectServiceRule: {
    type: 'ProjectServiceRule'
    args: Record<MutationUpdateProjectServiceRuleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectServiceRuleUpdateInput, where: ProjectServiceRuleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRule | null> | prisma.ProjectServiceRule | null
  }
  updateManyProjectServiceRules: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyProjectServiceRulesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ProjectServiceRuleUpdateManyMutationInput, where?: ProjectServiceRuleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertProjectServiceRule: {
    type: 'ProjectServiceRule'
    args: Record<MutationUpsertProjectServiceRuleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectServiceRuleWhereUniqueInput, create: ProjectServiceRuleCreateInput, update: ProjectServiceRuleUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRule> | prisma.ProjectServiceRule
  }
  deleteProjectServiceRule: {
    type: 'ProjectServiceRule'
    args: Record<MutationDeleteProjectServiceRuleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ProjectServiceRuleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRule | null> | prisma.ProjectServiceRule | null
  }
  deleteManyProjectServiceRules: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyProjectServiceRulesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ProjectServiceRuleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPlan: {
    type: 'Plan'
    args: Record<MutationCreatePlanArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlanCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Plan> | prisma.Plan
  }
  updatePlan: {
    type: 'Plan'
    args: Record<MutationUpdatePlanArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlanUpdateInput, where: PlanWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Plan | null> | prisma.Plan | null
  }
  updateManyPlans: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPlansArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlanUpdateManyMutationInput, where?: PlanWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPlan: {
    type: 'Plan'
    args: Record<MutationUpsertPlanArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PlanWhereUniqueInput, create: PlanCreateInput, update: PlanUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Plan> | prisma.Plan
  }
  deletePlan: {
    type: 'Plan'
    args: Record<MutationDeletePlanArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PlanWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Plan | null> | prisma.Plan | null
  }
  deleteManyPlans: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPlansArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PlanWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSession: {
    type: 'Session'
    args: Record<MutationCreateSessionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SessionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Session> | prisma.Session
  }
  updateSession: {
    type: 'Session'
    args: Record<MutationUpdateSessionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SessionUpdateInput, where: SessionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Session | null> | prisma.Session | null
  }
  updateManySessions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySessionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SessionUpdateManyMutationInput, where?: SessionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSession: {
    type: 'Session'
    args: Record<MutationUpsertSessionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SessionWhereUniqueInput, create: SessionCreateInput, update: SessionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Session> | prisma.Session
  }
  deleteSession: {
    type: 'Session'
    args: Record<MutationDeleteSessionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SessionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Session | null> | prisma.Session | null
  }
  deleteManySessions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySessionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SessionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTimeSheet: {
    type: 'TimeSheet'
    args: Record<MutationCreateTimeSheetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TimeSheetCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheet> | prisma.TimeSheet
  }
  updateTimeSheet: {
    type: 'TimeSheet'
    args: Record<MutationUpdateTimeSheetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TimeSheetUpdateInput, where: TimeSheetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheet | null> | prisma.TimeSheet | null
  }
  updateManyTimeSheets: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTimeSheetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TimeSheetUpdateManyMutationInput, where?: TimeSheetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTimeSheet: {
    type: 'TimeSheet'
    args: Record<MutationUpsertTimeSheetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TimeSheetWhereUniqueInput, create: TimeSheetCreateInput, update: TimeSheetUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheet> | prisma.TimeSheet
  }
  deleteTimeSheet: {
    type: 'TimeSheet'
    args: Record<MutationDeleteTimeSheetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TimeSheetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheet | null> | prisma.TimeSheet | null
  }
  deleteManyTimeSheets: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTimeSheetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TimeSheetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAttachment: {
    type: 'Attachment'
    args: Record<MutationCreateAttachmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AttachmentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment> | prisma.Attachment
  }
  updateAttachment: {
    type: 'Attachment'
    args: Record<MutationUpdateAttachmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AttachmentUpdateInput, where: AttachmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment | null> | prisma.Attachment | null
  }
  updateManyAttachments: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAttachmentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AttachmentUpdateManyMutationInput, where?: AttachmentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAttachment: {
    type: 'Attachment'
    args: Record<MutationUpsertAttachmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AttachmentWhereUniqueInput, create: AttachmentCreateInput, update: AttachmentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment> | prisma.Attachment
  }
  deleteAttachment: {
    type: 'Attachment'
    args: Record<MutationDeleteAttachmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AttachmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment | null> | prisma.Attachment | null
  }
  deleteManyAttachments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAttachmentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AttachmentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTimeSheetEntry: {
    type: 'TimeSheetEntry'
    args: Record<MutationCreateTimeSheetEntryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TimeSheetEntryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntry> | prisma.TimeSheetEntry
  }
  updateTimeSheetEntry: {
    type: 'TimeSheetEntry'
    args: Record<MutationUpdateTimeSheetEntryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TimeSheetEntryUpdateInput, where: TimeSheetEntryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntry | null> | prisma.TimeSheetEntry | null
  }
  updateManyTimeSheetEntries: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTimeSheetEntriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TimeSheetEntryUpdateManyMutationInput, where?: TimeSheetEntryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTimeSheetEntry: {
    type: 'TimeSheetEntry'
    args: Record<MutationUpsertTimeSheetEntryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TimeSheetEntryWhereUniqueInput, create: TimeSheetEntryCreateInput, update: TimeSheetEntryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntry> | prisma.TimeSheetEntry
  }
  deleteTimeSheetEntry: {
    type: 'TimeSheetEntry'
    args: Record<MutationDeleteTimeSheetEntryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TimeSheetEntryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntry | null> | prisma.TimeSheetEntry | null
  }
  deleteManyTimeSheetEntries: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTimeSheetEntriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TimeSheetEntryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createInvoiceItemEntry: {
    type: 'InvoiceItemEntry'
    args: Record<MutationCreateInvoiceItemEntryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InvoiceItemEntryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntry> | prisma.InvoiceItemEntry
  }
  updateInvoiceItemEntry: {
    type: 'InvoiceItemEntry'
    args: Record<MutationUpdateInvoiceItemEntryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InvoiceItemEntryUpdateInput, where: InvoiceItemEntryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntry | null> | prisma.InvoiceItemEntry | null
  }
  updateManyInvoiceItemEntries: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyInvoiceItemEntriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InvoiceItemEntryUpdateManyMutationInput, where?: InvoiceItemEntryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertInvoiceItemEntry: {
    type: 'InvoiceItemEntry'
    args: Record<MutationUpsertInvoiceItemEntryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InvoiceItemEntryWhereUniqueInput, create: InvoiceItemEntryCreateInput, update: InvoiceItemEntryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntry> | prisma.InvoiceItemEntry
  }
  deleteInvoiceItemEntry: {
    type: 'InvoiceItemEntry'
    args: Record<MutationDeleteInvoiceItemEntryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InvoiceItemEntryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntry | null> | prisma.InvoiceItemEntry | null
  }
  deleteManyInvoiceItemEntries: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyInvoiceItemEntriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: InvoiceItemEntryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createInvoice: {
    type: 'Invoice'
    args: Record<MutationCreateInvoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InvoiceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Invoice> | prisma.Invoice
  }
  updateInvoice: {
    type: 'Invoice'
    args: Record<MutationUpdateInvoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InvoiceUpdateInput, where: InvoiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Invoice | null> | prisma.Invoice | null
  }
  updateManyInvoices: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyInvoicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InvoiceUpdateManyMutationInput, where?: InvoiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertInvoice: {
    type: 'Invoice'
    args: Record<MutationUpsertInvoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InvoiceWhereUniqueInput, create: InvoiceCreateInput, update: InvoiceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Invoice> | prisma.Invoice
  }
  deleteInvoice: {
    type: 'Invoice'
    args: Record<MutationDeleteInvoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InvoiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Invoice | null> | prisma.Invoice | null
  }
  deleteManyInvoices: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyInvoicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: InvoiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMainAccount: {
    type: 'MainAccount'
    args: Record<MutationCreateMainAccountArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MainAccountCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccount> | prisma.MainAccount
  }
  updateMainAccount: {
    type: 'MainAccount'
    args: Record<MutationUpdateMainAccountArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MainAccountUpdateInput, where: MainAccountWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccount | null> | prisma.MainAccount | null
  }
  updateManyMainAccounts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMainAccountsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MainAccountUpdateManyMutationInput, where?: MainAccountWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMainAccount: {
    type: 'MainAccount'
    args: Record<MutationUpsertMainAccountArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MainAccountWhereUniqueInput, create: MainAccountCreateInput, update: MainAccountUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccount> | prisma.MainAccount
  }
  deleteMainAccount: {
    type: 'MainAccount'
    args: Record<MutationDeleteMainAccountArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MainAccountWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccount | null> | prisma.MainAccount | null
  }
  deleteManyMainAccounts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMainAccountsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MainAccountWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createLedgerJournal: {
    type: 'LedgerJournal'
    args: Record<MutationCreateLedgerJournalArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LedgerJournalCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournal> | prisma.LedgerJournal
  }
  updateLedgerJournal: {
    type: 'LedgerJournal'
    args: Record<MutationUpdateLedgerJournalArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LedgerJournalUpdateInput, where: LedgerJournalWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournal | null> | prisma.LedgerJournal | null
  }
  updateManyLedgerJournals: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyLedgerJournalsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LedgerJournalUpdateManyMutationInput, where?: LedgerJournalWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertLedgerJournal: {
    type: 'LedgerJournal'
    args: Record<MutationUpsertLedgerJournalArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LedgerJournalWhereUniqueInput, create: LedgerJournalCreateInput, update: LedgerJournalUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournal> | prisma.LedgerJournal
  }
  deleteLedgerJournal: {
    type: 'LedgerJournal'
    args: Record<MutationDeleteLedgerJournalArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LedgerJournalWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournal | null> | prisma.LedgerJournal | null
  }
  deleteManyLedgerJournals: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyLedgerJournalsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: LedgerJournalWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createLedgerTransaction: {
    type: 'LedgerTransaction'
    args: Record<MutationCreateLedgerTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LedgerTransactionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerTransaction> | prisma.LedgerTransaction
  }
  updateLedgerTransaction: {
    type: 'LedgerTransaction'
    args: Record<MutationUpdateLedgerTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LedgerTransactionUpdateInput, where: LedgerTransactionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerTransaction | null> | prisma.LedgerTransaction | null
  }
  updateManyLedgerTransactions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyLedgerTransactionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LedgerTransactionUpdateManyMutationInput, where?: LedgerTransactionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertLedgerTransaction: {
    type: 'LedgerTransaction'
    args: Record<MutationUpsertLedgerTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LedgerTransactionWhereUniqueInput, create: LedgerTransactionCreateInput, update: LedgerTransactionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerTransaction> | prisma.LedgerTransaction
  }
  deleteLedgerTransaction: {
    type: 'LedgerTransaction'
    args: Record<MutationDeleteLedgerTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LedgerTransactionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerTransaction | null> | prisma.LedgerTransaction | null
  }
  deleteManyLedgerTransactions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyLedgerTransactionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: LedgerTransactionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createLedgerPosting: {
    type: 'LedgerPosting'
    args: Record<MutationCreateLedgerPostingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LedgerPostingCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerPosting> | prisma.LedgerPosting
  }
  updateLedgerPosting: {
    type: 'LedgerPosting'
    args: Record<MutationUpdateLedgerPostingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LedgerPostingUpdateInput, where: LedgerPostingWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerPosting | null> | prisma.LedgerPosting | null
  }
  updateManyLedgerPostings: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyLedgerPostingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LedgerPostingUpdateManyMutationInput, where?: LedgerPostingWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertLedgerPosting: {
    type: 'LedgerPosting'
    args: Record<MutationUpsertLedgerPostingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LedgerPostingWhereUniqueInput, create: LedgerPostingCreateInput, update: LedgerPostingUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerPosting> | prisma.LedgerPosting
  }
  deleteLedgerPosting: {
    type: 'LedgerPosting'
    args: Record<MutationDeleteLedgerPostingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LedgerPostingWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerPosting | null> | prisma.LedgerPosting | null
  }
  deleteManyLedgerPostings: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyLedgerPostingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: LedgerPostingWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createBank: {
    type: 'Bank'
    args: Record<MutationCreateBankArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BankCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bank> | prisma.Bank
  }
  updateBank: {
    type: 'Bank'
    args: Record<MutationUpdateBankArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BankUpdateInput, where: BankWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bank | null> | prisma.Bank | null
  }
  updateManyBanks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyBanksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BankUpdateManyMutationInput, where?: BankWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertBank: {
    type: 'Bank'
    args: Record<MutationUpsertBankArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BankWhereUniqueInput, create: BankCreateInput, update: BankUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bank> | prisma.Bank
  }
  deleteBank: {
    type: 'Bank'
    args: Record<MutationDeleteBankArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BankWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bank | null> | prisma.Bank | null
  }
  deleteManyBanks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyBanksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: BankWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createBankTransaction: {
    type: 'BankTransaction'
    args: Record<MutationCreateBankTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BankTransactionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankTransaction> | prisma.BankTransaction
  }
  updateBankTransaction: {
    type: 'BankTransaction'
    args: Record<MutationUpdateBankTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BankTransactionUpdateInput, where: BankTransactionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankTransaction | null> | prisma.BankTransaction | null
  }
  updateManyBankTransactions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyBankTransactionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BankTransactionUpdateManyMutationInput, where?: BankTransactionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertBankTransaction: {
    type: 'BankTransaction'
    args: Record<MutationUpsertBankTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BankTransactionWhereUniqueInput, create: BankTransactionCreateInput, update: BankTransactionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankTransaction> | prisma.BankTransaction
  }
  deleteBankTransaction: {
    type: 'BankTransaction'
    args: Record<MutationDeleteBankTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BankTransactionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankTransaction | null> | prisma.BankTransaction | null
  }
  deleteManyBankTransactions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyBankTransactionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: BankTransactionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createWareHouse: {
    type: 'WareHouse'
    args: Record<MutationCreateWareHouseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WareHouseCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouse> | prisma.WareHouse
  }
  updateWareHouse: {
    type: 'WareHouse'
    args: Record<MutationUpdateWareHouseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WareHouseUpdateInput, where: WareHouseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouse | null> | prisma.WareHouse | null
  }
  updateManyWareHouses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyWareHousesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: WareHouseUpdateManyMutationInput, where?: WareHouseWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertWareHouse: {
    type: 'WareHouse'
    args: Record<MutationUpsertWareHouseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: WareHouseWhereUniqueInput, create: WareHouseCreateInput, update: WareHouseUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouse> | prisma.WareHouse
  }
  deleteWareHouse: {
    type: 'WareHouse'
    args: Record<MutationDeleteWareHouseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: WareHouseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouse | null> | prisma.WareHouse | null
  }
  deleteManyWareHouses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyWareHousesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: WareHouseWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createInventory: {
    type: 'Inventory'
    args: Record<MutationCreateInventoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InventoryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inventory> | prisma.Inventory
  }
  updateInventory: {
    type: 'Inventory'
    args: Record<MutationUpdateInventoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InventoryUpdateInput, where: InventoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inventory | null> | prisma.Inventory | null
  }
  updateManyInventories: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyInventoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InventoryUpdateManyMutationInput, where?: InventoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertInventory: {
    type: 'Inventory'
    args: Record<MutationUpsertInventoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InventoryWhereUniqueInput, create: InventoryCreateInput, update: InventoryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inventory> | prisma.Inventory
  }
  deleteInventory: {
    type: 'Inventory'
    args: Record<MutationDeleteInventoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InventoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inventory | null> | prisma.Inventory | null
  }
  deleteManyInventories: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyInventoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: InventoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSupplier: {
    type: 'Supplier'
    args: Record<MutationCreateSupplierArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SupplierCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Supplier> | prisma.Supplier
  }
  updateSupplier: {
    type: 'Supplier'
    args: Record<MutationUpdateSupplierArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SupplierUpdateInput, where: SupplierWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Supplier | null> | prisma.Supplier | null
  }
  updateManySuppliers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySuppliersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SupplierUpdateManyMutationInput, where?: SupplierWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSupplier: {
    type: 'Supplier'
    args: Record<MutationUpsertSupplierArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SupplierWhereUniqueInput, create: SupplierCreateInput, update: SupplierUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Supplier> | prisma.Supplier
  }
  deleteSupplier: {
    type: 'Supplier'
    args: Record<MutationDeleteSupplierArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SupplierWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Supplier | null> | prisma.Supplier | null
  }
  deleteManySuppliers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySuppliersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SupplierWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAssetGroup: {
    type: 'AssetGroup'
    args: Record<MutationCreateAssetGroupArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AssetGroupCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroup> | prisma.AssetGroup
  }
  updateAssetGroup: {
    type: 'AssetGroup'
    args: Record<MutationUpdateAssetGroupArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AssetGroupUpdateInput, where: AssetGroupWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroup | null> | prisma.AssetGroup | null
  }
  updateManyAssetGroups: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAssetGroupsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AssetGroupUpdateManyMutationInput, where?: AssetGroupWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAssetGroup: {
    type: 'AssetGroup'
    args: Record<MutationUpsertAssetGroupArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AssetGroupWhereUniqueInput, create: AssetGroupCreateInput, update: AssetGroupUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroup> | prisma.AssetGroup
  }
  deleteAssetGroup: {
    type: 'AssetGroup'
    args: Record<MutationDeleteAssetGroupArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AssetGroupWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroup | null> | prisma.AssetGroup | null
  }
  deleteManyAssetGroups: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAssetGroupsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AssetGroupWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAsset: {
    type: 'Asset'
    args: Record<MutationCreateAssetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AssetCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Asset> | prisma.Asset
  }
  updateAsset: {
    type: 'Asset'
    args: Record<MutationUpdateAssetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AssetUpdateInput, where: AssetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Asset | null> | prisma.Asset | null
  }
  updateManyAssets: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAssetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AssetUpdateManyMutationInput, where?: AssetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAsset: {
    type: 'Asset'
    args: Record<MutationUpsertAssetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AssetWhereUniqueInput, create: AssetCreateInput, update: AssetUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Asset> | prisma.Asset
  }
  deleteAsset: {
    type: 'Asset'
    args: Record<MutationDeleteAssetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AssetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Asset | null> | prisma.Asset | null
  }
  deleteManyAssets: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAssetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AssetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPurchaseOrder: {
    type: 'PurchaseOrder'
    args: Record<MutationCreatePurchaseOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PurchaseOrderCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrder> | prisma.PurchaseOrder
  }
  updatePurchaseOrder: {
    type: 'PurchaseOrder'
    args: Record<MutationUpdatePurchaseOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PurchaseOrderUpdateInput, where: PurchaseOrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrder | null> | prisma.PurchaseOrder | null
  }
  updateManyPurchaseOrders: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPurchaseOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PurchaseOrderUpdateManyMutationInput, where?: PurchaseOrderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPurchaseOrder: {
    type: 'PurchaseOrder'
    args: Record<MutationUpsertPurchaseOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PurchaseOrderWhereUniqueInput, create: PurchaseOrderCreateInput, update: PurchaseOrderUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrder> | prisma.PurchaseOrder
  }
  deletePurchaseOrder: {
    type: 'PurchaseOrder'
    args: Record<MutationDeletePurchaseOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PurchaseOrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrder | null> | prisma.PurchaseOrder | null
  }
  deleteManyPurchaseOrders: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPurchaseOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PurchaseOrderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPoReceipt: {
    type: 'PoReceipt'
    args: Record<MutationCreatePoReceiptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PoReceiptCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceipt> | prisma.PoReceipt
  }
  updatePoReceipt: {
    type: 'PoReceipt'
    args: Record<MutationUpdatePoReceiptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PoReceiptUpdateInput, where: PoReceiptWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceipt | null> | prisma.PoReceipt | null
  }
  updateManyPoReceipts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPoReceiptsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PoReceiptUpdateManyMutationInput, where?: PoReceiptWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPoReceipt: {
    type: 'PoReceipt'
    args: Record<MutationUpsertPoReceiptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PoReceiptWhereUniqueInput, create: PoReceiptCreateInput, update: PoReceiptUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceipt> | prisma.PoReceipt
  }
  deletePoReceipt: {
    type: 'PoReceipt'
    args: Record<MutationDeletePoReceiptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PoReceiptWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceipt | null> | prisma.PoReceipt | null
  }
  deleteManyPoReceipts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPoReceiptsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PoReceiptWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createInventoryOnHand: {
    type: 'InventoryOnHand'
    args: Record<MutationCreateInventoryOnHandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InventoryOnHandCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryOnHand> | prisma.InventoryOnHand
  }
  updateInventoryOnHand: {
    type: 'InventoryOnHand'
    args: Record<MutationUpdateInventoryOnHandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InventoryOnHandUpdateInput, where: InventoryOnHandWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryOnHand | null> | prisma.InventoryOnHand | null
  }
  updateManyInventoryOnHands: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyInventoryOnHandsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: InventoryOnHandUpdateManyMutationInput, where?: InventoryOnHandWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertInventoryOnHand: {
    type: 'InventoryOnHand'
    args: Record<MutationUpsertInventoryOnHandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InventoryOnHandWhereUniqueInput, create: InventoryOnHandCreateInput, update: InventoryOnHandUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryOnHand> | prisma.InventoryOnHand
  }
  deleteInventoryOnHand: {
    type: 'InventoryOnHand'
    args: Record<MutationDeleteInventoryOnHandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: InventoryOnHandWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryOnHand | null> | prisma.InventoryOnHand | null
  }
  deleteManyInventoryOnHands: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyInventoryOnHandsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: InventoryOnHandWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPurchaseOrderLine: {
    type: 'PurchaseOrderLine'
    args: Record<MutationCreatePurchaseOrderLineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PurchaseOrderLineCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderLine> | prisma.PurchaseOrderLine
  }
  updatePurchaseOrderLine: {
    type: 'PurchaseOrderLine'
    args: Record<MutationUpdatePurchaseOrderLineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PurchaseOrderLineUpdateInput, where: PurchaseOrderLineWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderLine | null> | prisma.PurchaseOrderLine | null
  }
  updateManyPurchaseOrderLines: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPurchaseOrderLinesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PurchaseOrderLineUpdateManyMutationInput, where?: PurchaseOrderLineWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPurchaseOrderLine: {
    type: 'PurchaseOrderLine'
    args: Record<MutationUpsertPurchaseOrderLineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PurchaseOrderLineWhereUniqueInput, create: PurchaseOrderLineCreateInput, update: PurchaseOrderLineUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderLine> | prisma.PurchaseOrderLine
  }
  deletePurchaseOrderLine: {
    type: 'PurchaseOrderLine'
    args: Record<MutationDeletePurchaseOrderLineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PurchaseOrderLineWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderLine | null> | prisma.PurchaseOrderLine | null
  }
  deleteManyPurchaseOrderLines: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPurchaseOrderLinesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PurchaseOrderLineWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createApInvoice: {
    type: 'ApInvoice'
    args: Record<MutationCreateApInvoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ApInvoiceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoice> | prisma.ApInvoice
  }
  updateApInvoice: {
    type: 'ApInvoice'
    args: Record<MutationUpdateApInvoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ApInvoiceUpdateInput, where: ApInvoiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoice | null> | prisma.ApInvoice | null
  }
  updateManyApInvoices: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyApInvoicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ApInvoiceUpdateManyMutationInput, where?: ApInvoiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertApInvoice: {
    type: 'ApInvoice'
    args: Record<MutationUpsertApInvoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ApInvoiceWhereUniqueInput, create: ApInvoiceCreateInput, update: ApInvoiceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoice> | prisma.ApInvoice
  }
  deleteApInvoice: {
    type: 'ApInvoice'
    args: Record<MutationDeleteApInvoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ApInvoiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoice | null> | prisma.ApInvoice | null
  }
  deleteManyApInvoices: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyApInvoicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ApInvoiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSalesOrder: {
    type: 'SalesOrder'
    args: Record<MutationCreateSalesOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SalesOrderCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrder> | prisma.SalesOrder
  }
  updateSalesOrder: {
    type: 'SalesOrder'
    args: Record<MutationUpdateSalesOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SalesOrderUpdateInput, where: SalesOrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrder | null> | prisma.SalesOrder | null
  }
  updateManySalesOrders: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySalesOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SalesOrderUpdateManyMutationInput, where?: SalesOrderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSalesOrder: {
    type: 'SalesOrder'
    args: Record<MutationUpsertSalesOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SalesOrderWhereUniqueInput, create: SalesOrderCreateInput, update: SalesOrderUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrder> | prisma.SalesOrder
  }
  deleteSalesOrder: {
    type: 'SalesOrder'
    args: Record<MutationDeleteSalesOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SalesOrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrder | null> | prisma.SalesOrder | null
  }
  deleteManySalesOrders: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySalesOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SalesOrderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSalesOrderLine: {
    type: 'SalesOrderLine'
    args: Record<MutationCreateSalesOrderLineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SalesOrderLineCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderLine> | prisma.SalesOrderLine
  }
  updateSalesOrderLine: {
    type: 'SalesOrderLine'
    args: Record<MutationUpdateSalesOrderLineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SalesOrderLineUpdateInput, where: SalesOrderLineWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderLine | null> | prisma.SalesOrderLine | null
  }
  updateManySalesOrderLines: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySalesOrderLinesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SalesOrderLineUpdateManyMutationInput, where?: SalesOrderLineWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSalesOrderLine: {
    type: 'SalesOrderLine'
    args: Record<MutationUpsertSalesOrderLineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SalesOrderLineWhereUniqueInput, create: SalesOrderLineCreateInput, update: SalesOrderLineUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderLine> | prisma.SalesOrderLine
  }
  deleteSalesOrderLine: {
    type: 'SalesOrderLine'
    args: Record<MutationDeleteSalesOrderLineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SalesOrderLineWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderLine | null> | prisma.SalesOrderLine | null
  }
  deleteManySalesOrderLines: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySalesOrderLinesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SalesOrderLineWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPredictedSalesValueByCompany: {
    type: 'PredictedSalesValueByCompany'
    args: Record<MutationCreatePredictedSalesValueByCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PredictedSalesValueByCompanyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesValueByCompany> | prisma.PredictedSalesValueByCompany
  }
  updatePredictedSalesValueByCompany: {
    type: 'PredictedSalesValueByCompany'
    args: Record<MutationUpdatePredictedSalesValueByCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PredictedSalesValueByCompanyUpdateInput, where: PredictedSalesValueByCompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesValueByCompany | null> | prisma.PredictedSalesValueByCompany | null
  }
  updateManyPredictedSalesValueByCompanies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPredictedSalesValueByCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PredictedSalesValueByCompanyUpdateManyMutationInput, where?: PredictedSalesValueByCompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPredictedSalesValueByCompany: {
    type: 'PredictedSalesValueByCompany'
    args: Record<MutationUpsertPredictedSalesValueByCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PredictedSalesValueByCompanyWhereUniqueInput, create: PredictedSalesValueByCompanyCreateInput, update: PredictedSalesValueByCompanyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesValueByCompany> | prisma.PredictedSalesValueByCompany
  }
  deletePredictedSalesValueByCompany: {
    type: 'PredictedSalesValueByCompany'
    args: Record<MutationDeletePredictedSalesValueByCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PredictedSalesValueByCompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesValueByCompany | null> | prisma.PredictedSalesValueByCompany | null
  }
  deleteManyPredictedSalesValueByCompanies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPredictedSalesValueByCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PredictedSalesValueByCompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPredictedSalesQuantityOfItemsByCompany: {
    type: 'PredictedSalesQuantityOfItemsByCompany'
    args: Record<MutationCreatePredictedSalesQuantityOfItemsByCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PredictedSalesQuantityOfItemsByCompanyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesQuantityOfItemsByCompany> | prisma.PredictedSalesQuantityOfItemsByCompany
  }
  updatePredictedSalesQuantityOfItemsByCompany: {
    type: 'PredictedSalesQuantityOfItemsByCompany'
    args: Record<MutationUpdatePredictedSalesQuantityOfItemsByCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PredictedSalesQuantityOfItemsByCompanyUpdateInput, where: PredictedSalesQuantityOfItemsByCompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesQuantityOfItemsByCompany | null> | prisma.PredictedSalesQuantityOfItemsByCompany | null
  }
  updateManyPredictedSalesQuantityOfItemsByCompanies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPredictedSalesQuantityOfItemsByCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PredictedSalesQuantityOfItemsByCompanyUpdateManyMutationInput, where?: PredictedSalesQuantityOfItemsByCompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPredictedSalesQuantityOfItemsByCompany: {
    type: 'PredictedSalesQuantityOfItemsByCompany'
    args: Record<MutationUpsertPredictedSalesQuantityOfItemsByCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PredictedSalesQuantityOfItemsByCompanyWhereUniqueInput, create: PredictedSalesQuantityOfItemsByCompanyCreateInput, update: PredictedSalesQuantityOfItemsByCompanyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesQuantityOfItemsByCompany> | prisma.PredictedSalesQuantityOfItemsByCompany
  }
  deletePredictedSalesQuantityOfItemsByCompany: {
    type: 'PredictedSalesQuantityOfItemsByCompany'
    args: Record<MutationDeletePredictedSalesQuantityOfItemsByCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PredictedSalesQuantityOfItemsByCompanyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesQuantityOfItemsByCompany | null> | prisma.PredictedSalesQuantityOfItemsByCompany | null
  }
  deleteManyPredictedSalesQuantityOfItemsByCompanies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPredictedSalesQuantityOfItemsByCompaniesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PredictedSalesQuantityOfItemsByCompanyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMedicareService: {
    type: 'MedicareService'
    args: Record<MutationCreateMedicareServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MedicareServiceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MedicareService> | prisma.MedicareService
  }
  updateMedicareService: {
    type: 'MedicareService'
    args: Record<MutationUpdateMedicareServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MedicareServiceUpdateInput, where: MedicareServiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MedicareService | null> | prisma.MedicareService | null
  }
  updateManyMedicareServices: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMedicareServicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MedicareServiceUpdateManyMutationInput, where?: MedicareServiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMedicareService: {
    type: 'MedicareService'
    args: Record<MutationUpsertMedicareServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MedicareServiceWhereUniqueInput, create: MedicareServiceCreateInput, update: MedicareServiceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MedicareService> | prisma.MedicareService
  }
  deleteMedicareService: {
    type: 'MedicareService'
    args: Record<MutationDeleteMedicareServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MedicareServiceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MedicareService | null> | prisma.MedicareService | null
  }
  deleteManyMedicareServices: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMedicareServicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MedicareServiceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPatient: {
    type: 'Patient'
    args: Record<MutationCreatePatientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PatientCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient> | prisma.Patient
  }
  updatePatient: {
    type: 'Patient'
    args: Record<MutationUpdatePatientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PatientUpdateInput, where: PatientWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient | null> | prisma.Patient | null
  }
  updateManyPatients: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPatientsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PatientUpdateManyMutationInput, where?: PatientWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPatient: {
    type: 'Patient'
    args: Record<MutationUpsertPatientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PatientWhereUniqueInput, create: PatientCreateInput, update: PatientUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient> | prisma.Patient
  }
  deletePatient: {
    type: 'Patient'
    args: Record<MutationDeletePatientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PatientWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient | null> | prisma.Patient | null
  }
  deleteManyPatients: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPatientsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PatientWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createName: {
    type: 'Name'
    args: Record<MutationCreateNameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NameCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name> | prisma.Name
  }
  updateName: {
    type: 'Name'
    args: Record<MutationUpdateNameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NameUpdateInput, where: NameWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name | null> | prisma.Name | null
  }
  updateManyNames: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyNamesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NameUpdateManyMutationInput, where?: NameWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertName: {
    type: 'Name'
    args: Record<MutationUpsertNameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NameWhereUniqueInput, create: NameCreateInput, update: NameUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name> | prisma.Name
  }
  deleteName: {
    type: 'Name'
    args: Record<MutationDeleteNameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NameWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name | null> | prisma.Name | null
  }
  deleteManyNames: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyNamesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: NameWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createHealthcareProvider: {
    type: 'HealthcareProvider'
    args: Record<MutationCreateHealthcareProviderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HealthcareProviderCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HealthcareProvider> | prisma.HealthcareProvider
  }
  updateHealthcareProvider: {
    type: 'HealthcareProvider'
    args: Record<MutationUpdateHealthcareProviderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HealthcareProviderUpdateInput, where: HealthcareProviderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HealthcareProvider | null> | prisma.HealthcareProvider | null
  }
  updateManyHealthcareProviders: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyHealthcareProvidersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HealthcareProviderUpdateManyMutationInput, where?: HealthcareProviderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertHealthcareProvider: {
    type: 'HealthcareProvider'
    args: Record<MutationUpsertHealthcareProviderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: HealthcareProviderWhereUniqueInput, create: HealthcareProviderCreateInput, update: HealthcareProviderUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HealthcareProvider> | prisma.HealthcareProvider
  }
  deleteHealthcareProvider: {
    type: 'HealthcareProvider'
    args: Record<MutationDeleteHealthcareProviderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: HealthcareProviderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HealthcareProvider | null> | prisma.HealthcareProvider | null
  }
  deleteManyHealthcareProviders: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyHealthcareProvidersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: HealthcareProviderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createImmunisationSchedule: {
    type: 'ImmunisationSchedule'
    args: Record<MutationCreateImmunisationScheduleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ImmunisationScheduleCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImmunisationSchedule> | prisma.ImmunisationSchedule
  }
  updateImmunisationSchedule: {
    type: 'ImmunisationSchedule'
    args: Record<MutationUpdateImmunisationScheduleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ImmunisationScheduleUpdateInput, where: ImmunisationScheduleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImmunisationSchedule | null> | prisma.ImmunisationSchedule | null
  }
  updateManyImmunisationSchedules: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyImmunisationSchedulesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ImmunisationScheduleUpdateManyMutationInput, where?: ImmunisationScheduleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertImmunisationSchedule: {
    type: 'ImmunisationSchedule'
    args: Record<MutationUpsertImmunisationScheduleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ImmunisationScheduleWhereUniqueInput, create: ImmunisationScheduleCreateInput, update: ImmunisationScheduleUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImmunisationSchedule> | prisma.ImmunisationSchedule
  }
  deleteImmunisationSchedule: {
    type: 'ImmunisationSchedule'
    args: Record<MutationDeleteImmunisationScheduleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ImmunisationScheduleWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImmunisationSchedule | null> | prisma.ImmunisationSchedule | null
  }
  deleteManyImmunisationSchedules: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyImmunisationSchedulesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ImmunisationScheduleWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createVaccineBrand: {
    type: 'VaccineBrand'
    args: Record<MutationCreateVaccineBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VaccineBrandCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrand> | prisma.VaccineBrand
  }
  updateVaccineBrand: {
    type: 'VaccineBrand'
    args: Record<MutationUpdateVaccineBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VaccineBrandUpdateInput, where: VaccineBrandWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrand | null> | prisma.VaccineBrand | null
  }
  updateManyVaccineBrands: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyVaccineBrandsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VaccineBrandUpdateManyMutationInput, where?: VaccineBrandWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertVaccineBrand: {
    type: 'VaccineBrand'
    args: Record<MutationUpsertVaccineBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VaccineBrandWhereUniqueInput, create: VaccineBrandCreateInput, update: VaccineBrandUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrand> | prisma.VaccineBrand
  }
  deleteVaccineBrand: {
    type: 'VaccineBrand'
    args: Record<MutationDeleteVaccineBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VaccineBrandWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrand | null> | prisma.VaccineBrand | null
  }
  deleteManyVaccineBrands: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyVaccineBrandsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: VaccineBrandWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDisease: {
    type: 'Disease'
    args: Record<MutationCreateDiseaseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DiseaseCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Disease> | prisma.Disease
  }
  updateDisease: {
    type: 'Disease'
    args: Record<MutationUpdateDiseaseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DiseaseUpdateInput, where: DiseaseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Disease | null> | prisma.Disease | null
  }
  updateManyDiseases: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDiseasesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DiseaseUpdateManyMutationInput, where?: DiseaseWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDisease: {
    type: 'Disease'
    args: Record<MutationUpsertDiseaseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DiseaseWhereUniqueInput, create: DiseaseCreateInput, update: DiseaseUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Disease> | prisma.Disease
  }
  deleteDisease: {
    type: 'Disease'
    args: Record<MutationDeleteDiseaseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DiseaseWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Disease | null> | prisma.Disease | null
  }
  deleteManyDiseases: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDiseasesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DiseaseWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createHILog: {
    type: 'HILog'
    args: Record<MutationCreateHILogArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HILogCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HILog> | prisma.HILog
  }
  updateHILog: {
    type: 'HILog'
    args: Record<MutationUpdateHILogArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HILogUpdateInput, where: HILogWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HILog | null> | prisma.HILog | null
  }
  updateManyHILogs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyHILogsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: HILogUpdateManyMutationInput, where?: HILogWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertHILog: {
    type: 'HILog'
    args: Record<MutationUpsertHILogArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: HILogWhereUniqueInput, create: HILogCreateInput, update: HILogUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HILog> | prisma.HILog
  }
  deleteHILog: {
    type: 'HILog'
    args: Record<MutationDeleteHILogArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: HILogWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HILog | null> | prisma.HILog | null
  }
  deleteManyHILogs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyHILogsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: HILogWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPbsOrganisation: {
    type: 'PbsOrganisation'
    args: Record<MutationCreatePbsOrganisationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PbsOrganisationCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisation> | prisma.PbsOrganisation
  }
  updatePbsOrganisation: {
    type: 'PbsOrganisation'
    args: Record<MutationUpdatePbsOrganisationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PbsOrganisationUpdateInput, where: PbsOrganisationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisation | null> | prisma.PbsOrganisation | null
  }
  updateManyPbsOrganisations: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPbsOrganisationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PbsOrganisationUpdateManyMutationInput, where?: PbsOrganisationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPbsOrganisation: {
    type: 'PbsOrganisation'
    args: Record<MutationUpsertPbsOrganisationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PbsOrganisationWhereUniqueInput, create: PbsOrganisationCreateInput, update: PbsOrganisationUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisation> | prisma.PbsOrganisation
  }
  deletePbsOrganisation: {
    type: 'PbsOrganisation'
    args: Record<MutationDeletePbsOrganisationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PbsOrganisationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisation | null> | prisma.PbsOrganisation | null
  }
  deleteManyPbsOrganisations: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPbsOrganisationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PbsOrganisationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPbsTPP: {
    type: 'PbsTPP'
    args: Record<MutationCreatePbsTPPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PbsTPPCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsTPP> | prisma.PbsTPP
  }
  updatePbsTPP: {
    type: 'PbsTPP'
    args: Record<MutationUpdatePbsTPPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PbsTPPUpdateInput, where: PbsTPPWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsTPP | null> | prisma.PbsTPP | null
  }
  updateManyPbsTPPs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPbsTPPsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PbsTPPUpdateManyMutationInput, where?: PbsTPPWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPbsTPP: {
    type: 'PbsTPP'
    args: Record<MutationUpsertPbsTPPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PbsTPPWhereUniqueInput, create: PbsTPPCreateInput, update: PbsTPPUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsTPP> | prisma.PbsTPP
  }
  deletePbsTPP: {
    type: 'PbsTPP'
    args: Record<MutationDeletePbsTPPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PbsTPPWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsTPP | null> | prisma.PbsTPP | null
  }
  deleteManyPbsTPPs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPbsTPPsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PbsTPPWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMeansTestedFee: {
    type: 'MeansTestedFee'
    args: Record<MutationCreateMeansTestedFeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MeansTestedFeeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFee> | prisma.MeansTestedFee
  }
  updateMeansTestedFee: {
    type: 'MeansTestedFee'
    args: Record<MutationUpdateMeansTestedFeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MeansTestedFeeUpdateInput, where: MeansTestedFeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFee | null> | prisma.MeansTestedFee | null
  }
  updateManyMeansTestedFees: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMeansTestedFeesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MeansTestedFeeUpdateManyMutationInput, where?: MeansTestedFeeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMeansTestedFee: {
    type: 'MeansTestedFee'
    args: Record<MutationUpsertMeansTestedFeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MeansTestedFeeWhereUniqueInput, create: MeansTestedFeeCreateInput, update: MeansTestedFeeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFee> | prisma.MeansTestedFee
  }
  deleteMeansTestedFee: {
    type: 'MeansTestedFee'
    args: Record<MutationDeleteMeansTestedFeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MeansTestedFeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFee | null> | prisma.MeansTestedFee | null
  }
  deleteManyMeansTestedFees: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMeansTestedFeesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MeansTestedFeeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMeansTestLimits: {
    type: 'MeansTestLimits'
    args: Record<MutationCreateMeansTestLimitsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MeansTestLimitsCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestLimits> | prisma.MeansTestLimits
  }
  updateMeansTestLimits: {
    type: 'MeansTestLimits'
    args: Record<MutationUpdateMeansTestLimitsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MeansTestLimitsUpdateInput, where: MeansTestLimitsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestLimits | null> | prisma.MeansTestLimits | null
  }
  updateManyMeansTestLimitses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMeansTestLimitsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MeansTestLimitsUpdateManyMutationInput, where?: MeansTestLimitsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMeansTestLimits: {
    type: 'MeansTestLimits'
    args: Record<MutationUpsertMeansTestLimitsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MeansTestLimitsWhereUniqueInput, create: MeansTestLimitsCreateInput, update: MeansTestLimitsUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestLimits> | prisma.MeansTestLimits
  }
  deleteMeansTestLimits: {
    type: 'MeansTestLimits'
    args: Record<MutationDeleteMeansTestLimitsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MeansTestLimitsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestLimits | null> | prisma.MeansTestLimits | null
  }
  deleteManyMeansTestLimitses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMeansTestLimitsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MeansTestLimitsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createBasicDailyFee: {
    type: 'BasicDailyFee'
    args: Record<MutationCreateBasicDailyFeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BasicDailyFeeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFee> | prisma.BasicDailyFee
  }
  updateBasicDailyFee: {
    type: 'BasicDailyFee'
    args: Record<MutationUpdateBasicDailyFeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BasicDailyFeeUpdateInput, where: BasicDailyFeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFee | null> | prisma.BasicDailyFee | null
  }
  updateManyBasicDailyFees: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyBasicDailyFeesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BasicDailyFeeUpdateManyMutationInput, where?: BasicDailyFeeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertBasicDailyFee: {
    type: 'BasicDailyFee'
    args: Record<MutationUpsertBasicDailyFeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BasicDailyFeeWhereUniqueInput, create: BasicDailyFeeCreateInput, update: BasicDailyFeeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFee> | prisma.BasicDailyFee
  }
  deleteBasicDailyFee: {
    type: 'BasicDailyFee'
    args: Record<MutationDeleteBasicDailyFeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BasicDailyFeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFee | null> | prisma.BasicDailyFee | null
  }
  deleteManyBasicDailyFees: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyBasicDailyFeesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: BasicDailyFeeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'address', args?: SubscriptionAddressArgs[] | false, alias?: string  } 
  | { name: 'contact', args?: SubscriptionContactArgs[] | false, alias?: string  } 
  | { name: 'company', args?: SubscriptionCompanyArgs[] | false, alias?: string  } 
  | { name: 'companyMember', args?: SubscriptionCompanyMemberArgs[] | false, alias?: string  } 
  | { name: 'customer', args?: SubscriptionCustomerArgs[] | false, alias?: string  } 
  | { name: 'integration', args?: SubscriptionIntegrationArgs[] | false, alias?: string  } 
  | { name: 'service', args?: SubscriptionServiceArgs[] | false, alias?: string  } 
  | { name: 'project', args?: SubscriptionProjectArgs[] | false, alias?: string  } 
  | { name: 'projectService', args?: SubscriptionProjectServiceArgs[] | false, alias?: string  } 
  | { name: 'projectServiceRule', args?: SubscriptionProjectServiceRuleArgs[] | false, alias?: string  } 
  | { name: 'plan', args?: SubscriptionPlanArgs[] | false, alias?: string  } 
  | { name: 'session', args?: SubscriptionSessionArgs[] | false, alias?: string  } 
  | { name: 'timeSheet', args?: SubscriptionTimeSheetArgs[] | false, alias?: string  } 
  | { name: 'attachment', args?: SubscriptionAttachmentArgs[] | false, alias?: string  } 
  | { name: 'timeSheetEntry', args?: SubscriptionTimeSheetEntryArgs[] | false, alias?: string  } 
  | { name: 'invoiceItemEntry', args?: SubscriptionInvoiceItemEntryArgs[] | false, alias?: string  } 
  | { name: 'invoice', args?: SubscriptionInvoiceArgs[] | false, alias?: string  } 
  | { name: 'mainAccount', args?: SubscriptionMainAccountArgs[] | false, alias?: string  } 
  | { name: 'ledgerJournal', args?: SubscriptionLedgerJournalArgs[] | false, alias?: string  } 
  | { name: 'ledgerTransaction', args?: SubscriptionLedgerTransactionArgs[] | false, alias?: string  } 
  | { name: 'ledgerPosting', args?: SubscriptionLedgerPostingArgs[] | false, alias?: string  } 
  | { name: 'bank', args?: SubscriptionBankArgs[] | false, alias?: string  } 
  | { name: 'bankTransaction', args?: SubscriptionBankTransactionArgs[] | false, alias?: string  } 
  | { name: 'wareHouse', args?: SubscriptionWareHouseArgs[] | false, alias?: string  } 
  | { name: 'inventory', args?: SubscriptionInventoryArgs[] | false, alias?: string  } 
  | { name: 'supplier', args?: SubscriptionSupplierArgs[] | false, alias?: string  } 
  | { name: 'assetGroup', args?: SubscriptionAssetGroupArgs[] | false, alias?: string  } 
  | { name: 'asset', args?: SubscriptionAssetArgs[] | false, alias?: string  } 
  | { name: 'purchaseOrder', args?: SubscriptionPurchaseOrderArgs[] | false, alias?: string  } 
  | { name: 'poReceipt', args?: SubscriptionPoReceiptArgs[] | false, alias?: string  } 
  | { name: 'inventoryOnHand', args?: SubscriptionInventoryOnHandArgs[] | false, alias?: string  } 
  | { name: 'purchaseOrderLine', args?: SubscriptionPurchaseOrderLineArgs[] | false, alias?: string  } 
  | { name: 'apInvoice', args?: SubscriptionApInvoiceArgs[] | false, alias?: string  } 
  | { name: 'salesOrder', args?: SubscriptionSalesOrderArgs[] | false, alias?: string  } 
  | { name: 'salesOrderLine', args?: SubscriptionSalesOrderLineArgs[] | false, alias?: string  } 
  | { name: 'predictedSalesValueByCompany', args?: SubscriptionPredictedSalesValueByCompanyArgs[] | false, alias?: string  } 
  | { name: 'predictedSalesQuantityOfItemsByCompany', args?: SubscriptionPredictedSalesQuantityOfItemsByCompanyArgs[] | false, alias?: string  } 
  | { name: 'medicareService', args?: SubscriptionMedicareServiceArgs[] | false, alias?: string  } 
  | { name: 'patient', args?: SubscriptionPatientArgs[] | false, alias?: string  } 
  | { name: 'name', args?: SubscriptionNameArgs[] | false, alias?: string  } 
  | { name: 'healthcareProvider', args?: SubscriptionHealthcareProviderArgs[] | false, alias?: string  } 
  | { name: 'immunisationSchedule', args?: SubscriptionImmunisationScheduleArgs[] | false, alias?: string  } 
  | { name: 'vaccineBrand', args?: SubscriptionVaccineBrandArgs[] | false, alias?: string  } 
  | { name: 'disease', args?: SubscriptionDiseaseArgs[] | false, alias?: string  } 
  | { name: 'hILog', args?: SubscriptionHILogArgs[] | false, alias?: string  } 
  | { name: 'pbsOrganisation', args?: SubscriptionPbsOrganisationArgs[] | false, alias?: string  } 
  | { name: 'pbsTPP', args?: SubscriptionPbsTPPArgs[] | false, alias?: string  } 
  | { name: 'meansTestedFee', args?: SubscriptionMeansTestedFeeArgs[] | false, alias?: string  } 
  | { name: 'meansTestLimits', args?: SubscriptionMeansTestLimitsArgs[] | false, alias?: string  } 
  | { name: 'basicDailyFee', args?: SubscriptionBasicDailyFeeArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'address'
  | 'contact'
  | 'company'
  | 'companyMember'
  | 'customer'
  | 'integration'
  | 'service'
  | 'project'
  | 'projectService'
  | 'projectServiceRule'
  | 'plan'
  | 'session'
  | 'timeSheet'
  | 'attachment'
  | 'timeSheetEntry'
  | 'invoiceItemEntry'
  | 'invoice'
  | 'mainAccount'
  | 'ledgerJournal'
  | 'ledgerTransaction'
  | 'ledgerPosting'
  | 'bank'
  | 'bankTransaction'
  | 'wareHouse'
  | 'inventory'
  | 'supplier'
  | 'assetGroup'
  | 'asset'
  | 'purchaseOrder'
  | 'poReceipt'
  | 'inventoryOnHand'
  | 'purchaseOrderLine'
  | 'apInvoice'
  | 'salesOrder'
  | 'salesOrderLine'
  | 'predictedSalesValueByCompany'
  | 'predictedSalesQuantityOfItemsByCompany'
  | 'medicareService'
  | 'patient'
  | 'name'
  | 'healthcareProvider'
  | 'immunisationSchedule'
  | 'vaccineBrand'
  | 'disease'
  | 'hILog'
  | 'pbsOrganisation'
  | 'pbsTPP'
  | 'meansTestedFee'
  | 'meansTestLimits'
  | 'basicDailyFee'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionAddressArgs =
  | 'where'
type SubscriptionContactArgs =
  | 'where'
type SubscriptionCompanyArgs =
  | 'where'
type SubscriptionCompanyMemberArgs =
  | 'where'
type SubscriptionCustomerArgs =
  | 'where'
type SubscriptionIntegrationArgs =
  | 'where'
type SubscriptionServiceArgs =
  | 'where'
type SubscriptionProjectArgs =
  | 'where'
type SubscriptionProjectServiceArgs =
  | 'where'
type SubscriptionProjectServiceRuleArgs =
  | 'where'
type SubscriptionPlanArgs =
  | 'where'
type SubscriptionSessionArgs =
  | 'where'
type SubscriptionTimeSheetArgs =
  | 'where'
type SubscriptionAttachmentArgs =
  | 'where'
type SubscriptionTimeSheetEntryArgs =
  | 'where'
type SubscriptionInvoiceItemEntryArgs =
  | 'where'
type SubscriptionInvoiceArgs =
  | 'where'
type SubscriptionMainAccountArgs =
  | 'where'
type SubscriptionLedgerJournalArgs =
  | 'where'
type SubscriptionLedgerTransactionArgs =
  | 'where'
type SubscriptionLedgerPostingArgs =
  | 'where'
type SubscriptionBankArgs =
  | 'where'
type SubscriptionBankTransactionArgs =
  | 'where'
type SubscriptionWareHouseArgs =
  | 'where'
type SubscriptionInventoryArgs =
  | 'where'
type SubscriptionSupplierArgs =
  | 'where'
type SubscriptionAssetGroupArgs =
  | 'where'
type SubscriptionAssetArgs =
  | 'where'
type SubscriptionPurchaseOrderArgs =
  | 'where'
type SubscriptionPoReceiptArgs =
  | 'where'
type SubscriptionInventoryOnHandArgs =
  | 'where'
type SubscriptionPurchaseOrderLineArgs =
  | 'where'
type SubscriptionApInvoiceArgs =
  | 'where'
type SubscriptionSalesOrderArgs =
  | 'where'
type SubscriptionSalesOrderLineArgs =
  | 'where'
type SubscriptionPredictedSalesValueByCompanyArgs =
  | 'where'
type SubscriptionPredictedSalesQuantityOfItemsByCompanyArgs =
  | 'where'
type SubscriptionMedicareServiceArgs =
  | 'where'
type SubscriptionPatientArgs =
  | 'where'
type SubscriptionNameArgs =
  | 'where'
type SubscriptionHealthcareProviderArgs =
  | 'where'
type SubscriptionImmunisationScheduleArgs =
  | 'where'
type SubscriptionVaccineBrandArgs =
  | 'where'
type SubscriptionDiseaseArgs =
  | 'where'
type SubscriptionHILogArgs =
  | 'where'
type SubscriptionPbsOrganisationArgs =
  | 'where'
type SubscriptionPbsTPPArgs =
  | 'where'
type SubscriptionMeansTestedFeeArgs =
  | 'where'
type SubscriptionMeansTestLimitsArgs =
  | 'where'
type SubscriptionBasicDailyFeeArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  address: {
    type: 'AddressSubscriptionPayload'
    args: Record<SubscriptionAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AddressSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressSubscriptionPayload | null> | prisma.AddressSubscriptionPayload | null
  }
  contact: {
    type: 'ContactSubscriptionPayload'
    args: Record<SubscriptionContactArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ContactSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactSubscriptionPayload | null> | prisma.ContactSubscriptionPayload | null
  }
  company: {
    type: 'CompanySubscriptionPayload'
    args: Record<SubscriptionCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CompanySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanySubscriptionPayload | null> | prisma.CompanySubscriptionPayload | null
  }
  companyMember: {
    type: 'CompanyMemberSubscriptionPayload'
    args: Record<SubscriptionCompanyMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CompanyMemberSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMemberSubscriptionPayload | null> | prisma.CompanyMemberSubscriptionPayload | null
  }
  customer: {
    type: 'CustomerSubscriptionPayload'
    args: Record<SubscriptionCustomerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CustomerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CustomerSubscriptionPayload | null> | prisma.CustomerSubscriptionPayload | null
  }
  integration: {
    type: 'IntegrationSubscriptionPayload'
    args: Record<SubscriptionIntegrationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: IntegrationSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IntegrationSubscriptionPayload | null> | prisma.IntegrationSubscriptionPayload | null
  }
  service: {
    type: 'ServiceSubscriptionPayload'
    args: Record<SubscriptionServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ServiceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ServiceSubscriptionPayload | null> | prisma.ServiceSubscriptionPayload | null
  }
  project: {
    type: 'ProjectSubscriptionPayload'
    args: Record<SubscriptionProjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectSubscriptionPayload | null> | prisma.ProjectSubscriptionPayload | null
  }
  projectService: {
    type: 'ProjectServiceSubscriptionPayload'
    args: Record<SubscriptionProjectServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectServiceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceSubscriptionPayload | null> | prisma.ProjectServiceSubscriptionPayload | null
  }
  projectServiceRule: {
    type: 'ProjectServiceRuleSubscriptionPayload'
    args: Record<SubscriptionProjectServiceRuleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ProjectServiceRuleSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRuleSubscriptionPayload | null> | prisma.ProjectServiceRuleSubscriptionPayload | null
  }
  plan: {
    type: 'PlanSubscriptionPayload'
    args: Record<SubscriptionPlanArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PlanSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlanSubscriptionPayload | null> | prisma.PlanSubscriptionPayload | null
  }
  session: {
    type: 'SessionSubscriptionPayload'
    args: Record<SubscriptionSessionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SessionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SessionSubscriptionPayload | null> | prisma.SessionSubscriptionPayload | null
  }
  timeSheet: {
    type: 'TimeSheetSubscriptionPayload'
    args: Record<SubscriptionTimeSheetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TimeSheetSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetSubscriptionPayload | null> | prisma.TimeSheetSubscriptionPayload | null
  }
  attachment: {
    type: 'AttachmentSubscriptionPayload'
    args: Record<SubscriptionAttachmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AttachmentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttachmentSubscriptionPayload | null> | prisma.AttachmentSubscriptionPayload | null
  }
  timeSheetEntry: {
    type: 'TimeSheetEntrySubscriptionPayload'
    args: Record<SubscriptionTimeSheetEntryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TimeSheetEntrySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntrySubscriptionPayload | null> | prisma.TimeSheetEntrySubscriptionPayload | null
  }
  invoiceItemEntry: {
    type: 'InvoiceItemEntrySubscriptionPayload'
    args: Record<SubscriptionInvoiceItemEntryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: InvoiceItemEntrySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntrySubscriptionPayload | null> | prisma.InvoiceItemEntrySubscriptionPayload | null
  }
  invoice: {
    type: 'InvoiceSubscriptionPayload'
    args: Record<SubscriptionInvoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: InvoiceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceSubscriptionPayload | null> | prisma.InvoiceSubscriptionPayload | null
  }
  mainAccount: {
    type: 'MainAccountSubscriptionPayload'
    args: Record<SubscriptionMainAccountArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MainAccountSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccountSubscriptionPayload | null> | prisma.MainAccountSubscriptionPayload | null
  }
  ledgerJournal: {
    type: 'LedgerJournalSubscriptionPayload'
    args: Record<SubscriptionLedgerJournalArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: LedgerJournalSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournalSubscriptionPayload | null> | prisma.LedgerJournalSubscriptionPayload | null
  }
  ledgerTransaction: {
    type: 'LedgerTransactionSubscriptionPayload'
    args: Record<SubscriptionLedgerTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: LedgerTransactionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerTransactionSubscriptionPayload | null> | prisma.LedgerTransactionSubscriptionPayload | null
  }
  ledgerPosting: {
    type: 'LedgerPostingSubscriptionPayload'
    args: Record<SubscriptionLedgerPostingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: LedgerPostingSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerPostingSubscriptionPayload | null> | prisma.LedgerPostingSubscriptionPayload | null
  }
  bank: {
    type: 'BankSubscriptionPayload'
    args: Record<SubscriptionBankArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: BankSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankSubscriptionPayload | null> | prisma.BankSubscriptionPayload | null
  }
  bankTransaction: {
    type: 'BankTransactionSubscriptionPayload'
    args: Record<SubscriptionBankTransactionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: BankTransactionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankTransactionSubscriptionPayload | null> | prisma.BankTransactionSubscriptionPayload | null
  }
  wareHouse: {
    type: 'WareHouseSubscriptionPayload'
    args: Record<SubscriptionWareHouseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: WareHouseSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouseSubscriptionPayload | null> | prisma.WareHouseSubscriptionPayload | null
  }
  inventory: {
    type: 'InventorySubscriptionPayload'
    args: Record<SubscriptionInventoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: InventorySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventorySubscriptionPayload | null> | prisma.InventorySubscriptionPayload | null
  }
  supplier: {
    type: 'SupplierSubscriptionPayload'
    args: Record<SubscriptionSupplierArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SupplierSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SupplierSubscriptionPayload | null> | prisma.SupplierSubscriptionPayload | null
  }
  assetGroup: {
    type: 'AssetGroupSubscriptionPayload'
    args: Record<SubscriptionAssetGroupArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AssetGroupSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroupSubscriptionPayload | null> | prisma.AssetGroupSubscriptionPayload | null
  }
  asset: {
    type: 'AssetSubscriptionPayload'
    args: Record<SubscriptionAssetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AssetSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetSubscriptionPayload | null> | prisma.AssetSubscriptionPayload | null
  }
  purchaseOrder: {
    type: 'PurchaseOrderSubscriptionPayload'
    args: Record<SubscriptionPurchaseOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PurchaseOrderSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderSubscriptionPayload | null> | prisma.PurchaseOrderSubscriptionPayload | null
  }
  poReceipt: {
    type: 'PoReceiptSubscriptionPayload'
    args: Record<SubscriptionPoReceiptArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PoReceiptSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceiptSubscriptionPayload | null> | prisma.PoReceiptSubscriptionPayload | null
  }
  inventoryOnHand: {
    type: 'InventoryOnHandSubscriptionPayload'
    args: Record<SubscriptionInventoryOnHandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: InventoryOnHandSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryOnHandSubscriptionPayload | null> | prisma.InventoryOnHandSubscriptionPayload | null
  }
  purchaseOrderLine: {
    type: 'PurchaseOrderLineSubscriptionPayload'
    args: Record<SubscriptionPurchaseOrderLineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PurchaseOrderLineSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderLineSubscriptionPayload | null> | prisma.PurchaseOrderLineSubscriptionPayload | null
  }
  apInvoice: {
    type: 'ApInvoiceSubscriptionPayload'
    args: Record<SubscriptionApInvoiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ApInvoiceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoiceSubscriptionPayload | null> | prisma.ApInvoiceSubscriptionPayload | null
  }
  salesOrder: {
    type: 'SalesOrderSubscriptionPayload'
    args: Record<SubscriptionSalesOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SalesOrderSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderSubscriptionPayload | null> | prisma.SalesOrderSubscriptionPayload | null
  }
  salesOrderLine: {
    type: 'SalesOrderLineSubscriptionPayload'
    args: Record<SubscriptionSalesOrderLineArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SalesOrderLineSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderLineSubscriptionPayload | null> | prisma.SalesOrderLineSubscriptionPayload | null
  }
  predictedSalesValueByCompany: {
    type: 'PredictedSalesValueByCompanySubscriptionPayload'
    args: Record<SubscriptionPredictedSalesValueByCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PredictedSalesValueByCompanySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesValueByCompanySubscriptionPayload | null> | prisma.PredictedSalesValueByCompanySubscriptionPayload | null
  }
  predictedSalesQuantityOfItemsByCompany: {
    type: 'PredictedSalesQuantityOfItemsByCompanySubscriptionPayload'
    args: Record<SubscriptionPredictedSalesQuantityOfItemsByCompanyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesQuantityOfItemsByCompanySubscriptionPayload | null> | prisma.PredictedSalesQuantityOfItemsByCompanySubscriptionPayload | null
  }
  medicareService: {
    type: 'MedicareServiceSubscriptionPayload'
    args: Record<SubscriptionMedicareServiceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MedicareServiceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MedicareServiceSubscriptionPayload | null> | prisma.MedicareServiceSubscriptionPayload | null
  }
  patient: {
    type: 'PatientSubscriptionPayload'
    args: Record<SubscriptionPatientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PatientSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PatientSubscriptionPayload | null> | prisma.PatientSubscriptionPayload | null
  }
  name: {
    type: 'NameSubscriptionPayload'
    args: Record<SubscriptionNameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: NameSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NameSubscriptionPayload | null> | prisma.NameSubscriptionPayload | null
  }
  healthcareProvider: {
    type: 'HealthcareProviderSubscriptionPayload'
    args: Record<SubscriptionHealthcareProviderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: HealthcareProviderSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HealthcareProviderSubscriptionPayload | null> | prisma.HealthcareProviderSubscriptionPayload | null
  }
  immunisationSchedule: {
    type: 'ImmunisationScheduleSubscriptionPayload'
    args: Record<SubscriptionImmunisationScheduleArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ImmunisationScheduleSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImmunisationScheduleSubscriptionPayload | null> | prisma.ImmunisationScheduleSubscriptionPayload | null
  }
  vaccineBrand: {
    type: 'VaccineBrandSubscriptionPayload'
    args: Record<SubscriptionVaccineBrandArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: VaccineBrandSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrandSubscriptionPayload | null> | prisma.VaccineBrandSubscriptionPayload | null
  }
  disease: {
    type: 'DiseaseSubscriptionPayload'
    args: Record<SubscriptionDiseaseArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DiseaseSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DiseaseSubscriptionPayload | null> | prisma.DiseaseSubscriptionPayload | null
  }
  hILog: {
    type: 'HILogSubscriptionPayload'
    args: Record<SubscriptionHILogArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: HILogSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HILogSubscriptionPayload | null> | prisma.HILogSubscriptionPayload | null
  }
  pbsOrganisation: {
    type: 'PbsOrganisationSubscriptionPayload'
    args: Record<SubscriptionPbsOrganisationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PbsOrganisationSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisationSubscriptionPayload | null> | prisma.PbsOrganisationSubscriptionPayload | null
  }
  pbsTPP: {
    type: 'PbsTPPSubscriptionPayload'
    args: Record<SubscriptionPbsTPPArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PbsTPPSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsTPPSubscriptionPayload | null> | prisma.PbsTPPSubscriptionPayload | null
  }
  meansTestedFee: {
    type: 'MeansTestedFeeSubscriptionPayload'
    args: Record<SubscriptionMeansTestedFeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MeansTestedFeeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFeeSubscriptionPayload | null> | prisma.MeansTestedFeeSubscriptionPayload | null
  }
  meansTestLimits: {
    type: 'MeansTestLimitsSubscriptionPayload'
    args: Record<SubscriptionMeansTestLimitsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MeansTestLimitsSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestLimitsSubscriptionPayload | null> | prisma.MeansTestLimitsSubscriptionPayload | null
  }
  basicDailyFee: {
    type: 'BasicDailyFeeSubscriptionPayload'
    args: Record<SubscriptionBasicDailyFeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: BasicDailyFeeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFeeSubscriptionPayload | null> | prisma.BasicDailyFeeSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'contactNumber', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'isActive', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'isRoot', args?: [] | false, alias?: string  } 
  | { name: 'jobTitle', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'secondAuthEnabled', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'contactNumber'
  | 'email'
  | 'firstName'
  | 'isActive'
  | 'isArchived'
  | 'isDeleted'
  | 'isRoot'
  | 'jobTitle'
  | 'lastName'
  | 'password'
  | 'secondAuthEnabled'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  contactNumber: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isActive: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isRoot: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  jobTitle: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  secondAuthEnabled: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AddressSubscriptionPayload

type AddressSubscriptionPayloadObject =
  | AddressSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AddressSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AddressSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AddressSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Address'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AddressSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AddressPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AddressSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressPreviousValues | null> | prisma.AddressPreviousValues | null
  }
}
  

// Types for AddressPreviousValues

type AddressPreviousValuesObject =
  | AddressPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'street', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'state', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'postCode', args?: [] | false, alias?: string  } 
  | { name: 'latitude', args?: [] | false, alias?: string  } 
  | { name: 'longitude', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type AddressPreviousValuesFields =
  | 'id'
  | 'street'
  | 'city'
  | 'state'
  | 'country'
  | 'postCode'
  | 'latitude'
  | 'longitude'
  | 'createdAt'
  | 'updatedAt'



  

export interface AddressPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  street: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  state: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  country: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  postCode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  latitude: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  longitude: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ContactSubscriptionPayload

type ContactSubscriptionPayloadObject =
  | ContactSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ContactSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ContactSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ContactSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Contact'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ContactSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Contact | null> | prisma.Contact | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ContactPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ContactSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ContactPreviousValues | null> | prisma.ContactPreviousValues | null
  }
}
  

// Types for ContactPreviousValues

type ContactPreviousValuesObject =
  | ContactPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'surname', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'mobileCode', args?: [] | false, alias?: string  } 
  | { name: 'mobileNumber', args?: [] | false, alias?: string  } 
  | { name: 'landlineCode', args?: [] | false, alias?: string  } 
  | { name: 'landlineNumber', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ContactPreviousValuesFields =
  | 'id'
  | 'name'
  | 'surname'
  | 'email'
  | 'mobileCode'
  | 'mobileNumber'
  | 'landlineCode'
  | 'landlineNumber'
  | 'createdAt'
  | 'updatedAt'



  

export interface ContactPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  surname: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  mobileCode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  mobileNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  landlineCode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  landlineNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CompanySubscriptionPayload

type CompanySubscriptionPayloadObject =
  | CompanySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CompanySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CompanySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Company'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Company | null> | prisma.Company | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CompanyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyPreviousValues | null> | prisma.CompanyPreviousValues | null
  }
}
  

// Types for CompanyPreviousValues

type CompanyPreviousValuesObject =
  | CompanyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'bankAccount', args?: [] | false, alias?: string  } 
  | { name: 'businessType', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 
  | { name: 'govNumber', args?: [] | false, alias?: string  } 
  | { name: 'currency', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'HPIO', args?: [] | false, alias?: string  } 
  | { name: 'legalName', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'salesTax', args?: [] | false, alias?: string  } 
  | { name: 'timeSheetSettings', args?: [] | false, alias?: string  } 
  | { name: 'websiteURL', args?: [] | false, alias?: string  } 
  | { name: 'stripeCustomerId', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CompanyPreviousValuesFields =
  | 'id'
  | 'bankAccount'
  | 'businessType'
  | 'country'
  | 'govNumber'
  | 'currency'
  | 'isArchived'
  | 'isDeleted'
  | 'HPIO'
  | 'legalName'
  | 'name'
  | 'salesTax'
  | 'timeSheetSettings'
  | 'websiteURL'
  | 'stripeCustomerId'
  | 'createdAt'
  | 'updatedAt'



  

export interface CompanyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  bankAccount: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  businessType: {
    type: 'BusinessType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanyPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BusinessType | null> | prisma.BusinessType | null
  }
  country: {
    type: 'Country'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country> | prisma.Country
  }
  govNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  currency: {
    type: 'Currency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Currency> | prisma.Currency
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  HPIO: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  legalName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  salesTax: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  timeSheetSettings: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  websiteURL: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  stripeCustomerId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CompanyMemberSubscriptionPayload

type CompanyMemberSubscriptionPayloadObject =
  | CompanyMemberSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CompanyMemberSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CompanyMemberSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CompanyMemberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CompanyMember'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanyMemberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMember | null> | prisma.CompanyMember | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CompanyMemberPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanyMemberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMemberPreviousValues | null> | prisma.CompanyMemberPreviousValues | null
  }
}
  

// Types for CompanyMemberPreviousValues

type CompanyMemberPreviousValuesObject =
  | CompanyMemberPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CompanyMemberPreviousValuesFields =
  | 'id'
  | 'isArchived'
  | 'isDeleted'
  | 'role'
  | 'status'
  | 'createdAt'
  | 'updatedAt'



  

export interface CompanyMemberPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  role: {
    type: 'CompanyMemberRole'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanyMemberPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMemberRole | null> | prisma.CompanyMemberRole | null
  }
  status: {
    type: 'CompanyMemberStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CompanyMemberPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CompanyMemberStatus | null> | prisma.CompanyMemberStatus | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CustomerSubscriptionPayload

type CustomerSubscriptionPayloadObject =
  | CustomerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CustomerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CustomerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CustomerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Customer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CustomerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Customer | null> | prisma.Customer | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CustomerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CustomerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CustomerPreviousValues | null> | prisma.CustomerPreviousValues | null
  }
}
  

// Types for CustomerPreviousValues

type CustomerPreviousValuesObject =
  | CustomerPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'govNumber', args?: [] | false, alias?: string  } 
  | { name: 'salesTax', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'billingFrequency', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CustomerPreviousValuesFields =
  | 'id'
  | 'description'
  | 'govNumber'
  | 'salesTax'
  | 'isArchived'
  | 'isDeleted'
  | 'name'
  | 'billingFrequency'
  | 'createdAt'
  | 'updatedAt'



  

export interface CustomerPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  govNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  salesTax: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  billingFrequency: {
    type: 'SupplierTermsOfPayment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CustomerPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SupplierTermsOfPayment | null> | prisma.SupplierTermsOfPayment | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for IntegrationSubscriptionPayload

type IntegrationSubscriptionPayloadObject =
  | IntegrationSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type IntegrationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface IntegrationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"IntegrationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Integration'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"IntegrationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Integration | null> | prisma.Integration | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'IntegrationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"IntegrationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IntegrationPreviousValues | null> | prisma.IntegrationPreviousValues | null
  }
}
  

// Types for IntegrationPreviousValues

type IntegrationPreviousValuesObject =
  | IntegrationPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'data', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type IntegrationPreviousValuesFields =
  | 'id'
  | 'data'
  | 'type'
  | 'createdAt'
  | 'updatedAt'



  

export interface IntegrationPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  data: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'IntegrationType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"IntegrationPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.IntegrationType | null> | prisma.IntegrationType | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ServiceSubscriptionPayload

type ServiceSubscriptionPayloadObject =
  | ServiceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ServiceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ServiceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ServiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Service'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ServiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Service | null> | prisma.Service | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ServicePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ServiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ServicePreviousValues | null> | prisma.ServicePreviousValues | null
  }
}
  

// Types for ServicePreviousValues

type ServicePreviousValuesObject =
  | ServicePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'billingType', args?: [] | false, alias?: string  } 
  | { name: 'includeConsTax', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'isTemplate', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'timeBasedType', args?: [] | false, alias?: string  } 
  | { name: 'totalAmount', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ServicePreviousValuesFields =
  | 'id'
  | 'billingType'
  | 'includeConsTax'
  | 'isArchived'
  | 'isDeleted'
  | 'isTemplate'
  | 'name'
  | 'timeBasedType'
  | 'totalAmount'
  | 'createdAt'
  | 'updatedAt'



  

export interface ServicePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  billingType: {
    type: 'ServiceBillingType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ServicePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ServiceBillingType> | prisma.ServiceBillingType
  }
  includeConsTax: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isTemplate: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  timeBasedType: {
    type: 'TimeBasedType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ServicePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeBasedType | null> | prisma.TimeBasedType | null
  }
  totalAmount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectSubscriptionPayload

type ProjectSubscriptionPayloadObject =
  | ProjectSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Project'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Project | null> | prisma.Project | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectPreviousValues | null> | prisma.ProjectPreviousValues | null
  }
}
  

// Types for ProjectPreviousValues

type ProjectPreviousValuesObject =
  | ProjectPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'endsAt', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'startsAt', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProjectPreviousValuesFields =
  | 'id'
  | 'description'
  | 'endsAt'
  | 'isArchived'
  | 'isDeleted'
  | 'name'
  | 'startsAt'
  | 'status'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProjectPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endsAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  startsAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  status: {
    type: 'ProjectStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectStatus | null> | prisma.ProjectStatus | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectServiceSubscriptionPayload

type ProjectServiceSubscriptionPayloadObject =
  | ProjectServiceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectServiceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectServiceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectServiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectService'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectServiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectService | null> | prisma.ProjectService | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectServicePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectServiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServicePreviousValues | null> | prisma.ProjectServicePreviousValues | null
  }
}
  

// Types for ProjectServicePreviousValues

type ProjectServicePreviousValuesObject =
  | ProjectServicePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProjectServicePreviousValuesFields =
  | 'id'
  | 'amount'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProjectServicePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  amount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ProjectServiceRuleSubscriptionPayload

type ProjectServiceRuleSubscriptionPayloadObject =
  | ProjectServiceRuleSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ProjectServiceRuleSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ProjectServiceRuleSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ProjectServiceRuleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ProjectServiceRule'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectServiceRuleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRule | null> | prisma.ProjectServiceRule | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ProjectServiceRulePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectServiceRuleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRulePreviousValues | null> | prisma.ProjectServiceRulePreviousValues | null
  }
}
  

// Types for ProjectServiceRulePreviousValues

type ProjectServiceRulePreviousValuesObject =
  | ProjectServiceRulePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'percent', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'isPercent', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ProjectServiceRulePreviousValuesFields =
  | 'id'
  | 'amount'
  | 'percent'
  | 'type'
  | 'isPercent'
  | 'createdAt'
  | 'updatedAt'



  

export interface ProjectServiceRulePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  amount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  percent: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'ProjectServiceRuleType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ProjectServiceRulePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ProjectServiceRuleType | null> | prisma.ProjectServiceRuleType | null
  }
  isPercent: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PlanSubscriptionPayload

type PlanSubscriptionPayloadObject =
  | PlanSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PlanSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PlanSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlanSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Plan'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlanSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Plan | null> | prisma.Plan | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PlanPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlanSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlanPreviousValues | null> | prisma.PlanPreviousValues | null
  }
}
  

// Types for PlanPreviousValues

type PlanPreviousValuesObject =
  | PlanPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'isActive', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'currency', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PlanPreviousValuesFields =
  | 'id'
  | 'isActive'
  | 'isArchived'
  | 'isDeleted'
  | 'price'
  | 'type'
  | 'currency'
  | 'createdAt'
  | 'updatedAt'



  

export interface PlanPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isActive: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'PlanType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlanPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlanType | null> | prisma.PlanType | null
  }
  currency: {
    type: 'Currency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlanPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Currency> | prisma.Currency
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SessionSubscriptionPayload

type SessionSubscriptionPayloadObject =
  | SessionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SessionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SessionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SessionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Session'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SessionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Session | null> | prisma.Session | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SessionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SessionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SessionPreviousValues | null> | prisma.SessionPreviousValues | null
  }
}
  

// Types for SessionPreviousValues

type SessionPreviousValuesObject =
  | SessionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'expires_at', args?: [] | false, alias?: string  } 
  | { name: 'is_active', args?: [] | false, alias?: string  } 
  | { name: 'is_archived', args?: [] | false, alias?: string  } 
  | { name: 'is_deleted', args?: [] | false, alias?: string  } 
  | { name: 'signed_at', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type SessionPreviousValuesFields =
  | 'id'
  | 'expires_at'
  | 'is_active'
  | 'is_archived'
  | 'is_deleted'
  | 'signed_at'
  | 'createdAt'
  | 'updatedAt'



  

export interface SessionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expires_at: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  is_active: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  is_archived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  is_deleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  signed_at: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TimeSheetSubscriptionPayload

type TimeSheetSubscriptionPayloadObject =
  | TimeSheetSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TimeSheetSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TimeSheetSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'TimeSheet'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimeSheetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheet | null> | prisma.TimeSheet | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TimeSheetPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimeSheetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetPreviousValues | null> | prisma.TimeSheetPreviousValues | null
  }
}
  

// Types for TimeSheetPreviousValues

type TimeSheetPreviousValuesObject =
  | TimeSheetPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'endsAt', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'startsAt', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TimeSheetPreviousValuesFields =
  | 'id'
  | 'endsAt'
  | 'isArchived'
  | 'isDeleted'
  | 'number'
  | 'startsAt'
  | 'status'
  | 'createdAt'
  | 'updatedAt'



  

export interface TimeSheetPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  endsAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  startsAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  status: {
    type: 'TimeSheetStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimeSheetPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetStatus | null> | prisma.TimeSheetStatus | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AttachmentSubscriptionPayload

type AttachmentSubscriptionPayloadObject =
  | AttachmentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AttachmentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AttachmentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AttachmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Attachment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AttachmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Attachment | null> | prisma.Attachment | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AttachmentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AttachmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AttachmentPreviousValues | null> | prisma.AttachmentPreviousValues | null
  }
}
  

// Types for AttachmentPreviousValues

type AttachmentPreviousValuesObject =
  | AttachmentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'fileName', args?: [] | false, alias?: string  } 
  | { name: 'label', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 's3Bucket', args?: [] | false, alias?: string  } 
  | { name: 's3Key', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type AttachmentPreviousValuesFields =
  | 'id'
  | 'description'
  | 'fileName'
  | 'label'
  | 'url'
  | 's3Bucket'
  | 's3Key'
  | 'createdAt'
  | 'updatedAt'



  

export interface AttachmentPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  fileName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  label: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  s3Bucket: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  s3Key: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TimeSheetEntrySubscriptionPayload

type TimeSheetEntrySubscriptionPayloadObject =
  | TimeSheetEntrySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TimeSheetEntrySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TimeSheetEntrySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TimeSheetEntrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'TimeSheetEntry'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimeSheetEntrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntry | null> | prisma.TimeSheetEntry | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TimeSheetEntryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TimeSheetEntrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TimeSheetEntryPreviousValues | null> | prisma.TimeSheetEntryPreviousValues | null
  }
}
  

// Types for TimeSheetEntryPreviousValues

type TimeSheetEntryPreviousValuesObject =
  | TimeSheetEntryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'duration', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'isInvoiced', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TimeSheetEntryPreviousValuesFields =
  | 'id'
  | 'date'
  | 'duration'
  | 'isArchived'
  | 'isDeleted'
  | 'isInvoiced'
  | 'createdAt'
  | 'updatedAt'



  

export interface TimeSheetEntryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  duration: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isInvoiced: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InvoiceItemEntrySubscriptionPayload

type InvoiceItemEntrySubscriptionPayloadObject =
  | InvoiceItemEntrySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type InvoiceItemEntrySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface InvoiceItemEntrySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InvoiceItemEntrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'InvoiceItemEntry'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InvoiceItemEntrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntry | null> | prisma.InvoiceItemEntry | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'InvoiceItemEntryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InvoiceItemEntrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceItemEntryPreviousValues | null> | prisma.InvoiceItemEntryPreviousValues | null
  }
}
  

// Types for InvoiceItemEntryPreviousValues

type InvoiceItemEntryPreviousValuesObject =
  | InvoiceItemEntryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'order', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'quantity', args?: [] | false, alias?: string  } 
  | { name: 'tax', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type InvoiceItemEntryPreviousValuesFields =
  | 'id'
  | 'order'
  | 'description'
  | 'name'
  | 'price'
  | 'quantity'
  | 'tax'
  | 'createdAt'
  | 'updatedAt'



  

export interface InvoiceItemEntryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  order: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  quantity: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  tax: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InvoiceSubscriptionPayload

type InvoiceSubscriptionPayloadObject =
  | InvoiceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type InvoiceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface InvoiceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InvoiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Invoice'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InvoiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Invoice | null> | prisma.Invoice | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'InvoicePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InvoiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoicePreviousValues | null> | prisma.InvoicePreviousValues | null
  }
}
  

// Types for InvoicePreviousValues

type InvoicePreviousValuesObject =
  | InvoicePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'number', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'invoiceDate', args?: [] | false, alias?: string  } 
  | { name: 'dueDate', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'total', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type InvoicePreviousValuesFields =
  | 'id'
  | 'title'
  | 'number'
  | 'description'
  | 'invoiceDate'
  | 'dueDate'
  | 'status'
  | 'type'
  | 'total'
  | 'createdAt'
  | 'updatedAt'



  

export interface InvoicePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  number: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  invoiceDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dueDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  status: {
    type: 'InvoiceStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InvoicePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceStatus | null> | prisma.InvoiceStatus | null
  }
  type: {
    type: 'InvoiceType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InvoicePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InvoiceType | null> | prisma.InvoiceType | null
  }
  total: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MainAccountSubscriptionPayload

type MainAccountSubscriptionPayloadObject =
  | MainAccountSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MainAccountSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MainAccountSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainAccountSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'MainAccount'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MainAccountSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccount | null> | prisma.MainAccount | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MainAccountPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MainAccountSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccountPreviousValues | null> | prisma.MainAccountPreviousValues | null
  }
}
  

// Types for MainAccountPreviousValues

type MainAccountPreviousValuesObject =
  | MainAccountPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'ConsTaxFree', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type MainAccountPreviousValuesFields =
  | 'id'
  | 'code'
  | 'name'
  | 'description'
  | 'type'
  | 'ConsTaxFree'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface MainAccountPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'MainAccountType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainAccountPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainAccountType> | prisma.MainAccountType
  }
  ConsTaxFree: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LedgerJournalSubscriptionPayload

type LedgerJournalSubscriptionPayloadObject =
  | LedgerJournalSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type LedgerJournalSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface LedgerJournalSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerJournalSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'LedgerJournal'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LedgerJournalSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournal | null> | prisma.LedgerJournal | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'LedgerJournalPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LedgerJournalSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerJournalPreviousValues | null> | prisma.LedgerJournalPreviousValues | null
  }
}
  

// Types for LedgerJournalPreviousValues

type LedgerJournalPreviousValuesObject =
  | LedgerJournalPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'total', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'currency', args?: [] | false, alias?: string  } 
  | { name: 'includeConsTax', args?: [] | false, alias?: string  } 
  | { name: 'posted', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type LedgerJournalPreviousValuesFields =
  | 'id'
  | 'total'
  | 'description'
  | 'currency'
  | 'includeConsTax'
  | 'posted'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface LedgerJournalPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  total: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  currency: {
    type: 'Currency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerJournalPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Currency> | prisma.Currency
  }
  includeConsTax: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  posted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LedgerTransactionSubscriptionPayload

type LedgerTransactionSubscriptionPayloadObject =
  | LedgerTransactionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type LedgerTransactionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface LedgerTransactionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerTransactionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'LedgerTransaction'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LedgerTransactionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerTransaction | null> | prisma.LedgerTransaction | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'LedgerTransactionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LedgerTransactionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerTransactionPreviousValues | null> | prisma.LedgerTransactionPreviousValues | null
  }
}
  

// Types for LedgerTransactionPreviousValues

type LedgerTransactionPreviousValuesObject =
  | LedgerTransactionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'drcr', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'currency', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type LedgerTransactionPreviousValuesFields =
  | 'id'
  | 'drcr'
  | 'amount'
  | 'currency'
  | 'date'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface LedgerTransactionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  drcr: {
    type: 'DrCr'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerTransactionPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DrCr> | prisma.DrCr
  }
  amount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  currency: {
    type: 'Currency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerTransactionPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Currency> | prisma.Currency
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LedgerPostingSubscriptionPayload

type LedgerPostingSubscriptionPayloadObject =
  | LedgerPostingSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type LedgerPostingSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface LedgerPostingSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LedgerPostingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'LedgerPosting'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LedgerPostingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerPosting | null> | prisma.LedgerPosting | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'LedgerPostingPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LedgerPostingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LedgerPostingPreviousValues | null> | prisma.LedgerPostingPreviousValues | null
  }
}
  

// Types for LedgerPostingPreviousValues

type LedgerPostingPreviousValuesObject =
  | LedgerPostingPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'postingType', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type LedgerPostingPreviousValuesFields =
  | 'id'
  | 'postingType'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface LedgerPostingPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  postingType: {
    type: 'PostingType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LedgerPostingPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostingType | null> | prisma.PostingType | null
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BankSubscriptionPayload

type BankSubscriptionPayloadObject =
  | BankSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type BankSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface BankSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BankSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Bank'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BankSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bank | null> | prisma.Bank | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'BankPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BankSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankPreviousValues | null> | prisma.BankPreviousValues | null
  }
}
  

// Types for BankPreviousValues

type BankPreviousValuesObject =
  | BankPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'institution', args?: [] | false, alias?: string  } 
  | { name: 'bsb', args?: [] | false, alias?: string  } 
  | { name: 'accountNumber', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type BankPreviousValuesFields =
  | 'id'
  | 'name'
  | 'institution'
  | 'bsb'
  | 'accountNumber'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface BankPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  institution: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  bsb: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  accountNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BankTransactionSubscriptionPayload

type BankTransactionSubscriptionPayloadObject =
  | BankTransactionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type BankTransactionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface BankTransactionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BankTransactionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'BankTransaction'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BankTransactionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankTransaction | null> | prisma.BankTransaction | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'BankTransactionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BankTransactionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BankTransactionPreviousValues | null> | prisma.BankTransactionPreviousValues | null
  }
}
  

// Types for BankTransactionPreviousValues

type BankTransactionPreviousValuesObject =
  | BankTransactionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'transactionDate', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'posted', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type BankTransactionPreviousValuesFields =
  | 'id'
  | 'transactionDate'
  | 'amount'
  | 'description'
  | 'posted'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface BankTransactionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  transactionDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  amount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  posted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for WareHouseSubscriptionPayload

type WareHouseSubscriptionPayloadObject =
  | WareHouseSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type WareHouseSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface WareHouseSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"WareHouseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'WareHouse'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WareHouseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHouse | null> | prisma.WareHouse | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'WareHousePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"WareHouseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.WareHousePreviousValues | null> | prisma.WareHousePreviousValues | null
  }
}
  

// Types for WareHousePreviousValues

type WareHousePreviousValuesObject =
  | WareHousePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type WareHousePreviousValuesFields =
  | 'id'
  | 'name'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface WareHousePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InventorySubscriptionPayload

type InventorySubscriptionPayloadObject =
  | InventorySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type InventorySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface InventorySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InventorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Inventory'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InventorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Inventory | null> | prisma.Inventory | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'InventoryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InventorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryPreviousValues | null> | prisma.InventoryPreviousValues | null
  }
}
  

// Types for InventoryPreviousValues

type InventoryPreviousValuesObject =
  | InventoryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'inventoryModel', args?: [] | false, alias?: string  } 
  | { name: 'uom', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'SellingPrice', args?: [] | false, alias?: string  } 
  | { name: 'Barcode', args?: [] | false, alias?: string  } 
  | { name: 'Taxable', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type InventoryPreviousValuesFields =
  | 'id'
  | 'name'
  | 'inventoryModel'
  | 'uom'
  | 'price'
  | 'SellingPrice'
  | 'Barcode'
  | 'Taxable'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface InventoryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  inventoryModel: {
    type: 'InventoryModel'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InventoryPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryModel | null> | prisma.InventoryModel | null
  }
  uom: {
    type: 'UOM'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InventoryPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UOM | null> | prisma.UOM | null
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  SellingPrice: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  Barcode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  Taxable: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SupplierSubscriptionPayload

type SupplierSubscriptionPayloadObject =
  | SupplierSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SupplierSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SupplierSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SupplierSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Supplier'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SupplierSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Supplier | null> | prisma.Supplier | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SupplierPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SupplierSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SupplierPreviousValues | null> | prisma.SupplierPreviousValues | null
  }
}
  

// Types for SupplierPreviousValues

type SupplierPreviousValuesObject =
  | SupplierPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'termsOfPayment', args?: [] | false, alias?: string  } 
  | { name: 'bankAccount', args?: [] | false, alias?: string  } 
  | { name: 'emailAddressForRemittance', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type SupplierPreviousValuesFields =
  | 'id'
  | 'name'
  | 'termsOfPayment'
  | 'bankAccount'
  | 'emailAddressForRemittance'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface SupplierPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  termsOfPayment: {
    type: 'SupplierTermsOfPayment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SupplierPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SupplierTermsOfPayment | null> | prisma.SupplierTermsOfPayment | null
  }
  bankAccount: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  emailAddressForRemittance: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AssetGroupSubscriptionPayload

type AssetGroupSubscriptionPayloadObject =
  | AssetGroupSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AssetGroupSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AssetGroupSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssetGroupSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'AssetGroup'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AssetGroupSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroup | null> | prisma.AssetGroup | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AssetGroupPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AssetGroupSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroupPreviousValues | null> | prisma.AssetGroupPreviousValues | null
  }
}
  

// Types for AssetGroupPreviousValues

type AssetGroupPreviousValuesObject =
  | AssetGroupPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'depreciationType', args?: [] | false, alias?: string  } 
  | { name: 'usefulLife', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type AssetGroupPreviousValuesFields =
  | 'id'
  | 'name'
  | 'depreciationType'
  | 'usefulLife'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface AssetGroupPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  depreciationType: {
    type: 'AssetGroupDepreciationType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AssetGroupPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetGroupDepreciationType | null> | prisma.AssetGroupDepreciationType | null
  }
  usefulLife: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AssetSubscriptionPayload

type AssetSubscriptionPayloadObject =
  | AssetSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AssetSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AssetSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AssetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Asset'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AssetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Asset | null> | prisma.Asset | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AssetPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AssetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AssetPreviousValues | null> | prisma.AssetPreviousValues | null
  }
}
  

// Types for AssetPreviousValues

type AssetPreviousValuesObject =
  | AssetPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'dateOfAquisition', args?: [] | false, alias?: string  } 
  | { name: 'aquisitionPrice', args?: [] | false, alias?: string  } 
  | { name: 'netBookValue', args?: [] | false, alias?: string  } 
  | { name: 'depreciation', args?: [] | false, alias?: string  } 
  | { name: 'salvageValue', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type AssetPreviousValuesFields =
  | 'id'
  | 'name'
  | 'dateOfAquisition'
  | 'aquisitionPrice'
  | 'netBookValue'
  | 'depreciation'
  | 'salvageValue'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface AssetPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateOfAquisition: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  aquisitionPrice: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  netBookValue: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  depreciation: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  salvageValue: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PurchaseOrderSubscriptionPayload

type PurchaseOrderSubscriptionPayloadObject =
  | PurchaseOrderSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PurchaseOrderSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PurchaseOrderSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PurchaseOrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PurchaseOrder'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrder | null> | prisma.PurchaseOrder | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PurchaseOrderPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderPreviousValues | null> | prisma.PurchaseOrderPreviousValues | null
  }
}
  

// Types for PurchaseOrderPreviousValues

type PurchaseOrderPreviousValuesObject =
  | PurchaseOrderPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'pbsOrganisation', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'isPbsPO', args?: [] | false, alias?: string  } 
  | { name: 'poNumber', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PurchaseOrderPreviousValuesFields =
  | 'id'
  | 'pbsOrganisation'
  | 'date'
  | 'status'
  | 'isPbsPO'
  | 'poNumber'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface PurchaseOrderPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  pbsOrganisation: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  status: {
    type: 'PoStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrderPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoStatus | null> | prisma.PoStatus | null
  }
  isPbsPO: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  poNumber: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PoReceiptSubscriptionPayload

type PoReceiptSubscriptionPayloadObject =
  | PoReceiptSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PoReceiptSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PoReceiptSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PoReceiptSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PoReceipt'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PoReceiptSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceipt | null> | prisma.PoReceipt | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PoReceiptPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PoReceiptSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PoReceiptPreviousValues | null> | prisma.PoReceiptPreviousValues | null
  }
}
  

// Types for PoReceiptPreviousValues

type PoReceiptPreviousValuesObject =
  | PoReceiptPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'receiptNumber', args?: [] | false, alias?: string  } 
  | { name: 'receiptDate', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PoReceiptPreviousValuesFields =
  | 'id'
  | 'receiptNumber'
  | 'receiptDate'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface PoReceiptPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  receiptNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  receiptDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for InventoryOnHandSubscriptionPayload

type InventoryOnHandSubscriptionPayloadObject =
  | InventoryOnHandSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type InventoryOnHandSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface InventoryOnHandSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"InventoryOnHandSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'InventoryOnHand'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InventoryOnHandSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryOnHand | null> | prisma.InventoryOnHand | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'InventoryOnHandPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"InventoryOnHandSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.InventoryOnHandPreviousValues | null> | prisma.InventoryOnHandPreviousValues | null
  }
}
  

// Types for InventoryOnHandPreviousValues

type InventoryOnHandPreviousValuesObject =
  | InventoryOnHandPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'date', args?: [] | false, alias?: string  } 
  | { name: 'pbsDrug', args?: [] | false, alias?: string  } 
  | { name: 'onHandQty', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type InventoryOnHandPreviousValuesFields =
  | 'id'
  | 'date'
  | 'pbsDrug'
  | 'onHandQty'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface InventoryOnHandPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  date: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  pbsDrug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  onHandQty: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PurchaseOrderLineSubscriptionPayload

type PurchaseOrderLineSubscriptionPayloadObject =
  | PurchaseOrderLineSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PurchaseOrderLineSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PurchaseOrderLineSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PurchaseOrderLineSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PurchaseOrderLine'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrderLineSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderLine | null> | prisma.PurchaseOrderLine | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PurchaseOrderLinePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrderLineSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PurchaseOrderLinePreviousValues | null> | prisma.PurchaseOrderLinePreviousValues | null
  }
}
  

// Types for PurchaseOrderLinePreviousValues

type PurchaseOrderLinePreviousValuesObject =
  | PurchaseOrderLinePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'pbsDrug', args?: [] | false, alias?: string  } 
  | { name: 'qty', args?: [] | false, alias?: string  } 
  | { name: 'unit', args?: [] | false, alias?: string  } 
  | { name: 'unitPrice', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PurchaseOrderLinePreviousValuesFields =
  | 'id'
  | 'pbsDrug'
  | 'qty'
  | 'unit'
  | 'unitPrice'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface PurchaseOrderLinePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  pbsDrug: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  qty: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  unit: {
    type: 'UOM'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PurchaseOrderLinePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UOM | null> | prisma.UOM | null
  }
  unitPrice: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ApInvoiceSubscriptionPayload

type ApInvoiceSubscriptionPayloadObject =
  | ApInvoiceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ApInvoiceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ApInvoiceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ApInvoiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ApInvoice'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ApInvoiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoice | null> | prisma.ApInvoice | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ApInvoicePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ApInvoiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoicePreviousValues | null> | prisma.ApInvoicePreviousValues | null
  }
}
  

// Types for ApInvoicePreviousValues

type ApInvoicePreviousValuesObject =
  | ApInvoicePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'invoiceNumber', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ApInvoicePreviousValuesFields =
  | 'id'
  | 'status'
  | 'invoiceNumber'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface ApInvoicePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'ApInvoiceStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ApInvoicePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ApInvoiceStatus | null> | prisma.ApInvoiceStatus | null
  }
  invoiceNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SalesOrderSubscriptionPayload

type SalesOrderSubscriptionPayloadObject =
  | SalesOrderSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SalesOrderSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SalesOrderSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SalesOrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'SalesOrder'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SalesOrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrder | null> | prisma.SalesOrder | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SalesOrderPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SalesOrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderPreviousValues | null> | prisma.SalesOrderPreviousValues | null
  }
}
  

// Types for SalesOrderPreviousValues

type SalesOrderPreviousValuesObject =
  | SalesOrderPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'transactionDate', args?: [] | false, alias?: string  } 
  | { name: 'currency', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type SalesOrderPreviousValuesFields =
  | 'id'
  | 'transactionDate'
  | 'currency'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface SalesOrderPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  transactionDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  currency: {
    type: 'Currency'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SalesOrderPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Currency | null> | prisma.Currency | null
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SalesOrderLineSubscriptionPayload

type SalesOrderLineSubscriptionPayloadObject =
  | SalesOrderLineSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SalesOrderLineSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SalesOrderLineSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SalesOrderLineSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'SalesOrderLine'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SalesOrderLineSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderLine | null> | prisma.SalesOrderLine | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SalesOrderLinePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SalesOrderLineSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalesOrderLinePreviousValues | null> | prisma.SalesOrderLinePreviousValues | null
  }
}
  

// Types for SalesOrderLinePreviousValues

type SalesOrderLinePreviousValuesObject =
  | SalesOrderLinePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'qty', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type SalesOrderLinePreviousValuesFields =
  | 'id'
  | 'qty'
  | 'price'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface SalesOrderLinePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  qty: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PredictedSalesValueByCompanySubscriptionPayload

type PredictedSalesValueByCompanySubscriptionPayloadObject =
  | PredictedSalesValueByCompanySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PredictedSalesValueByCompanySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PredictedSalesValueByCompanySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictedSalesValueByCompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PredictedSalesValueByCompany'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PredictedSalesValueByCompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesValueByCompany | null> | prisma.PredictedSalesValueByCompany | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PredictedSalesValueByCompanyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PredictedSalesValueByCompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesValueByCompanyPreviousValues | null> | prisma.PredictedSalesValueByCompanyPreviousValues | null
  }
}
  

// Types for PredictedSalesValueByCompanyPreviousValues

type PredictedSalesValueByCompanyPreviousValuesObject =
  | PredictedSalesValueByCompanyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'datePredictionRun', args?: [] | false, alias?: string  } 
  | { name: 'predictedSalesValue', args?: [] | false, alias?: string  } 
  | { name: 'predictedDate', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PredictedSalesValueByCompanyPreviousValuesFields =
  | 'id'
  | 'datePredictionRun'
  | 'predictedSalesValue'
  | 'predictedDate'
  | 'createdAt'
  | 'updatedAt'



  

export interface PredictedSalesValueByCompanyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  datePredictionRun: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  predictedSalesValue: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  predictedDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PredictedSalesQuantityOfItemsByCompanySubscriptionPayload

type PredictedSalesQuantityOfItemsByCompanySubscriptionPayloadObject =
  | PredictedSalesQuantityOfItemsByCompanySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PredictedSalesQuantityOfItemsByCompanySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PredictedSalesQuantityOfItemsByCompanySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictedSalesQuantityOfItemsByCompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PredictedSalesQuantityOfItemsByCompany'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PredictedSalesQuantityOfItemsByCompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesQuantityOfItemsByCompany | null> | prisma.PredictedSalesQuantityOfItemsByCompany | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PredictedSalesQuantityOfItemsByCompanyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PredictedSalesQuantityOfItemsByCompanySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictedSalesQuantityOfItemsByCompanyPreviousValues | null> | prisma.PredictedSalesQuantityOfItemsByCompanyPreviousValues | null
  }
}
  

// Types for PredictedSalesQuantityOfItemsByCompanyPreviousValues

type PredictedSalesQuantityOfItemsByCompanyPreviousValuesObject =
  | PredictedSalesQuantityOfItemsByCompanyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'datePredictionRun', args?: [] | false, alias?: string  } 
  | { name: 'predictedSalesValue', args?: [] | false, alias?: string  } 
  | { name: 'predictedDate', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PredictedSalesQuantityOfItemsByCompanyPreviousValuesFields =
  | 'id'
  | 'datePredictionRun'
  | 'predictedSalesValue'
  | 'predictedDate'
  | 'createdAt'
  | 'updatedAt'



  

export interface PredictedSalesQuantityOfItemsByCompanyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  datePredictionRun: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  predictedSalesValue: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  predictedDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MedicareServiceSubscriptionPayload

type MedicareServiceSubscriptionPayloadObject =
  | MedicareServiceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MedicareServiceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MedicareServiceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MedicareServiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'MedicareService'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MedicareServiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MedicareService | null> | prisma.MedicareService | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MedicareServicePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MedicareServiceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MedicareServicePreviousValues | null> | prisma.MedicareServicePreviousValues | null
  }
}
  

// Types for MedicareServicePreviousValues

type MedicareServicePreviousValuesObject =
  | MedicareServicePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'MBSScheduleFee', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'isActive', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type MedicareServicePreviousValuesFields =
  | 'id'
  | 'MBSScheduleFee'
  | 'description'
  | 'isActive'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface MedicareServicePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  MBSScheduleFee: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isActive: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PatientSubscriptionPayload

type PatientSubscriptionPayloadObject =
  | PatientSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PatientSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PatientSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PatientSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Patient'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PatientSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient | null> | prisma.Patient | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PatientPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PatientSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PatientPreviousValues | null> | prisma.PatientPreviousValues | null
  }
}
  

// Types for PatientPreviousValues

type PatientPreviousValuesObject =
  | PatientPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'dateOfBirth', args?: [] | false, alias?: string  } 
  | { name: 'gender', args?: [] | false, alias?: string  } 
  | { name: 'dvaCardType', args?: [] | false, alias?: string  } 
  | { name: 'aboriginalStatus', args?: [] | false, alias?: string  } 
  | { name: 'pensionerConcession', args?: [] | false, alias?: string  } 
  | { name: 'commonwealthSeniors', args?: [] | false, alias?: string  } 
  | { name: 'healthcareConcession', args?: [] | false, alias?: string  } 
  | { name: 'safetyNetConcession', args?: [] | false, alias?: string  } 
  | { name: 'medicareNumber', args?: [] | false, alias?: string  } 
  | { name: 'DVA', args?: [] | false, alias?: string  } 
  | { name: 'potentialDuplicate', args?: [] | false, alias?: string  } 
  | { name: 'oneName', args?: [] | false, alias?: string  } 
  | { name: 'ihi', args?: [] | false, alias?: string  } 
  | { name: 'ihiValidatedDate', args?: [] | false, alias?: string  } 
  | { name: 'noOfBirths', args?: [] | false, alias?: string  } 
  | { name: 'deceasedDate', args?: [] | false, alias?: string  } 
  | { name: 'levelOfCare', args?: [] | false, alias?: string  } 
  | { name: 'dateEnteredAgedCare', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PatientPreviousValuesFields =
  | 'id'
  | 'title'
  | 'firstName'
  | 'lastName'
  | 'dateOfBirth'
  | 'gender'
  | 'dvaCardType'
  | 'aboriginalStatus'
  | 'pensionerConcession'
  | 'commonwealthSeniors'
  | 'healthcareConcession'
  | 'safetyNetConcession'
  | 'medicareNumber'
  | 'DVA'
  | 'potentialDuplicate'
  | 'oneName'
  | 'ihi'
  | 'ihiValidatedDate'
  | 'noOfBirths'
  | 'deceasedDate'
  | 'levelOfCare'
  | 'dateEnteredAgedCare'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface PatientPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateOfBirth: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  gender: {
    type: 'Gender'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PatientPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gender | null> | prisma.Gender | null
  }
  dvaCardType: {
    type: 'DVACardType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PatientPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DVACardType | null> | prisma.DVACardType | null
  }
  aboriginalStatus: {
    type: 'AboriginalStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PatientPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AboriginalStatus | null> | prisma.AboriginalStatus | null
  }
  pensionerConcession: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  commonwealthSeniors: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  healthcareConcession: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  safetyNetConcession: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  medicareNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  DVA: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  potentialDuplicate: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  oneName: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  ihi: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  ihiValidatedDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  noOfBirths: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  deceasedDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  levelOfCare: {
    type: 'LevelOfCare'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PatientPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LevelOfCare | null> | prisma.LevelOfCare | null
  }
  dateEnteredAgedCare: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for NameSubscriptionPayload

type NameSubscriptionPayloadObject =
  | NameSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type NameSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface NameSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NameSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Name'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NameSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Name | null> | prisma.Name | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'NamePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NameSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NamePreviousValues | null> | prisma.NamePreviousValues | null
  }
}
  

// Types for NamePreviousValues

type NamePreviousValuesObject =
  | NamePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'isPrimary', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type NamePreviousValuesFields =
  | 'id'
  | 'name'
  | 'isPrimary'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface NamePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isPrimary: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for HealthcareProviderSubscriptionPayload

type HealthcareProviderSubscriptionPayloadObject =
  | HealthcareProviderSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type HealthcareProviderSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface HealthcareProviderSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HealthcareProviderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'HealthcareProvider'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HealthcareProviderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HealthcareProvider | null> | prisma.HealthcareProvider | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'HealthcareProviderPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HealthcareProviderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HealthcareProviderPreviousValues | null> | prisma.HealthcareProviderPreviousValues | null
  }
}
  

// Types for HealthcareProviderPreviousValues

type HealthcareProviderPreviousValuesObject =
  | HealthcareProviderPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'occupation', args?: [] | false, alias?: string  } 
  | { name: 'hpii', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'dateOfBirth', args?: [] | false, alias?: string  } 
  | { name: 'emailAddress', args?: [] | false, alias?: string  } 
  | { name: 'gender', args?: [] | false, alias?: string  } 
  | { name: 'ahpraNumber', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type HealthcareProviderPreviousValuesFields =
  | 'id'
  | 'occupation'
  | 'hpii'
  | 'firstName'
  | 'lastName'
  | 'dateOfBirth'
  | 'emailAddress'
  | 'gender'
  | 'ahpraNumber'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface HealthcareProviderPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  occupation: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  hpii: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateOfBirth: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  emailAddress: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  gender: {
    type: 'Gender'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HealthcareProviderPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gender | null> | prisma.Gender | null
  }
  ahpraNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ImmunisationScheduleSubscriptionPayload

type ImmunisationScheduleSubscriptionPayloadObject =
  | ImmunisationScheduleSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ImmunisationScheduleSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ImmunisationScheduleSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ImmunisationScheduleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ImmunisationSchedule'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ImmunisationScheduleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImmunisationSchedule | null> | prisma.ImmunisationSchedule | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ImmunisationSchedulePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ImmunisationScheduleSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ImmunisationSchedulePreviousValues | null> | prisma.ImmunisationSchedulePreviousValues | null
  }
}
  

// Types for ImmunisationSchedulePreviousValues

type ImmunisationSchedulePreviousValuesObject =
  | ImmunisationSchedulePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'ageNumber', args?: [] | false, alias?: string  } 
  | { name: 'agePeriod', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ImmunisationSchedulePreviousValuesFields =
  | 'id'
  | 'ageNumber'
  | 'agePeriod'
  | 'createdAt'
  | 'updatedAt'



  

export interface ImmunisationSchedulePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  ageNumber: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  agePeriod: {
    type: 'PeriodUnit'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ImmunisationSchedulePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PeriodUnit | null> | prisma.PeriodUnit | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VaccineBrandSubscriptionPayload

type VaccineBrandSubscriptionPayloadObject =
  | VaccineBrandSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type VaccineBrandSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface VaccineBrandSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VaccineBrandSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'VaccineBrand'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VaccineBrandSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrand | null> | prisma.VaccineBrand | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'VaccineBrandPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VaccineBrandSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VaccineBrandPreviousValues | null> | prisma.VaccineBrandPreviousValues | null
  }
}
  

// Types for VaccineBrandPreviousValues

type VaccineBrandPreviousValuesObject =
  | VaccineBrandPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type VaccineBrandPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface VaccineBrandPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for DiseaseSubscriptionPayload

type DiseaseSubscriptionPayloadObject =
  | DiseaseSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DiseaseSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DiseaseSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DiseaseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Disease'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DiseaseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Disease | null> | prisma.Disease | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DiseasePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DiseaseSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DiseasePreviousValues | null> | prisma.DiseasePreviousValues | null
  }
}
  

// Types for DiseasePreviousValues

type DiseasePreviousValuesObject =
  | DiseasePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type DiseasePreviousValuesFields =
  | 'id'
  | 'name'



  

export interface DiseasePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for HILogSubscriptionPayload

type HILogSubscriptionPayloadObject =
  | HILogSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type HILogSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface HILogSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"HILogSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'HILog'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HILogSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HILog | null> | prisma.HILog | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'HILogPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HILogSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HILogPreviousValues | null> | prisma.HILogPreviousValues | null
  }
}
  

// Types for HILogPreviousValues

type HILogPreviousValuesObject =
  | HILogPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'hpio', args?: [] | false, alias?: string  } 
  | { name: 'hpii', args?: [] | false, alias?: string  } 
  | { name: 'ihi', args?: [] | false, alias?: string  } 
  | { name: 'timeWaitedForSalus', args?: [] | false, alias?: string  } 
  | { name: 'csp', args?: [] | false, alias?: string  } 
  | { name: 'hiWebServiceUsed', args?: [] | false, alias?: string  } 
  | { name: 'hiWebServiceVersion', args?: [] | false, alias?: string  } 
  | { name: 'hiNumberStatus', args?: [] | false, alias?: string  } 
  | { name: 'recordStatus', args?: [] | false, alias?: string  } 
  | { name: 'salusResponse', args?: [] | false, alias?: string  } 
  | { name: 'failureMessage', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type HILogPreviousValuesFields =
  | 'id'
  | 'hpio'
  | 'hpii'
  | 'ihi'
  | 'timeWaitedForSalus'
  | 'csp'
  | 'hiWebServiceUsed'
  | 'hiWebServiceVersion'
  | 'hiNumberStatus'
  | 'recordStatus'
  | 'salusResponse'
  | 'failureMessage'
  | 'createdAt'
  | 'updatedAt'



  

export interface HILogPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hpio: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  hpii: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  ihi: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  timeWaitedForSalus: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  csp: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  hiWebServiceUsed: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  hiWebServiceVersion: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  hiNumberStatus: {
    type: 'HINumberStatus'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HILogPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.HINumberStatus | null> | prisma.HINumberStatus | null
  }
  recordStatus: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  salusResponse: {
    type: 'SalusResponse'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"HILogPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SalusResponse | null> | prisma.SalusResponse | null
  }
  failureMessage: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PbsOrganisationSubscriptionPayload

type PbsOrganisationSubscriptionPayloadObject =
  | PbsOrganisationSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PbsOrganisationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PbsOrganisationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PbsOrganisationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PbsOrganisation'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PbsOrganisationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisation | null> | prisma.PbsOrganisation | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PbsOrganisationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PbsOrganisationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsOrganisationPreviousValues | null> | prisma.PbsOrganisationPreviousValues | null
  }
}
  

// Types for PbsOrganisationPreviousValues

type PbsOrganisationPreviousValuesObject =
  | PbsOrganisationPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'street', args?: [] | false, alias?: string  } 
  | { name: 'city', args?: [] | false, alias?: string  } 
  | { name: 'stateAddress', args?: [] | false, alias?: string  } 
  | { name: 'postcode', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'effectiveFrom', args?: [] | false, alias?: string  } 
  | { name: 'effectiveTo', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PbsOrganisationPreviousValuesFields =
  | 'id'
  | 'code'
  | 'title'
  | 'street'
  | 'city'
  | 'stateAddress'
  | 'postcode'
  | 'phone'
  | 'effectiveFrom'
  | 'effectiveTo'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface PbsOrganisationPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  street: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  city: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  stateAddress: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  postcode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  effectiveFrom: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  effectiveTo: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PbsTPPSubscriptionPayload

type PbsTPPSubscriptionPayloadObject =
  | PbsTPPSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PbsTPPSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PbsTPPSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PbsTPPSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PbsTPP'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PbsTPPSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsTPP | null> | prisma.PbsTPP | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PbsTPPPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PbsTPPSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PbsTPPPreviousValues | null> | prisma.PbsTPPPreviousValues | null
  }
}
  

// Types for PbsTPPPreviousValues

type PbsTPPPreviousValuesObject =
  | PbsTPPPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'snomedCode', args?: [] | false, alias?: string  } 
  | { name: 'clinicalPreferredTerm', args?: [] | false, alias?: string  } 
  | { name: 'packSize', args?: [] | false, alias?: string  } 
  | { name: 'brandName', args?: [] | false, alias?: string  } 
  | { name: 'exManufacturerPrice', args?: [] | false, alias?: string  } 
  | { name: 'pricingModel', args?: [] | false, alias?: string  } 
  | { name: 'mpp_id', args?: [] | false, alias?: string  } 
  | { name: 'effectiveFrom', args?: [] | false, alias?: string  } 
  | { name: 'effectiveTo', args?: [] | false, alias?: string  } 
  | { name: 'isArchived', args?: [] | false, alias?: string  } 
  | { name: 'isDeleted', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type PbsTPPPreviousValuesFields =
  | 'id'
  | 'snomedCode'
  | 'clinicalPreferredTerm'
  | 'packSize'
  | 'brandName'
  | 'exManufacturerPrice'
  | 'pricingModel'
  | 'mpp_id'
  | 'effectiveFrom'
  | 'effectiveTo'
  | 'isArchived'
  | 'isDeleted'
  | 'createdAt'
  | 'updatedAt'



  

export interface PbsTPPPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  snomedCode: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  clinicalPreferredTerm: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  packSize: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  brandName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  exManufacturerPrice: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  pricingModel: {
    type: 'PBSPricingModel'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PbsTPPPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PBSPricingModel | null> | prisma.PBSPricingModel | null
  }
  mpp_id: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  effectiveFrom: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  effectiveTo: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isArchived: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isDeleted: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MeansTestedFeeSubscriptionPayload

type MeansTestedFeeSubscriptionPayloadObject =
  | MeansTestedFeeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MeansTestedFeeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MeansTestedFeeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MeansTestedFeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'MeansTestedFee'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MeansTestedFeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFee | null> | prisma.MeansTestedFee | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MeansTestedFeePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MeansTestedFeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestedFeePreviousValues | null> | prisma.MeansTestedFeePreviousValues | null
  }
}
  

// Types for MeansTestedFeePreviousValues

type MeansTestedFeePreviousValuesObject =
  | MeansTestedFeePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'amount', args?: [] | false, alias?: string  } 
  | { name: 'currency', args?: [] | false, alias?: string  } 
  | { name: 'dateFrom', args?: [] | false, alias?: string  } 
  | { name: 'dateTo', args?: [] | false, alias?: string  } 

type MeansTestedFeePreviousValuesFields =
  | 'id'
  | 'amount'
  | 'currency'
  | 'dateFrom'
  | 'dateTo'



  

export interface MeansTestedFeePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  amount: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  currency: {
    type: 'Currency'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MeansTestedFeePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Currency | null> | prisma.Currency | null
  }
  dateFrom: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateTo: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for MeansTestLimitsSubscriptionPayload

type MeansTestLimitsSubscriptionPayloadObject =
  | MeansTestLimitsSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MeansTestLimitsSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MeansTestLimitsSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MeansTestLimitsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'MeansTestLimits'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MeansTestLimitsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestLimits | null> | prisma.MeansTestLimits | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MeansTestLimitsPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MeansTestLimitsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MeansTestLimitsPreviousValues | null> | prisma.MeansTestLimitsPreviousValues | null
  }
}
  

// Types for MeansTestLimitsPreviousValues

type MeansTestLimitsPreviousValuesObject =
  | MeansTestLimitsPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'annual', args?: [] | false, alias?: string  } 
  | { name: 'lifetime', args?: [] | false, alias?: string  } 
  | { name: 'dateFrom', args?: [] | false, alias?: string  } 
  | { name: 'dateTo', args?: [] | false, alias?: string  } 

type MeansTestLimitsPreviousValuesFields =
  | 'id'
  | 'annual'
  | 'lifetime'
  | 'dateFrom'
  | 'dateTo'



  

export interface MeansTestLimitsPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  annual: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lifetime: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateFrom: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateTo: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for BasicDailyFeeSubscriptionPayload

type BasicDailyFeeSubscriptionPayloadObject =
  | BasicDailyFeeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type BasicDailyFeeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface BasicDailyFeeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BasicDailyFeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'BasicDailyFee'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BasicDailyFeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFee | null> | prisma.BasicDailyFee | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'BasicDailyFeePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BasicDailyFeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BasicDailyFeePreviousValues | null> | prisma.BasicDailyFeePreviousValues | null
  }
}
  

// Types for BasicDailyFeePreviousValues

type BasicDailyFeePreviousValuesObject =
  | BasicDailyFeePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'level', args?: [] | false, alias?: string  } 
  | { name: 'rate', args?: [] | false, alias?: string  } 
  | { name: 'dateFrom', args?: [] | false, alias?: string  } 
  | { name: 'dateTo', args?: [] | false, alias?: string  } 
  | { name: 'rechargeable', args?: [] | false, alias?: string  } 

type BasicDailyFeePreviousValuesFields =
  | 'id'
  | 'level'
  | 'rate'
  | 'dateFrom'
  | 'dateTo'
  | 'rechargeable'



  

export interface BasicDailyFeePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  level: {
    type: 'LevelOfCare'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BasicDailyFeePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LevelOfCare | null> | prisma.LevelOfCare | null
  }
  rate: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateFrom: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  dateTo: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  rechargeable: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  isActive?: boolean | null
  isActive_not?: boolean | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  isRoot?: boolean | null
  isRoot_not?: boolean | null
  jobTitle?: string | null
  jobTitle_not?: string | null
  jobTitle_in?: string[]
  jobTitle_not_in?: string[]
  jobTitle_lt?: string | null
  jobTitle_lte?: string | null
  jobTitle_gt?: string | null
  jobTitle_gte?: string | null
  jobTitle_contains?: string | null
  jobTitle_not_contains?: string | null
  jobTitle_starts_with?: string | null
  jobTitle_not_starts_with?: string | null
  jobTitle_ends_with?: string | null
  jobTitle_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  secondAuthEnabled?: boolean | null
  secondAuthEnabled_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isActive_not', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'isRoot', alias?: string  } 
  | { name: 'isRoot_not', alias?: string  } 
  | { name: 'jobTitle', alias?: string  } 
  | { name: 'jobTitle_not', alias?: string  } 
  | { name: 'jobTitle_in', alias?: string  } 
  | { name: 'jobTitle_not_in', alias?: string  } 
  | { name: 'jobTitle_lt', alias?: string  } 
  | { name: 'jobTitle_lte', alias?: string  } 
  | { name: 'jobTitle_gt', alias?: string  } 
  | { name: 'jobTitle_gte', alias?: string  } 
  | { name: 'jobTitle_contains', alias?: string  } 
  | { name: 'jobTitle_not_contains', alias?: string  } 
  | { name: 'jobTitle_starts_with', alias?: string  } 
  | { name: 'jobTitle_not_starts_with', alias?: string  } 
  | { name: 'jobTitle_ends_with', alias?: string  } 
  | { name: 'jobTitle_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'secondAuthEnabled', alias?: string  } 
  | { name: 'secondAuthEnabled_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AddressWhereUniqueInput {
  id?: string | null
}
export type AddressWhereUniqueInputInputObject =
  | Extract<keyof AddressWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AddressWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  street?: string | null
  street_not?: string | null
  street_in?: string[]
  street_not_in?: string[]
  street_lt?: string | null
  street_lte?: string | null
  street_gt?: string | null
  street_gte?: string | null
  street_contains?: string | null
  street_not_contains?: string | null
  street_starts_with?: string | null
  street_not_starts_with?: string | null
  street_ends_with?: string | null
  street_not_ends_with?: string | null
  city?: string | null
  city_not?: string | null
  city_in?: string[]
  city_not_in?: string[]
  city_lt?: string | null
  city_lte?: string | null
  city_gt?: string | null
  city_gte?: string | null
  city_contains?: string | null
  city_not_contains?: string | null
  city_starts_with?: string | null
  city_not_starts_with?: string | null
  city_ends_with?: string | null
  city_not_ends_with?: string | null
  state?: string | null
  state_not?: string | null
  state_in?: string[]
  state_not_in?: string[]
  state_lt?: string | null
  state_lte?: string | null
  state_gt?: string | null
  state_gte?: string | null
  state_contains?: string | null
  state_not_contains?: string | null
  state_starts_with?: string | null
  state_not_starts_with?: string | null
  state_ends_with?: string | null
  state_not_ends_with?: string | null
  country?: string | null
  country_not?: string | null
  country_in?: string[]
  country_not_in?: string[]
  country_lt?: string | null
  country_lte?: string | null
  country_gt?: string | null
  country_gte?: string | null
  country_contains?: string | null
  country_not_contains?: string | null
  country_starts_with?: string | null
  country_not_starts_with?: string | null
  country_ends_with?: string | null
  country_not_ends_with?: string | null
  postCode?: string | null
  postCode_not?: string | null
  postCode_in?: string[]
  postCode_not_in?: string[]
  postCode_lt?: string | null
  postCode_lte?: string | null
  postCode_gt?: string | null
  postCode_gte?: string | null
  postCode_contains?: string | null
  postCode_not_contains?: string | null
  postCode_starts_with?: string | null
  postCode_not_starts_with?: string | null
  postCode_ends_with?: string | null
  postCode_not_ends_with?: string | null
  latitude?: string | null
  latitude_not?: string | null
  latitude_in?: string[]
  latitude_not_in?: string[]
  latitude_lt?: string | null
  latitude_lte?: string | null
  latitude_gt?: string | null
  latitude_gte?: string | null
  latitude_contains?: string | null
  latitude_not_contains?: string | null
  latitude_starts_with?: string | null
  latitude_not_starts_with?: string | null
  latitude_ends_with?: string | null
  latitude_not_ends_with?: string | null
  longitude?: string | null
  longitude_not?: string | null
  longitude_in?: string[]
  longitude_not_in?: string[]
  longitude_lt?: string | null
  longitude_lte?: string | null
  longitude_gt?: string | null
  longitude_gte?: string | null
  longitude_contains?: string | null
  longitude_not_contains?: string | null
  longitude_starts_with?: string | null
  longitude_not_starts_with?: string | null
  longitude_ends_with?: string | null
  longitude_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: AddressWhereInput[]
  OR?: AddressWhereInput[]
  NOT?: AddressWhereInput[]
}
export type AddressWhereInputInputObject =
  | Extract<keyof AddressWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'street_not', alias?: string  } 
  | { name: 'street_in', alias?: string  } 
  | { name: 'street_not_in', alias?: string  } 
  | { name: 'street_lt', alias?: string  } 
  | { name: 'street_lte', alias?: string  } 
  | { name: 'street_gt', alias?: string  } 
  | { name: 'street_gte', alias?: string  } 
  | { name: 'street_contains', alias?: string  } 
  | { name: 'street_not_contains', alias?: string  } 
  | { name: 'street_starts_with', alias?: string  } 
  | { name: 'street_not_starts_with', alias?: string  } 
  | { name: 'street_ends_with', alias?: string  } 
  | { name: 'street_not_ends_with', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'city_not', alias?: string  } 
  | { name: 'city_in', alias?: string  } 
  | { name: 'city_not_in', alias?: string  } 
  | { name: 'city_lt', alias?: string  } 
  | { name: 'city_lte', alias?: string  } 
  | { name: 'city_gt', alias?: string  } 
  | { name: 'city_gte', alias?: string  } 
  | { name: 'city_contains', alias?: string  } 
  | { name: 'city_not_contains', alias?: string  } 
  | { name: 'city_starts_with', alias?: string  } 
  | { name: 'city_not_starts_with', alias?: string  } 
  | { name: 'city_ends_with', alias?: string  } 
  | { name: 'city_not_ends_with', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'state_lt', alias?: string  } 
  | { name: 'state_lte', alias?: string  } 
  | { name: 'state_gt', alias?: string  } 
  | { name: 'state_gte', alias?: string  } 
  | { name: 'state_contains', alias?: string  } 
  | { name: 'state_not_contains', alias?: string  } 
  | { name: 'state_starts_with', alias?: string  } 
  | { name: 'state_not_starts_with', alias?: string  } 
  | { name: 'state_ends_with', alias?: string  } 
  | { name: 'state_not_ends_with', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'country_lt', alias?: string  } 
  | { name: 'country_lte', alias?: string  } 
  | { name: 'country_gt', alias?: string  } 
  | { name: 'country_gte', alias?: string  } 
  | { name: 'country_contains', alias?: string  } 
  | { name: 'country_not_contains', alias?: string  } 
  | { name: 'country_starts_with', alias?: string  } 
  | { name: 'country_not_starts_with', alias?: string  } 
  | { name: 'country_ends_with', alias?: string  } 
  | { name: 'country_not_ends_with', alias?: string  } 
  | { name: 'postCode', alias?: string  } 
  | { name: 'postCode_not', alias?: string  } 
  | { name: 'postCode_in', alias?: string  } 
  | { name: 'postCode_not_in', alias?: string  } 
  | { name: 'postCode_lt', alias?: string  } 
  | { name: 'postCode_lte', alias?: string  } 
  | { name: 'postCode_gt', alias?: string  } 
  | { name: 'postCode_gte', alias?: string  } 
  | { name: 'postCode_contains', alias?: string  } 
  | { name: 'postCode_not_contains', alias?: string  } 
  | { name: 'postCode_starts_with', alias?: string  } 
  | { name: 'postCode_not_starts_with', alias?: string  } 
  | { name: 'postCode_ends_with', alias?: string  } 
  | { name: 'postCode_not_ends_with', alias?: string  } 
  | { name: 'latitude', alias?: string  } 
  | { name: 'latitude_not', alias?: string  } 
  | { name: 'latitude_in', alias?: string  } 
  | { name: 'latitude_not_in', alias?: string  } 
  | { name: 'latitude_lt', alias?: string  } 
  | { name: 'latitude_lte', alias?: string  } 
  | { name: 'latitude_gt', alias?: string  } 
  | { name: 'latitude_gte', alias?: string  } 
  | { name: 'latitude_contains', alias?: string  } 
  | { name: 'latitude_not_contains', alias?: string  } 
  | { name: 'latitude_starts_with', alias?: string  } 
  | { name: 'latitude_not_starts_with', alias?: string  } 
  | { name: 'latitude_ends_with', alias?: string  } 
  | { name: 'latitude_not_ends_with', alias?: string  } 
  | { name: 'longitude', alias?: string  } 
  | { name: 'longitude_not', alias?: string  } 
  | { name: 'longitude_in', alias?: string  } 
  | { name: 'longitude_not_in', alias?: string  } 
  | { name: 'longitude_lt', alias?: string  } 
  | { name: 'longitude_lte', alias?: string  } 
  | { name: 'longitude_gt', alias?: string  } 
  | { name: 'longitude_gte', alias?: string  } 
  | { name: 'longitude_contains', alias?: string  } 
  | { name: 'longitude_not_contains', alias?: string  } 
  | { name: 'longitude_starts_with', alias?: string  } 
  | { name: 'longitude_not_starts_with', alias?: string  } 
  | { name: 'longitude_ends_with', alias?: string  } 
  | { name: 'longitude_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ContactWhereUniqueInput {
  id?: string | null
}
export type ContactWhereUniqueInputInputObject =
  | Extract<keyof ContactWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ContactWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  surname?: string | null
  surname_not?: string | null
  surname_in?: string[]
  surname_not_in?: string[]
  surname_lt?: string | null
  surname_lte?: string | null
  surname_gt?: string | null
  surname_gte?: string | null
  surname_contains?: string | null
  surname_not_contains?: string | null
  surname_starts_with?: string | null
  surname_not_starts_with?: string | null
  surname_ends_with?: string | null
  surname_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  mobileCode?: string | null
  mobileCode_not?: string | null
  mobileCode_in?: string[]
  mobileCode_not_in?: string[]
  mobileCode_lt?: string | null
  mobileCode_lte?: string | null
  mobileCode_gt?: string | null
  mobileCode_gte?: string | null
  mobileCode_contains?: string | null
  mobileCode_not_contains?: string | null
  mobileCode_starts_with?: string | null
  mobileCode_not_starts_with?: string | null
  mobileCode_ends_with?: string | null
  mobileCode_not_ends_with?: string | null
  mobileNumber?: string | null
  mobileNumber_not?: string | null
  mobileNumber_in?: string[]
  mobileNumber_not_in?: string[]
  mobileNumber_lt?: string | null
  mobileNumber_lte?: string | null
  mobileNumber_gt?: string | null
  mobileNumber_gte?: string | null
  mobileNumber_contains?: string | null
  mobileNumber_not_contains?: string | null
  mobileNumber_starts_with?: string | null
  mobileNumber_not_starts_with?: string | null
  mobileNumber_ends_with?: string | null
  mobileNumber_not_ends_with?: string | null
  landlineCode?: string | null
  landlineCode_not?: string | null
  landlineCode_in?: string[]
  landlineCode_not_in?: string[]
  landlineCode_lt?: string | null
  landlineCode_lte?: string | null
  landlineCode_gt?: string | null
  landlineCode_gte?: string | null
  landlineCode_contains?: string | null
  landlineCode_not_contains?: string | null
  landlineCode_starts_with?: string | null
  landlineCode_not_starts_with?: string | null
  landlineCode_ends_with?: string | null
  landlineCode_not_ends_with?: string | null
  landlineNumber?: string | null
  landlineNumber_not?: string | null
  landlineNumber_in?: string[]
  landlineNumber_not_in?: string[]
  landlineNumber_lt?: string | null
  landlineNumber_lte?: string | null
  landlineNumber_gt?: string | null
  landlineNumber_gte?: string | null
  landlineNumber_contains?: string | null
  landlineNumber_not_contains?: string | null
  landlineNumber_starts_with?: string | null
  landlineNumber_not_starts_with?: string | null
  landlineNumber_ends_with?: string | null
  landlineNumber_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ContactWhereInput[]
  OR?: ContactWhereInput[]
  NOT?: ContactWhereInput[]
}
export type ContactWhereInputInputObject =
  | Extract<keyof ContactWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'surname_not', alias?: string  } 
  | { name: 'surname_in', alias?: string  } 
  | { name: 'surname_not_in', alias?: string  } 
  | { name: 'surname_lt', alias?: string  } 
  | { name: 'surname_lte', alias?: string  } 
  | { name: 'surname_gt', alias?: string  } 
  | { name: 'surname_gte', alias?: string  } 
  | { name: 'surname_contains', alias?: string  } 
  | { name: 'surname_not_contains', alias?: string  } 
  | { name: 'surname_starts_with', alias?: string  } 
  | { name: 'surname_not_starts_with', alias?: string  } 
  | { name: 'surname_ends_with', alias?: string  } 
  | { name: 'surname_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'mobileCode', alias?: string  } 
  | { name: 'mobileCode_not', alias?: string  } 
  | { name: 'mobileCode_in', alias?: string  } 
  | { name: 'mobileCode_not_in', alias?: string  } 
  | { name: 'mobileCode_lt', alias?: string  } 
  | { name: 'mobileCode_lte', alias?: string  } 
  | { name: 'mobileCode_gt', alias?: string  } 
  | { name: 'mobileCode_gte', alias?: string  } 
  | { name: 'mobileCode_contains', alias?: string  } 
  | { name: 'mobileCode_not_contains', alias?: string  } 
  | { name: 'mobileCode_starts_with', alias?: string  } 
  | { name: 'mobileCode_not_starts_with', alias?: string  } 
  | { name: 'mobileCode_ends_with', alias?: string  } 
  | { name: 'mobileCode_not_ends_with', alias?: string  } 
  | { name: 'mobileNumber', alias?: string  } 
  | { name: 'mobileNumber_not', alias?: string  } 
  | { name: 'mobileNumber_in', alias?: string  } 
  | { name: 'mobileNumber_not_in', alias?: string  } 
  | { name: 'mobileNumber_lt', alias?: string  } 
  | { name: 'mobileNumber_lte', alias?: string  } 
  | { name: 'mobileNumber_gt', alias?: string  } 
  | { name: 'mobileNumber_gte', alias?: string  } 
  | { name: 'mobileNumber_contains', alias?: string  } 
  | { name: 'mobileNumber_not_contains', alias?: string  } 
  | { name: 'mobileNumber_starts_with', alias?: string  } 
  | { name: 'mobileNumber_not_starts_with', alias?: string  } 
  | { name: 'mobileNumber_ends_with', alias?: string  } 
  | { name: 'mobileNumber_not_ends_with', alias?: string  } 
  | { name: 'landlineCode', alias?: string  } 
  | { name: 'landlineCode_not', alias?: string  } 
  | { name: 'landlineCode_in', alias?: string  } 
  | { name: 'landlineCode_not_in', alias?: string  } 
  | { name: 'landlineCode_lt', alias?: string  } 
  | { name: 'landlineCode_lte', alias?: string  } 
  | { name: 'landlineCode_gt', alias?: string  } 
  | { name: 'landlineCode_gte', alias?: string  } 
  | { name: 'landlineCode_contains', alias?: string  } 
  | { name: 'landlineCode_not_contains', alias?: string  } 
  | { name: 'landlineCode_starts_with', alias?: string  } 
  | { name: 'landlineCode_not_starts_with', alias?: string  } 
  | { name: 'landlineCode_ends_with', alias?: string  } 
  | { name: 'landlineCode_not_ends_with', alias?: string  } 
  | { name: 'landlineNumber', alias?: string  } 
  | { name: 'landlineNumber_not', alias?: string  } 
  | { name: 'landlineNumber_in', alias?: string  } 
  | { name: 'landlineNumber_not_in', alias?: string  } 
  | { name: 'landlineNumber_lt', alias?: string  } 
  | { name: 'landlineNumber_lte', alias?: string  } 
  | { name: 'landlineNumber_gt', alias?: string  } 
  | { name: 'landlineNumber_gte', alias?: string  } 
  | { name: 'landlineNumber_contains', alias?: string  } 
  | { name: 'landlineNumber_not_contains', alias?: string  } 
  | { name: 'landlineNumber_starts_with', alias?: string  } 
  | { name: 'landlineNumber_not_starts_with', alias?: string  } 
  | { name: 'landlineNumber_ends_with', alias?: string  } 
  | { name: 'landlineNumber_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CompanyWhereUniqueInput {
  id?: string | null
}
export type CompanyWhereUniqueInputInputObject =
  | Extract<keyof CompanyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CompanyMemberWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  role?: prisma.CompanyMemberRole | null
  role_not?: prisma.CompanyMemberRole | null
  role_in?: prisma.CompanyMemberRole[]
  role_not_in?: prisma.CompanyMemberRole[]
  status?: prisma.CompanyMemberStatus | null
  status_not?: prisma.CompanyMemberStatus | null
  status_in?: prisma.CompanyMemberStatus[]
  status_not_in?: prisma.CompanyMemberStatus[]
  user?: UserWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CompanyMemberWhereInput[]
  OR?: CompanyMemberWhereInput[]
  NOT?: CompanyMemberWhereInput[]
}
export type CompanyMemberWhereInputInputObject =
  | Extract<keyof CompanyMemberWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CompanyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  businessType?: prisma.BusinessType | null
  businessType_not?: prisma.BusinessType | null
  businessType_in?: prisma.BusinessType[]
  businessType_not_in?: prisma.BusinessType[]
  country?: prisma.Country | null
  country_not?: prisma.Country | null
  country_in?: prisma.Country[]
  country_not_in?: prisma.Country[]
  govNumber?: string | null
  govNumber_not?: string | null
  govNumber_in?: string[]
  govNumber_not_in?: string[]
  govNumber_lt?: string | null
  govNumber_lte?: string | null
  govNumber_gt?: string | null
  govNumber_gte?: string | null
  govNumber_contains?: string | null
  govNumber_not_contains?: string | null
  govNumber_starts_with?: string | null
  govNumber_not_starts_with?: string | null
  govNumber_ends_with?: string | null
  govNumber_not_ends_with?: string | null
  currency?: prisma.Currency | null
  currency_not?: prisma.Currency | null
  currency_in?: prisma.Currency[]
  currency_not_in?: prisma.Currency[]
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  HPIO?: string | null
  HPIO_not?: string | null
  HPIO_in?: string[]
  HPIO_not_in?: string[]
  HPIO_lt?: string | null
  HPIO_lte?: string | null
  HPIO_gt?: string | null
  HPIO_gte?: string | null
  HPIO_contains?: string | null
  HPIO_not_contains?: string | null
  HPIO_starts_with?: string | null
  HPIO_not_starts_with?: string | null
  HPIO_ends_with?: string | null
  HPIO_not_ends_with?: string | null
  legalName?: string | null
  legalName_not?: string | null
  legalName_in?: string[]
  legalName_not_in?: string[]
  legalName_lt?: string | null
  legalName_lte?: string | null
  legalName_gt?: string | null
  legalName_gte?: string | null
  legalName_contains?: string | null
  legalName_not_contains?: string | null
  legalName_starts_with?: string | null
  legalName_not_starts_with?: string | null
  legalName_ends_with?: string | null
  legalName_not_ends_with?: string | null
  logo?: AttachmentWhereInput | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  salesTax?: boolean | null
  salesTax_not?: boolean | null
  websiteURL?: string | null
  websiteURL_not?: string | null
  websiteURL_in?: string[]
  websiteURL_not_in?: string[]
  websiteURL_lt?: string | null
  websiteURL_lte?: string | null
  websiteURL_gt?: string | null
  websiteURL_gte?: string | null
  websiteURL_contains?: string | null
  websiteURL_not_contains?: string | null
  websiteURL_starts_with?: string | null
  websiteURL_not_starts_with?: string | null
  websiteURL_ends_with?: string | null
  websiteURL_not_ends_with?: string | null
  addresses_every?: AddressWhereInput | null
  addresses_some?: AddressWhereInput | null
  addresses_none?: AddressWhereInput | null
  contacts_every?: ContactWhereInput | null
  contacts_some?: ContactWhereInput | null
  contacts_none?: ContactWhereInput | null
  companyMembers_every?: CompanyMemberWhereInput | null
  companyMembers_some?: CompanyMemberWhereInput | null
  companyMembers_none?: CompanyMemberWhereInput | null
  activePlan?: PlanWhereInput | null
  stripeCustomerId?: string | null
  stripeCustomerId_not?: string | null
  stripeCustomerId_in?: string[]
  stripeCustomerId_not_in?: string[]
  stripeCustomerId_lt?: string | null
  stripeCustomerId_lte?: string | null
  stripeCustomerId_gt?: string | null
  stripeCustomerId_gte?: string | null
  stripeCustomerId_contains?: string | null
  stripeCustomerId_not_contains?: string | null
  stripeCustomerId_starts_with?: string | null
  stripeCustomerId_not_starts_with?: string | null
  stripeCustomerId_ends_with?: string | null
  stripeCustomerId_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CompanyWhereInput[]
  OR?: CompanyWhereInput[]
  NOT?: CompanyWhereInput[]
}
export type CompanyWhereInputInputObject =
  | Extract<keyof CompanyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'businessType', alias?: string  } 
  | { name: 'businessType_not', alias?: string  } 
  | { name: 'businessType_in', alias?: string  } 
  | { name: 'businessType_not_in', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'govNumber_not', alias?: string  } 
  | { name: 'govNumber_in', alias?: string  } 
  | { name: 'govNumber_not_in', alias?: string  } 
  | { name: 'govNumber_lt', alias?: string  } 
  | { name: 'govNumber_lte', alias?: string  } 
  | { name: 'govNumber_gt', alias?: string  } 
  | { name: 'govNumber_gte', alias?: string  } 
  | { name: 'govNumber_contains', alias?: string  } 
  | { name: 'govNumber_not_contains', alias?: string  } 
  | { name: 'govNumber_starts_with', alias?: string  } 
  | { name: 'govNumber_not_starts_with', alias?: string  } 
  | { name: 'govNumber_ends_with', alias?: string  } 
  | { name: 'govNumber_not_ends_with', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'currency_not', alias?: string  } 
  | { name: 'currency_in', alias?: string  } 
  | { name: 'currency_not_in', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'HPIO', alias?: string  } 
  | { name: 'HPIO_not', alias?: string  } 
  | { name: 'HPIO_in', alias?: string  } 
  | { name: 'HPIO_not_in', alias?: string  } 
  | { name: 'HPIO_lt', alias?: string  } 
  | { name: 'HPIO_lte', alias?: string  } 
  | { name: 'HPIO_gt', alias?: string  } 
  | { name: 'HPIO_gte', alias?: string  } 
  | { name: 'HPIO_contains', alias?: string  } 
  | { name: 'HPIO_not_contains', alias?: string  } 
  | { name: 'HPIO_starts_with', alias?: string  } 
  | { name: 'HPIO_not_starts_with', alias?: string  } 
  | { name: 'HPIO_ends_with', alias?: string  } 
  | { name: 'HPIO_not_ends_with', alias?: string  } 
  | { name: 'legalName', alias?: string  } 
  | { name: 'legalName_not', alias?: string  } 
  | { name: 'legalName_in', alias?: string  } 
  | { name: 'legalName_not_in', alias?: string  } 
  | { name: 'legalName_lt', alias?: string  } 
  | { name: 'legalName_lte', alias?: string  } 
  | { name: 'legalName_gt', alias?: string  } 
  | { name: 'legalName_gte', alias?: string  } 
  | { name: 'legalName_contains', alias?: string  } 
  | { name: 'legalName_not_contains', alias?: string  } 
  | { name: 'legalName_starts_with', alias?: string  } 
  | { name: 'legalName_not_starts_with', alias?: string  } 
  | { name: 'legalName_ends_with', alias?: string  } 
  | { name: 'legalName_not_ends_with', alias?: string  } 
  | { name: 'logo', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'salesTax_not', alias?: string  } 
  | { name: 'websiteURL', alias?: string  } 
  | { name: 'websiteURL_not', alias?: string  } 
  | { name: 'websiteURL_in', alias?: string  } 
  | { name: 'websiteURL_not_in', alias?: string  } 
  | { name: 'websiteURL_lt', alias?: string  } 
  | { name: 'websiteURL_lte', alias?: string  } 
  | { name: 'websiteURL_gt', alias?: string  } 
  | { name: 'websiteURL_gte', alias?: string  } 
  | { name: 'websiteURL_contains', alias?: string  } 
  | { name: 'websiteURL_not_contains', alias?: string  } 
  | { name: 'websiteURL_starts_with', alias?: string  } 
  | { name: 'websiteURL_not_starts_with', alias?: string  } 
  | { name: 'websiteURL_ends_with', alias?: string  } 
  | { name: 'websiteURL_not_ends_with', alias?: string  } 
  | { name: 'addresses_every', alias?: string  } 
  | { name: 'addresses_some', alias?: string  } 
  | { name: 'addresses_none', alias?: string  } 
  | { name: 'contacts_every', alias?: string  } 
  | { name: 'contacts_some', alias?: string  } 
  | { name: 'contacts_none', alias?: string  } 
  | { name: 'companyMembers_every', alias?: string  } 
  | { name: 'companyMembers_some', alias?: string  } 
  | { name: 'companyMembers_none', alias?: string  } 
  | { name: 'activePlan', alias?: string  } 
  | { name: 'stripeCustomerId', alias?: string  } 
  | { name: 'stripeCustomerId_not', alias?: string  } 
  | { name: 'stripeCustomerId_in', alias?: string  } 
  | { name: 'stripeCustomerId_not_in', alias?: string  } 
  | { name: 'stripeCustomerId_lt', alias?: string  } 
  | { name: 'stripeCustomerId_lte', alias?: string  } 
  | { name: 'stripeCustomerId_gt', alias?: string  } 
  | { name: 'stripeCustomerId_gte', alias?: string  } 
  | { name: 'stripeCustomerId_contains', alias?: string  } 
  | { name: 'stripeCustomerId_not_contains', alias?: string  } 
  | { name: 'stripeCustomerId_starts_with', alias?: string  } 
  | { name: 'stripeCustomerId_not_starts_with', alias?: string  } 
  | { name: 'stripeCustomerId_ends_with', alias?: string  } 
  | { name: 'stripeCustomerId_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttachmentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  fileName?: string | null
  fileName_not?: string | null
  fileName_in?: string[]
  fileName_not_in?: string[]
  fileName_lt?: string | null
  fileName_lte?: string | null
  fileName_gt?: string | null
  fileName_gte?: string | null
  fileName_contains?: string | null
  fileName_not_contains?: string | null
  fileName_starts_with?: string | null
  fileName_not_starts_with?: string | null
  fileName_ends_with?: string | null
  fileName_not_ends_with?: string | null
  label?: string | null
  label_not?: string | null
  label_in?: string[]
  label_not_in?: string[]
  label_lt?: string | null
  label_lte?: string | null
  label_gt?: string | null
  label_gte?: string | null
  label_contains?: string | null
  label_not_contains?: string | null
  label_starts_with?: string | null
  label_not_starts_with?: string | null
  label_ends_with?: string | null
  label_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  s3Bucket?: string | null
  s3Bucket_not?: string | null
  s3Bucket_in?: string[]
  s3Bucket_not_in?: string[]
  s3Bucket_lt?: string | null
  s3Bucket_lte?: string | null
  s3Bucket_gt?: string | null
  s3Bucket_gte?: string | null
  s3Bucket_contains?: string | null
  s3Bucket_not_contains?: string | null
  s3Bucket_starts_with?: string | null
  s3Bucket_not_starts_with?: string | null
  s3Bucket_ends_with?: string | null
  s3Bucket_not_ends_with?: string | null
  s3Key?: string | null
  s3Key_not?: string | null
  s3Key_in?: string[]
  s3Key_not_in?: string[]
  s3Key_lt?: string | null
  s3Key_lte?: string | null
  s3Key_gt?: string | null
  s3Key_gte?: string | null
  s3Key_contains?: string | null
  s3Key_not_contains?: string | null
  s3Key_starts_with?: string | null
  s3Key_not_starts_with?: string | null
  s3Key_ends_with?: string | null
  s3Key_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: AttachmentWhereInput[]
  OR?: AttachmentWhereInput[]
  NOT?: AttachmentWhereInput[]
}
export type AttachmentWhereInputInputObject =
  | Extract<keyof AttachmentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'fileName', alias?: string  } 
  | { name: 'fileName_not', alias?: string  } 
  | { name: 'fileName_in', alias?: string  } 
  | { name: 'fileName_not_in', alias?: string  } 
  | { name: 'fileName_lt', alias?: string  } 
  | { name: 'fileName_lte', alias?: string  } 
  | { name: 'fileName_gt', alias?: string  } 
  | { name: 'fileName_gte', alias?: string  } 
  | { name: 'fileName_contains', alias?: string  } 
  | { name: 'fileName_not_contains', alias?: string  } 
  | { name: 'fileName_starts_with', alias?: string  } 
  | { name: 'fileName_not_starts_with', alias?: string  } 
  | { name: 'fileName_ends_with', alias?: string  } 
  | { name: 'fileName_not_ends_with', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'label_not', alias?: string  } 
  | { name: 'label_in', alias?: string  } 
  | { name: 'label_not_in', alias?: string  } 
  | { name: 'label_lt', alias?: string  } 
  | { name: 'label_lte', alias?: string  } 
  | { name: 'label_gt', alias?: string  } 
  | { name: 'label_gte', alias?: string  } 
  | { name: 'label_contains', alias?: string  } 
  | { name: 'label_not_contains', alias?: string  } 
  | { name: 'label_starts_with', alias?: string  } 
  | { name: 'label_not_starts_with', alias?: string  } 
  | { name: 'label_ends_with', alias?: string  } 
  | { name: 'label_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 's3Bucket', alias?: string  } 
  | { name: 's3Bucket_not', alias?: string  } 
  | { name: 's3Bucket_in', alias?: string  } 
  | { name: 's3Bucket_not_in', alias?: string  } 
  | { name: 's3Bucket_lt', alias?: string  } 
  | { name: 's3Bucket_lte', alias?: string  } 
  | { name: 's3Bucket_gt', alias?: string  } 
  | { name: 's3Bucket_gte', alias?: string  } 
  | { name: 's3Bucket_contains', alias?: string  } 
  | { name: 's3Bucket_not_contains', alias?: string  } 
  | { name: 's3Bucket_starts_with', alias?: string  } 
  | { name: 's3Bucket_not_starts_with', alias?: string  } 
  | { name: 's3Bucket_ends_with', alias?: string  } 
  | { name: 's3Bucket_not_ends_with', alias?: string  } 
  | { name: 's3Key', alias?: string  } 
  | { name: 's3Key_not', alias?: string  } 
  | { name: 's3Key_in', alias?: string  } 
  | { name: 's3Key_not_in', alias?: string  } 
  | { name: 's3Key_lt', alias?: string  } 
  | { name: 's3Key_lte', alias?: string  } 
  | { name: 's3Key_gt', alias?: string  } 
  | { name: 's3Key_gte', alias?: string  } 
  | { name: 's3Key_contains', alias?: string  } 
  | { name: 's3Key_not_contains', alias?: string  } 
  | { name: 's3Key_starts_with', alias?: string  } 
  | { name: 's3Key_not_starts_with', alias?: string  } 
  | { name: 's3Key_ends_with', alias?: string  } 
  | { name: 's3Key_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PlanWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  company?: CompanyWhereInput | null
  isActive?: boolean | null
  isActive_not?: boolean | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  type?: prisma.PlanType | null
  type_not?: prisma.PlanType | null
  type_in?: prisma.PlanType[]
  type_not_in?: prisma.PlanType[]
  currency?: prisma.Currency | null
  currency_not?: prisma.Currency | null
  currency_in?: prisma.Currency[]
  currency_not_in?: prisma.Currency[]
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: PlanWhereInput[]
  OR?: PlanWhereInput[]
  NOT?: PlanWhereInput[]
}
export type PlanWhereInputInputObject =
  | Extract<keyof PlanWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isActive_not', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'currency_not', alias?: string  } 
  | { name: 'currency_in', alias?: string  } 
  | { name: 'currency_not_in', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CompanyMemberWhereUniqueInput {
  id?: string | null
}
export type CompanyMemberWhereUniqueInputInputObject =
  | Extract<keyof CompanyMemberWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CustomerWhereUniqueInput {
  id?: string | null
}
export type CustomerWhereUniqueInputInputObject =
  | Extract<keyof CustomerWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CustomerWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  company?: CompanyWhereInput | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  govNumber?: string | null
  govNumber_not?: string | null
  govNumber_in?: string[]
  govNumber_not_in?: string[]
  govNumber_lt?: string | null
  govNumber_lte?: string | null
  govNumber_gt?: string | null
  govNumber_gte?: string | null
  govNumber_contains?: string | null
  govNumber_not_contains?: string | null
  govNumber_starts_with?: string | null
  govNumber_not_starts_with?: string | null
  govNumber_ends_with?: string | null
  govNumber_not_ends_with?: string | null
  salesTax?: boolean | null
  salesTax_not?: boolean | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  billingFrequency?: prisma.SupplierTermsOfPayment | null
  billingFrequency_not?: prisma.SupplierTermsOfPayment | null
  billingFrequency_in?: prisma.SupplierTermsOfPayment[]
  billingFrequency_not_in?: prisma.SupplierTermsOfPayment[]
  meansTestedFee?: MeansTestedFeeWhereInput | null
  basicDailyFee?: BasicDailyFeeWhereInput | null
  contacts_every?: ContactWhereInput | null
  contacts_some?: ContactWhereInput | null
  contacts_none?: ContactWhereInput | null
  addresses_every?: AddressWhereInput | null
  addresses_some?: AddressWhereInput | null
  addresses_none?: AddressWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CustomerWhereInput[]
  OR?: CustomerWhereInput[]
  NOT?: CustomerWhereInput[]
}
export type CustomerWhereInputInputObject =
  | Extract<keyof CustomerWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'govNumber_not', alias?: string  } 
  | { name: 'govNumber_in', alias?: string  } 
  | { name: 'govNumber_not_in', alias?: string  } 
  | { name: 'govNumber_lt', alias?: string  } 
  | { name: 'govNumber_lte', alias?: string  } 
  | { name: 'govNumber_gt', alias?: string  } 
  | { name: 'govNumber_gte', alias?: string  } 
  | { name: 'govNumber_contains', alias?: string  } 
  | { name: 'govNumber_not_contains', alias?: string  } 
  | { name: 'govNumber_starts_with', alias?: string  } 
  | { name: 'govNumber_not_starts_with', alias?: string  } 
  | { name: 'govNumber_ends_with', alias?: string  } 
  | { name: 'govNumber_not_ends_with', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'salesTax_not', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'billingFrequency', alias?: string  } 
  | { name: 'billingFrequency_not', alias?: string  } 
  | { name: 'billingFrequency_in', alias?: string  } 
  | { name: 'billingFrequency_not_in', alias?: string  } 
  | { name: 'meansTestedFee', alias?: string  } 
  | { name: 'basicDailyFee', alias?: string  } 
  | { name: 'contacts_every', alias?: string  } 
  | { name: 'contacts_some', alias?: string  } 
  | { name: 'contacts_none', alias?: string  } 
  | { name: 'addresses_every', alias?: string  } 
  | { name: 'addresses_some', alias?: string  } 
  | { name: 'addresses_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MeansTestedFeeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  amount?: number | null
  amount_not?: number | null
  amount_in?: number[]
  amount_not_in?: number[]
  amount_lt?: number | null
  amount_lte?: number | null
  amount_gt?: number | null
  amount_gte?: number | null
  currency?: prisma.Currency | null
  currency_not?: prisma.Currency | null
  currency_in?: prisma.Currency[]
  currency_not_in?: prisma.Currency[]
  dateFrom?: string | null
  dateFrom_not?: string | null
  dateFrom_in?: string[]
  dateFrom_not_in?: string[]
  dateFrom_lt?: string | null
  dateFrom_lte?: string | null
  dateFrom_gt?: string | null
  dateFrom_gte?: string | null
  dateTo?: string | null
  dateTo_not?: string | null
  dateTo_in?: string[]
  dateTo_not_in?: string[]
  dateTo_lt?: string | null
  dateTo_lte?: string | null
  dateTo_gt?: string | null
  dateTo_gte?: string | null
  company?: CompanyWhereInput | null
  AND?: MeansTestedFeeWhereInput[]
  OR?: MeansTestedFeeWhereInput[]
  NOT?: MeansTestedFeeWhereInput[]
}
export type MeansTestedFeeWhereInputInputObject =
  | Extract<keyof MeansTestedFeeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'amount_not', alias?: string  } 
  | { name: 'amount_in', alias?: string  } 
  | { name: 'amount_not_in', alias?: string  } 
  | { name: 'amount_lt', alias?: string  } 
  | { name: 'amount_lte', alias?: string  } 
  | { name: 'amount_gt', alias?: string  } 
  | { name: 'amount_gte', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'currency_not', alias?: string  } 
  | { name: 'currency_in', alias?: string  } 
  | { name: 'currency_not_in', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateFrom_not', alias?: string  } 
  | { name: 'dateFrom_in', alias?: string  } 
  | { name: 'dateFrom_not_in', alias?: string  } 
  | { name: 'dateFrom_lt', alias?: string  } 
  | { name: 'dateFrom_lte', alias?: string  } 
  | { name: 'dateFrom_gt', alias?: string  } 
  | { name: 'dateFrom_gte', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  | { name: 'dateTo_not', alias?: string  } 
  | { name: 'dateTo_in', alias?: string  } 
  | { name: 'dateTo_not_in', alias?: string  } 
  | { name: 'dateTo_lt', alias?: string  } 
  | { name: 'dateTo_lte', alias?: string  } 
  | { name: 'dateTo_gt', alias?: string  } 
  | { name: 'dateTo_gte', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BasicDailyFeeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  level?: prisma.LevelOfCare | null
  level_not?: prisma.LevelOfCare | null
  level_in?: prisma.LevelOfCare[]
  level_not_in?: prisma.LevelOfCare[]
  rate?: number | null
  rate_not?: number | null
  rate_in?: number[]
  rate_not_in?: number[]
  rate_lt?: number | null
  rate_lte?: number | null
  rate_gt?: number | null
  rate_gte?: number | null
  dateFrom?: string | null
  dateFrom_not?: string | null
  dateFrom_in?: string[]
  dateFrom_not_in?: string[]
  dateFrom_lt?: string | null
  dateFrom_lte?: string | null
  dateFrom_gt?: string | null
  dateFrom_gte?: string | null
  dateTo?: string | null
  dateTo_not?: string | null
  dateTo_in?: string[]
  dateTo_not_in?: string[]
  dateTo_lt?: string | null
  dateTo_lte?: string | null
  dateTo_gt?: string | null
  dateTo_gte?: string | null
  rechargeable?: number | null
  rechargeable_not?: number | null
  rechargeable_in?: number[]
  rechargeable_not_in?: number[]
  rechargeable_lt?: number | null
  rechargeable_lte?: number | null
  rechargeable_gt?: number | null
  rechargeable_gte?: number | null
  company?: CompanyWhereInput | null
  AND?: BasicDailyFeeWhereInput[]
  OR?: BasicDailyFeeWhereInput[]
  NOT?: BasicDailyFeeWhereInput[]
}
export type BasicDailyFeeWhereInputInputObject =
  | Extract<keyof BasicDailyFeeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'level_not', alias?: string  } 
  | { name: 'level_in', alias?: string  } 
  | { name: 'level_not_in', alias?: string  } 
  | { name: 'rate', alias?: string  } 
  | { name: 'rate_not', alias?: string  } 
  | { name: 'rate_in', alias?: string  } 
  | { name: 'rate_not_in', alias?: string  } 
  | { name: 'rate_lt', alias?: string  } 
  | { name: 'rate_lte', alias?: string  } 
  | { name: 'rate_gt', alias?: string  } 
  | { name: 'rate_gte', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateFrom_not', alias?: string  } 
  | { name: 'dateFrom_in', alias?: string  } 
  | { name: 'dateFrom_not_in', alias?: string  } 
  | { name: 'dateFrom_lt', alias?: string  } 
  | { name: 'dateFrom_lte', alias?: string  } 
  | { name: 'dateFrom_gt', alias?: string  } 
  | { name: 'dateFrom_gte', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  | { name: 'dateTo_not', alias?: string  } 
  | { name: 'dateTo_in', alias?: string  } 
  | { name: 'dateTo_not_in', alias?: string  } 
  | { name: 'dateTo_lt', alias?: string  } 
  | { name: 'dateTo_lte', alias?: string  } 
  | { name: 'dateTo_gt', alias?: string  } 
  | { name: 'dateTo_gte', alias?: string  } 
  | { name: 'rechargeable', alias?: string  } 
  | { name: 'rechargeable_not', alias?: string  } 
  | { name: 'rechargeable_in', alias?: string  } 
  | { name: 'rechargeable_not_in', alias?: string  } 
  | { name: 'rechargeable_lt', alias?: string  } 
  | { name: 'rechargeable_lte', alias?: string  } 
  | { name: 'rechargeable_gt', alias?: string  } 
  | { name: 'rechargeable_gte', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface IntegrationWhereUniqueInput {
  id?: string | null
}
export type IntegrationWhereUniqueInputInputObject =
  | Extract<keyof IntegrationWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface IntegrationWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  company?: CompanyWhereInput | null
  type?: prisma.IntegrationType | null
  type_not?: prisma.IntegrationType | null
  type_in?: prisma.IntegrationType[]
  type_not_in?: prisma.IntegrationType[]
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: IntegrationWhereInput[]
  OR?: IntegrationWhereInput[]
  NOT?: IntegrationWhereInput[]
}
export type IntegrationWhereInputInputObject =
  | Extract<keyof IntegrationWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ServiceWhereUniqueInput {
  id?: string | null
}
export type ServiceWhereUniqueInputInputObject =
  | Extract<keyof ServiceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ServiceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  billingType?: prisma.ServiceBillingType | null
  billingType_not?: prisma.ServiceBillingType | null
  billingType_in?: prisma.ServiceBillingType[]
  billingType_not_in?: prisma.ServiceBillingType[]
  company?: CompanyWhereInput | null
  includeConsTax?: boolean | null
  includeConsTax_not?: boolean | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  isTemplate?: boolean | null
  isTemplate_not?: boolean | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  timeBasedType?: prisma.TimeBasedType | null
  timeBasedType_not?: prisma.TimeBasedType | null
  timeBasedType_in?: prisma.TimeBasedType[]
  timeBasedType_not_in?: prisma.TimeBasedType[]
  totalAmount?: number | null
  totalAmount_not?: number | null
  totalAmount_in?: number[]
  totalAmount_not_in?: number[]
  totalAmount_lt?: number | null
  totalAmount_lte?: number | null
  totalAmount_gt?: number | null
  totalAmount_gte?: number | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ServiceWhereInput[]
  OR?: ServiceWhereInput[]
  NOT?: ServiceWhereInput[]
}
export type ServiceWhereInputInputObject =
  | Extract<keyof ServiceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'billingType', alias?: string  } 
  | { name: 'billingType_not', alias?: string  } 
  | { name: 'billingType_in', alias?: string  } 
  | { name: 'billingType_not_in', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'includeConsTax', alias?: string  } 
  | { name: 'includeConsTax_not', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'isTemplate', alias?: string  } 
  | { name: 'isTemplate_not', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'timeBasedType', alias?: string  } 
  | { name: 'timeBasedType_not', alias?: string  } 
  | { name: 'timeBasedType_in', alias?: string  } 
  | { name: 'timeBasedType_not_in', alias?: string  } 
  | { name: 'totalAmount', alias?: string  } 
  | { name: 'totalAmount_not', alias?: string  } 
  | { name: 'totalAmount_in', alias?: string  } 
  | { name: 'totalAmount_not_in', alias?: string  } 
  | { name: 'totalAmount_lt', alias?: string  } 
  | { name: 'totalAmount_lte', alias?: string  } 
  | { name: 'totalAmount_gt', alias?: string  } 
  | { name: 'totalAmount_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectWhereUniqueInput {
  id?: string | null
}
export type ProjectWhereUniqueInputInputObject =
  | Extract<keyof ProjectWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectServiceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  amount?: number | null
  amount_not?: number | null
  amount_in?: number[]
  amount_not_in?: number[]
  amount_lt?: number | null
  amount_lte?: number | null
  amount_gt?: number | null
  amount_gte?: number | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  project?: ProjectWhereInput | null
  rules_every?: ProjectServiceRuleWhereInput | null
  rules_some?: ProjectServiceRuleWhereInput | null
  rules_none?: ProjectServiceRuleWhereInput | null
  service?: ServiceWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProjectServiceWhereInput[]
  OR?: ProjectServiceWhereInput[]
  NOT?: ProjectServiceWhereInput[]
}
export type ProjectServiceWhereInputInputObject =
  | Extract<keyof ProjectServiceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'amount_not', alias?: string  } 
  | { name: 'amount_in', alias?: string  } 
  | { name: 'amount_not_in', alias?: string  } 
  | { name: 'amount_lt', alias?: string  } 
  | { name: 'amount_lte', alias?: string  } 
  | { name: 'amount_gt', alias?: string  } 
  | { name: 'amount_gte', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'rules_every', alias?: string  } 
  | { name: 'rules_some', alias?: string  } 
  | { name: 'rules_none', alias?: string  } 
  | { name: 'service', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  company?: CompanyWhereInput | null
  customer?: CustomerWhereInput | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  endsAt?: string | null
  endsAt_not?: string | null
  endsAt_in?: string[]
  endsAt_not_in?: string[]
  endsAt_lt?: string | null
  endsAt_lte?: string | null
  endsAt_gt?: string | null
  endsAt_gte?: string | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  projectService_every?: ProjectServiceWhereInput | null
  projectService_some?: ProjectServiceWhereInput | null
  projectService_none?: ProjectServiceWhereInput | null
  startsAt?: string | null
  startsAt_not?: string | null
  startsAt_in?: string[]
  startsAt_not_in?: string[]
  startsAt_lt?: string | null
  startsAt_lte?: string | null
  startsAt_gt?: string | null
  startsAt_gte?: string | null
  status?: prisma.ProjectStatus | null
  status_not?: prisma.ProjectStatus | null
  status_in?: prisma.ProjectStatus[]
  status_not_in?: prisma.ProjectStatus[]
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProjectWhereInput[]
  OR?: ProjectWhereInput[]
  NOT?: ProjectWhereInput[]
}
export type ProjectWhereInputInputObject =
  | Extract<keyof ProjectWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'endsAt_not', alias?: string  } 
  | { name: 'endsAt_in', alias?: string  } 
  | { name: 'endsAt_not_in', alias?: string  } 
  | { name: 'endsAt_lt', alias?: string  } 
  | { name: 'endsAt_lte', alias?: string  } 
  | { name: 'endsAt_gt', alias?: string  } 
  | { name: 'endsAt_gte', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'projectService_every', alias?: string  } 
  | { name: 'projectService_some', alias?: string  } 
  | { name: 'projectService_none', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'startsAt_not', alias?: string  } 
  | { name: 'startsAt_in', alias?: string  } 
  | { name: 'startsAt_not_in', alias?: string  } 
  | { name: 'startsAt_lt', alias?: string  } 
  | { name: 'startsAt_lte', alias?: string  } 
  | { name: 'startsAt_gt', alias?: string  } 
  | { name: 'startsAt_gte', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectServiceRuleWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  projectService?: ProjectServiceWhereInput | null
  amount?: number | null
  amount_not?: number | null
  amount_in?: number[]
  amount_not_in?: number[]
  amount_lt?: number | null
  amount_lte?: number | null
  amount_gt?: number | null
  amount_gte?: number | null
  percent?: number | null
  percent_not?: number | null
  percent_in?: number[]
  percent_not_in?: number[]
  percent_lt?: number | null
  percent_lte?: number | null
  percent_gt?: number | null
  percent_gte?: number | null
  type?: prisma.ProjectServiceRuleType | null
  type_not?: prisma.ProjectServiceRuleType | null
  type_in?: prisma.ProjectServiceRuleType[]
  type_not_in?: prisma.ProjectServiceRuleType[]
  isPercent?: boolean | null
  isPercent_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProjectServiceRuleWhereInput[]
  OR?: ProjectServiceRuleWhereInput[]
  NOT?: ProjectServiceRuleWhereInput[]
}
export type ProjectServiceRuleWhereInputInputObject =
  | Extract<keyof ProjectServiceRuleWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'projectService', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'amount_not', alias?: string  } 
  | { name: 'amount_in', alias?: string  } 
  | { name: 'amount_not_in', alias?: string  } 
  | { name: 'amount_lt', alias?: string  } 
  | { name: 'amount_lte', alias?: string  } 
  | { name: 'amount_gt', alias?: string  } 
  | { name: 'amount_gte', alias?: string  } 
  | { name: 'percent', alias?: string  } 
  | { name: 'percent_not', alias?: string  } 
  | { name: 'percent_in', alias?: string  } 
  | { name: 'percent_not_in', alias?: string  } 
  | { name: 'percent_lt', alias?: string  } 
  | { name: 'percent_lte', alias?: string  } 
  | { name: 'percent_gt', alias?: string  } 
  | { name: 'percent_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'isPercent', alias?: string  } 
  | { name: 'isPercent_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectServiceWhereUniqueInput {
  id?: string | null
}
export type ProjectServiceWhereUniqueInputInputObject =
  | Extract<keyof ProjectServiceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ProjectServiceRuleWhereUniqueInput {
  id?: string | null
}
export type ProjectServiceRuleWhereUniqueInputInputObject =
  | Extract<keyof ProjectServiceRuleWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PlanWhereUniqueInput {
  id?: string | null
}
export type PlanWhereUniqueInputInputObject =
  | Extract<keyof PlanWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SessionWhereUniqueInput {
  id?: string | null
}
export type SessionWhereUniqueInputInputObject =
  | Extract<keyof SessionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SessionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  expires_at?: string | null
  expires_at_not?: string | null
  expires_at_in?: string[]
  expires_at_not_in?: string[]
  expires_at_lt?: string | null
  expires_at_lte?: string | null
  expires_at_gt?: string | null
  expires_at_gte?: string | null
  is_active?: boolean | null
  is_active_not?: boolean | null
  is_archived?: boolean | null
  is_archived_not?: boolean | null
  is_deleted?: boolean | null
  is_deleted_not?: boolean | null
  signed_at?: string | null
  signed_at_not?: string | null
  signed_at_in?: string[]
  signed_at_not_in?: string[]
  signed_at_lt?: string | null
  signed_at_lte?: string | null
  signed_at_gt?: string | null
  signed_at_gte?: string | null
  user?: UserWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: SessionWhereInput[]
  OR?: SessionWhereInput[]
  NOT?: SessionWhereInput[]
}
export type SessionWhereInputInputObject =
  | Extract<keyof SessionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'expires_at', alias?: string  } 
  | { name: 'expires_at_not', alias?: string  } 
  | { name: 'expires_at_in', alias?: string  } 
  | { name: 'expires_at_not_in', alias?: string  } 
  | { name: 'expires_at_lt', alias?: string  } 
  | { name: 'expires_at_lte', alias?: string  } 
  | { name: 'expires_at_gt', alias?: string  } 
  | { name: 'expires_at_gte', alias?: string  } 
  | { name: 'is_active', alias?: string  } 
  | { name: 'is_active_not', alias?: string  } 
  | { name: 'is_archived', alias?: string  } 
  | { name: 'is_archived_not', alias?: string  } 
  | { name: 'is_deleted', alias?: string  } 
  | { name: 'is_deleted_not', alias?: string  } 
  | { name: 'signed_at', alias?: string  } 
  | { name: 'signed_at_not', alias?: string  } 
  | { name: 'signed_at_in', alias?: string  } 
  | { name: 'signed_at_not_in', alias?: string  } 
  | { name: 'signed_at_lt', alias?: string  } 
  | { name: 'signed_at_lte', alias?: string  } 
  | { name: 'signed_at_gt', alias?: string  } 
  | { name: 'signed_at_gte', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TimeSheetWhereUniqueInput {
  id?: string | null
}
export type TimeSheetWhereUniqueInputInputObject =
  | Extract<keyof TimeSheetWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TimeSheetEntryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  customer?: CustomerWhereInput | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  duration?: number | null
  duration_not?: number | null
  duration_in?: number[]
  duration_not_in?: number[]
  duration_lt?: number | null
  duration_lte?: number | null
  duration_gt?: number | null
  duration_gte?: number | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  isInvoiced?: boolean | null
  isInvoiced_not?: boolean | null
  project?: ProjectWhereInput | null
  service?: ServiceWhereInput | null
  timeSheet?: TimeSheetWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TimeSheetEntryWhereInput[]
  OR?: TimeSheetEntryWhereInput[]
  NOT?: TimeSheetEntryWhereInput[]
}
export type TimeSheetEntryWhereInputInputObject =
  | Extract<keyof TimeSheetEntryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'duration', alias?: string  } 
  | { name: 'duration_not', alias?: string  } 
  | { name: 'duration_in', alias?: string  } 
  | { name: 'duration_not_in', alias?: string  } 
  | { name: 'duration_lt', alias?: string  } 
  | { name: 'duration_lte', alias?: string  } 
  | { name: 'duration_gt', alias?: string  } 
  | { name: 'duration_gte', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'isInvoiced', alias?: string  } 
  | { name: 'isInvoiced_not', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  | { name: 'timeSheet', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TimeSheetWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  attachments_every?: AttachmentWhereInput | null
  attachments_some?: AttachmentWhereInput | null
  attachments_none?: AttachmentWhereInput | null
  company?: CompanyWhereInput | null
  endsAt?: string | null
  endsAt_not?: string | null
  endsAt_in?: string[]
  endsAt_not_in?: string[]
  endsAt_lt?: string | null
  endsAt_lte?: string | null
  endsAt_gt?: string | null
  endsAt_gte?: string | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  preview?: AttachmentWhereInput | null
  startsAt?: string | null
  startsAt_not?: string | null
  startsAt_in?: string[]
  startsAt_not_in?: string[]
  startsAt_lt?: string | null
  startsAt_lte?: string | null
  startsAt_gt?: string | null
  startsAt_gte?: string | null
  status?: prisma.TimeSheetStatus | null
  status_not?: prisma.TimeSheetStatus | null
  status_in?: prisma.TimeSheetStatus[]
  status_not_in?: prisma.TimeSheetStatus[]
  timeSheetEntries_every?: TimeSheetEntryWhereInput | null
  timeSheetEntries_some?: TimeSheetEntryWhereInput | null
  timeSheetEntries_none?: TimeSheetEntryWhereInput | null
  user?: UserWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TimeSheetWhereInput[]
  OR?: TimeSheetWhereInput[]
  NOT?: TimeSheetWhereInput[]
}
export type TimeSheetWhereInputInputObject =
  | Extract<keyof TimeSheetWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'attachments_every', alias?: string  } 
  | { name: 'attachments_some', alias?: string  } 
  | { name: 'attachments_none', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'endsAt_not', alias?: string  } 
  | { name: 'endsAt_in', alias?: string  } 
  | { name: 'endsAt_not_in', alias?: string  } 
  | { name: 'endsAt_lt', alias?: string  } 
  | { name: 'endsAt_lte', alias?: string  } 
  | { name: 'endsAt_gt', alias?: string  } 
  | { name: 'endsAt_gte', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'startsAt_not', alias?: string  } 
  | { name: 'startsAt_in', alias?: string  } 
  | { name: 'startsAt_not_in', alias?: string  } 
  | { name: 'startsAt_lt', alias?: string  } 
  | { name: 'startsAt_lte', alias?: string  } 
  | { name: 'startsAt_gt', alias?: string  } 
  | { name: 'startsAt_gte', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'timeSheetEntries_every', alias?: string  } 
  | { name: 'timeSheetEntries_some', alias?: string  } 
  | { name: 'timeSheetEntries_none', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttachmentWhereUniqueInput {
  id?: string | null
}
export type AttachmentWhereUniqueInputInputObject =
  | Extract<keyof AttachmentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TimeSheetEntryWhereUniqueInput {
  id?: string | null
}
export type TimeSheetEntryWhereUniqueInputInputObject =
  | Extract<keyof TimeSheetEntryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface InvoiceItemEntryWhereUniqueInput {
  id?: string | null
}
export type InvoiceItemEntryWhereUniqueInputInputObject =
  | Extract<keyof InvoiceItemEntryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface InvoiceItemEntryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  order?: number | null
  order_not?: number | null
  order_in?: number[]
  order_not_in?: number[]
  order_lt?: number | null
  order_lte?: number | null
  order_gt?: number | null
  order_gte?: number | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  quantity?: number | null
  quantity_not?: number | null
  quantity_in?: number[]
  quantity_not_in?: number[]
  quantity_lt?: number | null
  quantity_lte?: number | null
  quantity_gt?: number | null
  quantity_gte?: number | null
  tax?: number | null
  tax_not?: number | null
  tax_in?: number[]
  tax_not_in?: number[]
  tax_lt?: number | null
  tax_lte?: number | null
  tax_gt?: number | null
  tax_gte?: number | null
  invoice?: InvoiceWhereInput | null
  project?: ProjectWhereInput | null
  service?: ServiceWhereInput | null
  timeSheetEntry?: TimeSheetEntryWhereInput | null
  timeSheet?: TimeSheetWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: InvoiceItemEntryWhereInput[]
  OR?: InvoiceItemEntryWhereInput[]
  NOT?: InvoiceItemEntryWhereInput[]
}
export type InvoiceItemEntryWhereInputInputObject =
  | Extract<keyof InvoiceItemEntryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'order_not', alias?: string  } 
  | { name: 'order_in', alias?: string  } 
  | { name: 'order_not_in', alias?: string  } 
  | { name: 'order_lt', alias?: string  } 
  | { name: 'order_lte', alias?: string  } 
  | { name: 'order_gt', alias?: string  } 
  | { name: 'order_gte', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'quantity_not', alias?: string  } 
  | { name: 'quantity_in', alias?: string  } 
  | { name: 'quantity_not_in', alias?: string  } 
  | { name: 'quantity_lt', alias?: string  } 
  | { name: 'quantity_lte', alias?: string  } 
  | { name: 'quantity_gt', alias?: string  } 
  | { name: 'quantity_gte', alias?: string  } 
  | { name: 'tax', alias?: string  } 
  | { name: 'tax_not', alias?: string  } 
  | { name: 'tax_in', alias?: string  } 
  | { name: 'tax_not_in', alias?: string  } 
  | { name: 'tax_lt', alias?: string  } 
  | { name: 'tax_lte', alias?: string  } 
  | { name: 'tax_gt', alias?: string  } 
  | { name: 'tax_gte', alias?: string  } 
  | { name: 'invoice', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  | { name: 'timeSheetEntry', alias?: string  } 
  | { name: 'timeSheet', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InvoiceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  attachments_every?: AttachmentWhereInput | null
  attachments_some?: AttachmentWhereInput | null
  attachments_none?: AttachmentWhereInput | null
  buyer?: CustomerWhereInput | null
  number?: number | null
  number_not?: number | null
  number_in?: number[]
  number_not_in?: number[]
  number_lt?: number | null
  number_lte?: number | null
  number_gt?: number | null
  number_gte?: number | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  invoiceDate?: string | null
  invoiceDate_not?: string | null
  invoiceDate_in?: string[]
  invoiceDate_not_in?: string[]
  invoiceDate_lt?: string | null
  invoiceDate_lte?: string | null
  invoiceDate_gt?: string | null
  invoiceDate_gte?: string | null
  dueDate?: string | null
  dueDate_not?: string | null
  dueDate_in?: string[]
  dueDate_not_in?: string[]
  dueDate_lt?: string | null
  dueDate_lte?: string | null
  dueDate_gt?: string | null
  dueDate_gte?: string | null
  preview?: AttachmentWhereInput | null
  items_every?: InvoiceItemEntryWhereInput | null
  items_some?: InvoiceItemEntryWhereInput | null
  items_none?: InvoiceItemEntryWhereInput | null
  seller?: CompanyWhereInput | null
  status?: prisma.InvoiceStatus | null
  status_not?: prisma.InvoiceStatus | null
  status_in?: prisma.InvoiceStatus[]
  status_not_in?: prisma.InvoiceStatus[]
  type?: prisma.InvoiceType | null
  type_not?: prisma.InvoiceType | null
  type_in?: prisma.InvoiceType[]
  type_not_in?: prisma.InvoiceType[]
  total?: number | null
  total_not?: number | null
  total_in?: number[]
  total_not_in?: number[]
  total_lt?: number | null
  total_lte?: number | null
  total_gt?: number | null
  total_gte?: number | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: InvoiceWhereInput[]
  OR?: InvoiceWhereInput[]
  NOT?: InvoiceWhereInput[]
}
export type InvoiceWhereInputInputObject =
  | Extract<keyof InvoiceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'attachments_every', alias?: string  } 
  | { name: 'attachments_some', alias?: string  } 
  | { name: 'attachments_none', alias?: string  } 
  | { name: 'buyer', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'number_not', alias?: string  } 
  | { name: 'number_in', alias?: string  } 
  | { name: 'number_not_in', alias?: string  } 
  | { name: 'number_lt', alias?: string  } 
  | { name: 'number_lte', alias?: string  } 
  | { name: 'number_gt', alias?: string  } 
  | { name: 'number_gte', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'invoiceDate', alias?: string  } 
  | { name: 'invoiceDate_not', alias?: string  } 
  | { name: 'invoiceDate_in', alias?: string  } 
  | { name: 'invoiceDate_not_in', alias?: string  } 
  | { name: 'invoiceDate_lt', alias?: string  } 
  | { name: 'invoiceDate_lte', alias?: string  } 
  | { name: 'invoiceDate_gt', alias?: string  } 
  | { name: 'invoiceDate_gte', alias?: string  } 
  | { name: 'dueDate', alias?: string  } 
  | { name: 'dueDate_not', alias?: string  } 
  | { name: 'dueDate_in', alias?: string  } 
  | { name: 'dueDate_not_in', alias?: string  } 
  | { name: 'dueDate_lt', alias?: string  } 
  | { name: 'dueDate_lte', alias?: string  } 
  | { name: 'dueDate_gt', alias?: string  } 
  | { name: 'dueDate_gte', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'items_every', alias?: string  } 
  | { name: 'items_some', alias?: string  } 
  | { name: 'items_none', alias?: string  } 
  | { name: 'seller', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'total', alias?: string  } 
  | { name: 'total_not', alias?: string  } 
  | { name: 'total_in', alias?: string  } 
  | { name: 'total_not_in', alias?: string  } 
  | { name: 'total_lt', alias?: string  } 
  | { name: 'total_lte', alias?: string  } 
  | { name: 'total_gt', alias?: string  } 
  | { name: 'total_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InvoiceWhereUniqueInput {
  id?: string | null
}
export type InvoiceWhereUniqueInputInputObject =
  | Extract<keyof InvoiceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MainAccountWhereUniqueInput {
  id?: string | null
}
export type MainAccountWhereUniqueInputInputObject =
  | Extract<keyof MainAccountWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MainAccountWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  type?: prisma.MainAccountType | null
  type_not?: prisma.MainAccountType | null
  type_in?: prisma.MainAccountType[]
  type_not_in?: prisma.MainAccountType[]
  ConsTaxFree?: boolean | null
  ConsTaxFree_not?: boolean | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: MainAccountWhereInput[]
  OR?: MainAccountWhereInput[]
  NOT?: MainAccountWhereInput[]
}
export type MainAccountWhereInputInputObject =
  | Extract<keyof MainAccountWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'ConsTaxFree', alias?: string  } 
  | { name: 'ConsTaxFree_not', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LedgerJournalWhereUniqueInput {
  id?: string | null
}
export type LedgerJournalWhereUniqueInputInputObject =
  | Extract<keyof LedgerJournalWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface LedgerJournalWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  total?: number | null
  total_not?: number | null
  total_in?: number[]
  total_not_in?: number[]
  total_lt?: number | null
  total_lte?: number | null
  total_gt?: number | null
  total_gte?: number | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  currency?: prisma.Currency | null
  currency_not?: prisma.Currency | null
  currency_in?: prisma.Currency[]
  currency_not_in?: prisma.Currency[]
  includeConsTax?: boolean | null
  includeConsTax_not?: boolean | null
  posted?: boolean | null
  posted_not?: boolean | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: LedgerJournalWhereInput[]
  OR?: LedgerJournalWhereInput[]
  NOT?: LedgerJournalWhereInput[]
}
export type LedgerJournalWhereInputInputObject =
  | Extract<keyof LedgerJournalWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'total', alias?: string  } 
  | { name: 'total_not', alias?: string  } 
  | { name: 'total_in', alias?: string  } 
  | { name: 'total_not_in', alias?: string  } 
  | { name: 'total_lt', alias?: string  } 
  | { name: 'total_lte', alias?: string  } 
  | { name: 'total_gt', alias?: string  } 
  | { name: 'total_gte', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'currency_not', alias?: string  } 
  | { name: 'currency_in', alias?: string  } 
  | { name: 'currency_not_in', alias?: string  } 
  | { name: 'includeConsTax', alias?: string  } 
  | { name: 'includeConsTax_not', alias?: string  } 
  | { name: 'posted', alias?: string  } 
  | { name: 'posted_not', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LedgerTransactionWhereUniqueInput {
  id?: string | null
}
export type LedgerTransactionWhereUniqueInputInputObject =
  | Extract<keyof LedgerTransactionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface LedgerTransactionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  mainAccount?: MainAccountWhereInput | null
  ledgerJournal?: LedgerJournalWhereInput | null
  drcr?: prisma.DrCr | null
  drcr_not?: prisma.DrCr | null
  drcr_in?: prisma.DrCr[]
  drcr_not_in?: prisma.DrCr[]
  amount?: number | null
  amount_not?: number | null
  amount_in?: number[]
  amount_not_in?: number[]
  amount_lt?: number | null
  amount_lte?: number | null
  amount_gt?: number | null
  amount_gte?: number | null
  currency?: prisma.Currency | null
  currency_not?: prisma.Currency | null
  currency_in?: prisma.Currency[]
  currency_not_in?: prisma.Currency[]
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: LedgerTransactionWhereInput[]
  OR?: LedgerTransactionWhereInput[]
  NOT?: LedgerTransactionWhereInput[]
}
export type LedgerTransactionWhereInputInputObject =
  | Extract<keyof LedgerTransactionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'mainAccount', alias?: string  } 
  | { name: 'ledgerJournal', alias?: string  } 
  | { name: 'drcr', alias?: string  } 
  | { name: 'drcr_not', alias?: string  } 
  | { name: 'drcr_in', alias?: string  } 
  | { name: 'drcr_not_in', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'amount_not', alias?: string  } 
  | { name: 'amount_in', alias?: string  } 
  | { name: 'amount_not_in', alias?: string  } 
  | { name: 'amount_lt', alias?: string  } 
  | { name: 'amount_lte', alias?: string  } 
  | { name: 'amount_gt', alias?: string  } 
  | { name: 'amount_gte', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'currency_not', alias?: string  } 
  | { name: 'currency_in', alias?: string  } 
  | { name: 'currency_not_in', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LedgerPostingWhereUniqueInput {
  id?: string | null
}
export type LedgerPostingWhereUniqueInputInputObject =
  | Extract<keyof LedgerPostingWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface LedgerPostingWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  postingType?: prisma.PostingType | null
  postingType_not?: prisma.PostingType | null
  postingType_in?: prisma.PostingType[]
  postingType_not_in?: prisma.PostingType[]
  mainAccount?: MainAccountWhereInput | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: LedgerPostingWhereInput[]
  OR?: LedgerPostingWhereInput[]
  NOT?: LedgerPostingWhereInput[]
}
export type LedgerPostingWhereInputInputObject =
  | Extract<keyof LedgerPostingWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'postingType', alias?: string  } 
  | { name: 'postingType_not', alias?: string  } 
  | { name: 'postingType_in', alias?: string  } 
  | { name: 'postingType_not_in', alias?: string  } 
  | { name: 'mainAccount', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BankWhereUniqueInput {
  id?: string | null
}
export type BankWhereUniqueInputInputObject =
  | Extract<keyof BankWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface BankWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  institution?: string | null
  institution_not?: string | null
  institution_in?: string[]
  institution_not_in?: string[]
  institution_lt?: string | null
  institution_lte?: string | null
  institution_gt?: string | null
  institution_gte?: string | null
  institution_contains?: string | null
  institution_not_contains?: string | null
  institution_starts_with?: string | null
  institution_not_starts_with?: string | null
  institution_ends_with?: string | null
  institution_not_ends_with?: string | null
  bsb?: string | null
  bsb_not?: string | null
  bsb_in?: string[]
  bsb_not_in?: string[]
  bsb_lt?: string | null
  bsb_lte?: string | null
  bsb_gt?: string | null
  bsb_gte?: string | null
  bsb_contains?: string | null
  bsb_not_contains?: string | null
  bsb_starts_with?: string | null
  bsb_not_starts_with?: string | null
  bsb_ends_with?: string | null
  bsb_not_ends_with?: string | null
  accountNumber?: string | null
  accountNumber_not?: string | null
  accountNumber_in?: string[]
  accountNumber_not_in?: string[]
  accountNumber_lt?: string | null
  accountNumber_lte?: string | null
  accountNumber_gt?: string | null
  accountNumber_gte?: string | null
  accountNumber_contains?: string | null
  accountNumber_not_contains?: string | null
  accountNumber_starts_with?: string | null
  accountNumber_not_starts_with?: string | null
  accountNumber_ends_with?: string | null
  accountNumber_not_ends_with?: string | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: BankWhereInput[]
  OR?: BankWhereInput[]
  NOT?: BankWhereInput[]
}
export type BankWhereInputInputObject =
  | Extract<keyof BankWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'institution', alias?: string  } 
  | { name: 'institution_not', alias?: string  } 
  | { name: 'institution_in', alias?: string  } 
  | { name: 'institution_not_in', alias?: string  } 
  | { name: 'institution_lt', alias?: string  } 
  | { name: 'institution_lte', alias?: string  } 
  | { name: 'institution_gt', alias?: string  } 
  | { name: 'institution_gte', alias?: string  } 
  | { name: 'institution_contains', alias?: string  } 
  | { name: 'institution_not_contains', alias?: string  } 
  | { name: 'institution_starts_with', alias?: string  } 
  | { name: 'institution_not_starts_with', alias?: string  } 
  | { name: 'institution_ends_with', alias?: string  } 
  | { name: 'institution_not_ends_with', alias?: string  } 
  | { name: 'bsb', alias?: string  } 
  | { name: 'bsb_not', alias?: string  } 
  | { name: 'bsb_in', alias?: string  } 
  | { name: 'bsb_not_in', alias?: string  } 
  | { name: 'bsb_lt', alias?: string  } 
  | { name: 'bsb_lte', alias?: string  } 
  | { name: 'bsb_gt', alias?: string  } 
  | { name: 'bsb_gte', alias?: string  } 
  | { name: 'bsb_contains', alias?: string  } 
  | { name: 'bsb_not_contains', alias?: string  } 
  | { name: 'bsb_starts_with', alias?: string  } 
  | { name: 'bsb_not_starts_with', alias?: string  } 
  | { name: 'bsb_ends_with', alias?: string  } 
  | { name: 'bsb_not_ends_with', alias?: string  } 
  | { name: 'accountNumber', alias?: string  } 
  | { name: 'accountNumber_not', alias?: string  } 
  | { name: 'accountNumber_in', alias?: string  } 
  | { name: 'accountNumber_not_in', alias?: string  } 
  | { name: 'accountNumber_lt', alias?: string  } 
  | { name: 'accountNumber_lte', alias?: string  } 
  | { name: 'accountNumber_gt', alias?: string  } 
  | { name: 'accountNumber_gte', alias?: string  } 
  | { name: 'accountNumber_contains', alias?: string  } 
  | { name: 'accountNumber_not_contains', alias?: string  } 
  | { name: 'accountNumber_starts_with', alias?: string  } 
  | { name: 'accountNumber_not_starts_with', alias?: string  } 
  | { name: 'accountNumber_ends_with', alias?: string  } 
  | { name: 'accountNumber_not_ends_with', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BankTransactionWhereUniqueInput {
  id?: string | null
}
export type BankTransactionWhereUniqueInputInputObject =
  | Extract<keyof BankTransactionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface BankTransactionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  transactionDate?: string | null
  transactionDate_not?: string | null
  transactionDate_in?: string[]
  transactionDate_not_in?: string[]
  transactionDate_lt?: string | null
  transactionDate_lte?: string | null
  transactionDate_gt?: string | null
  transactionDate_gte?: string | null
  amount?: number | null
  amount_not?: number | null
  amount_in?: number[]
  amount_not_in?: number[]
  amount_lt?: number | null
  amount_lte?: number | null
  amount_gt?: number | null
  amount_gte?: number | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  posted?: boolean | null
  posted_not?: boolean | null
  ledgerJournal?: LedgerJournalWhereInput | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: BankTransactionWhereInput[]
  OR?: BankTransactionWhereInput[]
  NOT?: BankTransactionWhereInput[]
}
export type BankTransactionWhereInputInputObject =
  | Extract<keyof BankTransactionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'transactionDate', alias?: string  } 
  | { name: 'transactionDate_not', alias?: string  } 
  | { name: 'transactionDate_in', alias?: string  } 
  | { name: 'transactionDate_not_in', alias?: string  } 
  | { name: 'transactionDate_lt', alias?: string  } 
  | { name: 'transactionDate_lte', alias?: string  } 
  | { name: 'transactionDate_gt', alias?: string  } 
  | { name: 'transactionDate_gte', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'amount_not', alias?: string  } 
  | { name: 'amount_in', alias?: string  } 
  | { name: 'amount_not_in', alias?: string  } 
  | { name: 'amount_lt', alias?: string  } 
  | { name: 'amount_lte', alias?: string  } 
  | { name: 'amount_gt', alias?: string  } 
  | { name: 'amount_gte', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'posted', alias?: string  } 
  | { name: 'posted_not', alias?: string  } 
  | { name: 'ledgerJournal', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface WareHouseWhereUniqueInput {
  id?: string | null
}
export type WareHouseWhereUniqueInputInputObject =
  | Extract<keyof WareHouseWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface WareHouseWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: WareHouseWhereInput[]
  OR?: WareHouseWhereInput[]
  NOT?: WareHouseWhereInput[]
}
export type WareHouseWhereInputInputObject =
  | Extract<keyof WareHouseWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InventoryWhereUniqueInput {
  id?: string | null
}
export type InventoryWhereUniqueInputInputObject =
  | Extract<keyof InventoryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface InventoryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  inventoryModel?: prisma.InventoryModel | null
  inventoryModel_not?: prisma.InventoryModel | null
  inventoryModel_in?: prisma.InventoryModel[]
  inventoryModel_not_in?: prisma.InventoryModel[]
  uom?: prisma.UOM | null
  uom_not?: prisma.UOM | null
  uom_in?: prisma.UOM[]
  uom_not_in?: prisma.UOM[]
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  SellingPrice?: number | null
  SellingPrice_not?: number | null
  SellingPrice_in?: number[]
  SellingPrice_not_in?: number[]
  SellingPrice_lt?: number | null
  SellingPrice_lte?: number | null
  SellingPrice_gt?: number | null
  SellingPrice_gte?: number | null
  Barcode?: string | null
  Barcode_not?: string | null
  Barcode_in?: string[]
  Barcode_not_in?: string[]
  Barcode_lt?: string | null
  Barcode_lte?: string | null
  Barcode_gt?: string | null
  Barcode_gte?: string | null
  Barcode_contains?: string | null
  Barcode_not_contains?: string | null
  Barcode_starts_with?: string | null
  Barcode_not_starts_with?: string | null
  Barcode_ends_with?: string | null
  Barcode_not_ends_with?: string | null
  Taxable?: boolean | null
  Taxable_not?: boolean | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: InventoryWhereInput[]
  OR?: InventoryWhereInput[]
  NOT?: InventoryWhereInput[]
}
export type InventoryWhereInputInputObject =
  | Extract<keyof InventoryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'inventoryModel', alias?: string  } 
  | { name: 'inventoryModel_not', alias?: string  } 
  | { name: 'inventoryModel_in', alias?: string  } 
  | { name: 'inventoryModel_not_in', alias?: string  } 
  | { name: 'uom', alias?: string  } 
  | { name: 'uom_not', alias?: string  } 
  | { name: 'uom_in', alias?: string  } 
  | { name: 'uom_not_in', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'SellingPrice', alias?: string  } 
  | { name: 'SellingPrice_not', alias?: string  } 
  | { name: 'SellingPrice_in', alias?: string  } 
  | { name: 'SellingPrice_not_in', alias?: string  } 
  | { name: 'SellingPrice_lt', alias?: string  } 
  | { name: 'SellingPrice_lte', alias?: string  } 
  | { name: 'SellingPrice_gt', alias?: string  } 
  | { name: 'SellingPrice_gte', alias?: string  } 
  | { name: 'Barcode', alias?: string  } 
  | { name: 'Barcode_not', alias?: string  } 
  | { name: 'Barcode_in', alias?: string  } 
  | { name: 'Barcode_not_in', alias?: string  } 
  | { name: 'Barcode_lt', alias?: string  } 
  | { name: 'Barcode_lte', alias?: string  } 
  | { name: 'Barcode_gt', alias?: string  } 
  | { name: 'Barcode_gte', alias?: string  } 
  | { name: 'Barcode_contains', alias?: string  } 
  | { name: 'Barcode_not_contains', alias?: string  } 
  | { name: 'Barcode_starts_with', alias?: string  } 
  | { name: 'Barcode_not_starts_with', alias?: string  } 
  | { name: 'Barcode_ends_with', alias?: string  } 
  | { name: 'Barcode_not_ends_with', alias?: string  } 
  | { name: 'Taxable', alias?: string  } 
  | { name: 'Taxable_not', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SupplierWhereUniqueInput {
  id?: string | null
}
export type SupplierWhereUniqueInputInputObject =
  | Extract<keyof SupplierWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SupplierWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  address_every?: AddressWhereInput | null
  address_some?: AddressWhereInput | null
  address_none?: AddressWhereInput | null
  termsOfPayment?: prisma.SupplierTermsOfPayment | null
  termsOfPayment_not?: prisma.SupplierTermsOfPayment | null
  termsOfPayment_in?: prisma.SupplierTermsOfPayment[]
  termsOfPayment_not_in?: prisma.SupplierTermsOfPayment[]
  emailAddressForRemittance?: string | null
  emailAddressForRemittance_not?: string | null
  emailAddressForRemittance_in?: string[]
  emailAddressForRemittance_not_in?: string[]
  emailAddressForRemittance_lt?: string | null
  emailAddressForRemittance_lte?: string | null
  emailAddressForRemittance_gt?: string | null
  emailAddressForRemittance_gte?: string | null
  emailAddressForRemittance_contains?: string | null
  emailAddressForRemittance_not_contains?: string | null
  emailAddressForRemittance_starts_with?: string | null
  emailAddressForRemittance_not_starts_with?: string | null
  emailAddressForRemittance_ends_with?: string | null
  emailAddressForRemittance_not_ends_with?: string | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: SupplierWhereInput[]
  OR?: SupplierWhereInput[]
  NOT?: SupplierWhereInput[]
}
export type SupplierWhereInputInputObject =
  | Extract<keyof SupplierWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'address_every', alias?: string  } 
  | { name: 'address_some', alias?: string  } 
  | { name: 'address_none', alias?: string  } 
  | { name: 'termsOfPayment', alias?: string  } 
  | { name: 'termsOfPayment_not', alias?: string  } 
  | { name: 'termsOfPayment_in', alias?: string  } 
  | { name: 'termsOfPayment_not_in', alias?: string  } 
  | { name: 'emailAddressForRemittance', alias?: string  } 
  | { name: 'emailAddressForRemittance_not', alias?: string  } 
  | { name: 'emailAddressForRemittance_in', alias?: string  } 
  | { name: 'emailAddressForRemittance_not_in', alias?: string  } 
  | { name: 'emailAddressForRemittance_lt', alias?: string  } 
  | { name: 'emailAddressForRemittance_lte', alias?: string  } 
  | { name: 'emailAddressForRemittance_gt', alias?: string  } 
  | { name: 'emailAddressForRemittance_gte', alias?: string  } 
  | { name: 'emailAddressForRemittance_contains', alias?: string  } 
  | { name: 'emailAddressForRemittance_not_contains', alias?: string  } 
  | { name: 'emailAddressForRemittance_starts_with', alias?: string  } 
  | { name: 'emailAddressForRemittance_not_starts_with', alias?: string  } 
  | { name: 'emailAddressForRemittance_ends_with', alias?: string  } 
  | { name: 'emailAddressForRemittance_not_ends_with', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AssetGroupWhereUniqueInput {
  id?: string | null
}
export type AssetGroupWhereUniqueInputInputObject =
  | Extract<keyof AssetGroupWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AssetGroupWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  depreciationType?: prisma.AssetGroupDepreciationType | null
  depreciationType_not?: prisma.AssetGroupDepreciationType | null
  depreciationType_in?: prisma.AssetGroupDepreciationType[]
  depreciationType_not_in?: prisma.AssetGroupDepreciationType[]
  usefulLife?: number | null
  usefulLife_not?: number | null
  usefulLife_in?: number[]
  usefulLife_not_in?: number[]
  usefulLife_lt?: number | null
  usefulLife_lte?: number | null
  usefulLife_gt?: number | null
  usefulLife_gte?: number | null
  deprMainAccount?: MainAccountWhereInput | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: AssetGroupWhereInput[]
  OR?: AssetGroupWhereInput[]
  NOT?: AssetGroupWhereInput[]
}
export type AssetGroupWhereInputInputObject =
  | Extract<keyof AssetGroupWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'depreciationType', alias?: string  } 
  | { name: 'depreciationType_not', alias?: string  } 
  | { name: 'depreciationType_in', alias?: string  } 
  | { name: 'depreciationType_not_in', alias?: string  } 
  | { name: 'usefulLife', alias?: string  } 
  | { name: 'usefulLife_not', alias?: string  } 
  | { name: 'usefulLife_in', alias?: string  } 
  | { name: 'usefulLife_not_in', alias?: string  } 
  | { name: 'usefulLife_lt', alias?: string  } 
  | { name: 'usefulLife_lte', alias?: string  } 
  | { name: 'usefulLife_gt', alias?: string  } 
  | { name: 'usefulLife_gte', alias?: string  } 
  | { name: 'deprMainAccount', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AssetWhereUniqueInput {
  id?: string | null
}
export type AssetWhereUniqueInputInputObject =
  | Extract<keyof AssetWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AssetWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  assetGroup?: AssetGroupWhereInput | null
  dateOfAquisition?: string | null
  dateOfAquisition_not?: string | null
  dateOfAquisition_in?: string[]
  dateOfAquisition_not_in?: string[]
  dateOfAquisition_lt?: string | null
  dateOfAquisition_lte?: string | null
  dateOfAquisition_gt?: string | null
  dateOfAquisition_gte?: string | null
  aquisitionPrice?: number | null
  aquisitionPrice_not?: number | null
  aquisitionPrice_in?: number[]
  aquisitionPrice_not_in?: number[]
  aquisitionPrice_lt?: number | null
  aquisitionPrice_lte?: number | null
  aquisitionPrice_gt?: number | null
  aquisitionPrice_gte?: number | null
  netBookValue?: number | null
  netBookValue_not?: number | null
  netBookValue_in?: number[]
  netBookValue_not_in?: number[]
  netBookValue_lt?: number | null
  netBookValue_lte?: number | null
  netBookValue_gt?: number | null
  netBookValue_gte?: number | null
  depreciation?: number | null
  depreciation_not?: number | null
  depreciation_in?: number[]
  depreciation_not_in?: number[]
  depreciation_lt?: number | null
  depreciation_lte?: number | null
  depreciation_gt?: number | null
  depreciation_gte?: number | null
  salvageValue?: number | null
  salvageValue_not?: number | null
  salvageValue_in?: number[]
  salvageValue_not_in?: number[]
  salvageValue_lt?: number | null
  salvageValue_lte?: number | null
  salvageValue_gt?: number | null
  salvageValue_gte?: number | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: AssetWhereInput[]
  OR?: AssetWhereInput[]
  NOT?: AssetWhereInput[]
}
export type AssetWhereInputInputObject =
  | Extract<keyof AssetWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'assetGroup', alias?: string  } 
  | { name: 'dateOfAquisition', alias?: string  } 
  | { name: 'dateOfAquisition_not', alias?: string  } 
  | { name: 'dateOfAquisition_in', alias?: string  } 
  | { name: 'dateOfAquisition_not_in', alias?: string  } 
  | { name: 'dateOfAquisition_lt', alias?: string  } 
  | { name: 'dateOfAquisition_lte', alias?: string  } 
  | { name: 'dateOfAquisition_gt', alias?: string  } 
  | { name: 'dateOfAquisition_gte', alias?: string  } 
  | { name: 'aquisitionPrice', alias?: string  } 
  | { name: 'aquisitionPrice_not', alias?: string  } 
  | { name: 'aquisitionPrice_in', alias?: string  } 
  | { name: 'aquisitionPrice_not_in', alias?: string  } 
  | { name: 'aquisitionPrice_lt', alias?: string  } 
  | { name: 'aquisitionPrice_lte', alias?: string  } 
  | { name: 'aquisitionPrice_gt', alias?: string  } 
  | { name: 'aquisitionPrice_gte', alias?: string  } 
  | { name: 'netBookValue', alias?: string  } 
  | { name: 'netBookValue_not', alias?: string  } 
  | { name: 'netBookValue_in', alias?: string  } 
  | { name: 'netBookValue_not_in', alias?: string  } 
  | { name: 'netBookValue_lt', alias?: string  } 
  | { name: 'netBookValue_lte', alias?: string  } 
  | { name: 'netBookValue_gt', alias?: string  } 
  | { name: 'netBookValue_gte', alias?: string  } 
  | { name: 'depreciation', alias?: string  } 
  | { name: 'depreciation_not', alias?: string  } 
  | { name: 'depreciation_in', alias?: string  } 
  | { name: 'depreciation_not_in', alias?: string  } 
  | { name: 'depreciation_lt', alias?: string  } 
  | { name: 'depreciation_lte', alias?: string  } 
  | { name: 'depreciation_gt', alias?: string  } 
  | { name: 'depreciation_gte', alias?: string  } 
  | { name: 'salvageValue', alias?: string  } 
  | { name: 'salvageValue_not', alias?: string  } 
  | { name: 'salvageValue_in', alias?: string  } 
  | { name: 'salvageValue_not_in', alias?: string  } 
  | { name: 'salvageValue_lt', alias?: string  } 
  | { name: 'salvageValue_lte', alias?: string  } 
  | { name: 'salvageValue_gt', alias?: string  } 
  | { name: 'salvageValue_gte', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PurchaseOrderWhereUniqueInput {
  id?: string | null
}
export type PurchaseOrderWhereUniqueInputInputObject =
  | Extract<keyof PurchaseOrderWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PurchaseOrderWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  pbsOrganisation?: string | null
  pbsOrganisation_not?: string | null
  pbsOrganisation_in?: string[]
  pbsOrganisation_not_in?: string[]
  pbsOrganisation_lt?: string | null
  pbsOrganisation_lte?: string | null
  pbsOrganisation_gt?: string | null
  pbsOrganisation_gte?: string | null
  pbsOrganisation_contains?: string | null
  pbsOrganisation_not_contains?: string | null
  pbsOrganisation_starts_with?: string | null
  pbsOrganisation_not_starts_with?: string | null
  pbsOrganisation_ends_with?: string | null
  pbsOrganisation_not_ends_with?: string | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  orderer?: UserWhereInput | null
  status?: prisma.PoStatus | null
  status_not?: prisma.PoStatus | null
  status_in?: prisma.PoStatus[]
  status_not_in?: prisma.PoStatus[]
  supplier?: SupplierWhereInput | null
  isPbsPO?: boolean | null
  isPbsPO_not?: boolean | null
  poNumber?: number | null
  poNumber_not?: number | null
  poNumber_in?: number[]
  poNumber_not_in?: number[]
  poNumber_lt?: number | null
  poNumber_lte?: number | null
  poNumber_gt?: number | null
  poNumber_gte?: number | null
  preview?: AttachmentWhereInput | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: PurchaseOrderWhereInput[]
  OR?: PurchaseOrderWhereInput[]
  NOT?: PurchaseOrderWhereInput[]
}
export type PurchaseOrderWhereInputInputObject =
  | Extract<keyof PurchaseOrderWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'pbsOrganisation', alias?: string  } 
  | { name: 'pbsOrganisation_not', alias?: string  } 
  | { name: 'pbsOrganisation_in', alias?: string  } 
  | { name: 'pbsOrganisation_not_in', alias?: string  } 
  | { name: 'pbsOrganisation_lt', alias?: string  } 
  | { name: 'pbsOrganisation_lte', alias?: string  } 
  | { name: 'pbsOrganisation_gt', alias?: string  } 
  | { name: 'pbsOrganisation_gte', alias?: string  } 
  | { name: 'pbsOrganisation_contains', alias?: string  } 
  | { name: 'pbsOrganisation_not_contains', alias?: string  } 
  | { name: 'pbsOrganisation_starts_with', alias?: string  } 
  | { name: 'pbsOrganisation_not_starts_with', alias?: string  } 
  | { name: 'pbsOrganisation_ends_with', alias?: string  } 
  | { name: 'pbsOrganisation_not_ends_with', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'orderer', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'supplier', alias?: string  } 
  | { name: 'isPbsPO', alias?: string  } 
  | { name: 'isPbsPO_not', alias?: string  } 
  | { name: 'poNumber', alias?: string  } 
  | { name: 'poNumber_not', alias?: string  } 
  | { name: 'poNumber_in', alias?: string  } 
  | { name: 'poNumber_not_in', alias?: string  } 
  | { name: 'poNumber_lt', alias?: string  } 
  | { name: 'poNumber_lte', alias?: string  } 
  | { name: 'poNumber_gt', alias?: string  } 
  | { name: 'poNumber_gte', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PoReceiptWhereUniqueInput {
  id?: string | null
}
export type PoReceiptWhereUniqueInputInputObject =
  | Extract<keyof PoReceiptWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PoReceiptWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  receiptNumber?: string | null
  receiptNumber_not?: string | null
  receiptNumber_in?: string[]
  receiptNumber_not_in?: string[]
  receiptNumber_lt?: string | null
  receiptNumber_lte?: string | null
  receiptNumber_gt?: string | null
  receiptNumber_gte?: string | null
  receiptNumber_contains?: string | null
  receiptNumber_not_contains?: string | null
  receiptNumber_starts_with?: string | null
  receiptNumber_not_starts_with?: string | null
  receiptNumber_ends_with?: string | null
  receiptNumber_not_ends_with?: string | null
  purchaseOrder?: PurchaseOrderWhereInput | null
  receiptDate?: string | null
  receiptDate_not?: string | null
  receiptDate_in?: string[]
  receiptDate_not_in?: string[]
  receiptDate_lt?: string | null
  receiptDate_lte?: string | null
  receiptDate_gt?: string | null
  receiptDate_gte?: string | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: PoReceiptWhereInput[]
  OR?: PoReceiptWhereInput[]
  NOT?: PoReceiptWhereInput[]
}
export type PoReceiptWhereInputInputObject =
  | Extract<keyof PoReceiptWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'receiptNumber', alias?: string  } 
  | { name: 'receiptNumber_not', alias?: string  } 
  | { name: 'receiptNumber_in', alias?: string  } 
  | { name: 'receiptNumber_not_in', alias?: string  } 
  | { name: 'receiptNumber_lt', alias?: string  } 
  | { name: 'receiptNumber_lte', alias?: string  } 
  | { name: 'receiptNumber_gt', alias?: string  } 
  | { name: 'receiptNumber_gte', alias?: string  } 
  | { name: 'receiptNumber_contains', alias?: string  } 
  | { name: 'receiptNumber_not_contains', alias?: string  } 
  | { name: 'receiptNumber_starts_with', alias?: string  } 
  | { name: 'receiptNumber_not_starts_with', alias?: string  } 
  | { name: 'receiptNumber_ends_with', alias?: string  } 
  | { name: 'receiptNumber_not_ends_with', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'receiptDate', alias?: string  } 
  | { name: 'receiptDate_not', alias?: string  } 
  | { name: 'receiptDate_in', alias?: string  } 
  | { name: 'receiptDate_not_in', alias?: string  } 
  | { name: 'receiptDate_lt', alias?: string  } 
  | { name: 'receiptDate_lte', alias?: string  } 
  | { name: 'receiptDate_gt', alias?: string  } 
  | { name: 'receiptDate_gte', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InventoryOnHandWhereUniqueInput {
  id?: string | null
}
export type InventoryOnHandWhereUniqueInputInputObject =
  | Extract<keyof InventoryOnHandWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface InventoryOnHandWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  item?: InventoryWhereInput | null
  pbsDrug?: string | null
  pbsDrug_not?: string | null
  pbsDrug_in?: string[]
  pbsDrug_not_in?: string[]
  pbsDrug_lt?: string | null
  pbsDrug_lte?: string | null
  pbsDrug_gt?: string | null
  pbsDrug_gte?: string | null
  pbsDrug_contains?: string | null
  pbsDrug_not_contains?: string | null
  pbsDrug_starts_with?: string | null
  pbsDrug_not_starts_with?: string | null
  pbsDrug_ends_with?: string | null
  pbsDrug_not_ends_with?: string | null
  onHandQty?: number | null
  onHandQty_not?: number | null
  onHandQty_in?: number[]
  onHandQty_not_in?: number[]
  onHandQty_lt?: number | null
  onHandQty_lte?: number | null
  onHandQty_gt?: number | null
  onHandQty_gte?: number | null
  purchaseOrder?: PurchaseOrderWhereInput | null
  warehouse?: WareHouseWhereInput | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: InventoryOnHandWhereInput[]
  OR?: InventoryOnHandWhereInput[]
  NOT?: InventoryOnHandWhereInput[]
}
export type InventoryOnHandWhereInputInputObject =
  | Extract<keyof InventoryOnHandWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'item', alias?: string  } 
  | { name: 'pbsDrug', alias?: string  } 
  | { name: 'pbsDrug_not', alias?: string  } 
  | { name: 'pbsDrug_in', alias?: string  } 
  | { name: 'pbsDrug_not_in', alias?: string  } 
  | { name: 'pbsDrug_lt', alias?: string  } 
  | { name: 'pbsDrug_lte', alias?: string  } 
  | { name: 'pbsDrug_gt', alias?: string  } 
  | { name: 'pbsDrug_gte', alias?: string  } 
  | { name: 'pbsDrug_contains', alias?: string  } 
  | { name: 'pbsDrug_not_contains', alias?: string  } 
  | { name: 'pbsDrug_starts_with', alias?: string  } 
  | { name: 'pbsDrug_not_starts_with', alias?: string  } 
  | { name: 'pbsDrug_ends_with', alias?: string  } 
  | { name: 'pbsDrug_not_ends_with', alias?: string  } 
  | { name: 'onHandQty', alias?: string  } 
  | { name: 'onHandQty_not', alias?: string  } 
  | { name: 'onHandQty_in', alias?: string  } 
  | { name: 'onHandQty_not_in', alias?: string  } 
  | { name: 'onHandQty_lt', alias?: string  } 
  | { name: 'onHandQty_lte', alias?: string  } 
  | { name: 'onHandQty_gt', alias?: string  } 
  | { name: 'onHandQty_gte', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'warehouse', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PurchaseOrderLineWhereUniqueInput {
  id?: string | null
}
export type PurchaseOrderLineWhereUniqueInputInputObject =
  | Extract<keyof PurchaseOrderLineWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PurchaseOrderLineWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  item?: InventoryWhereInput | null
  pbsDrug?: string | null
  pbsDrug_not?: string | null
  pbsDrug_in?: string[]
  pbsDrug_not_in?: string[]
  pbsDrug_lt?: string | null
  pbsDrug_lte?: string | null
  pbsDrug_gt?: string | null
  pbsDrug_gte?: string | null
  pbsDrug_contains?: string | null
  pbsDrug_not_contains?: string | null
  pbsDrug_starts_with?: string | null
  pbsDrug_not_starts_with?: string | null
  pbsDrug_ends_with?: string | null
  pbsDrug_not_ends_with?: string | null
  qty?: number | null
  qty_not?: number | null
  qty_in?: number[]
  qty_not_in?: number[]
  qty_lt?: number | null
  qty_lte?: number | null
  qty_gt?: number | null
  qty_gte?: number | null
  unit?: prisma.UOM | null
  unit_not?: prisma.UOM | null
  unit_in?: prisma.UOM[]
  unit_not_in?: prisma.UOM[]
  unitPrice?: number | null
  unitPrice_not?: number | null
  unitPrice_in?: number[]
  unitPrice_not_in?: number[]
  unitPrice_lt?: number | null
  unitPrice_lte?: number | null
  unitPrice_gt?: number | null
  unitPrice_gte?: number | null
  site?: WareHouseWhereInput | null
  purchaseOrder?: PurchaseOrderWhereInput | null
  poReceipt?: PoReceiptWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: PurchaseOrderLineWhereInput[]
  OR?: PurchaseOrderLineWhereInput[]
  NOT?: PurchaseOrderLineWhereInput[]
}
export type PurchaseOrderLineWhereInputInputObject =
  | Extract<keyof PurchaseOrderLineWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'item', alias?: string  } 
  | { name: 'pbsDrug', alias?: string  } 
  | { name: 'pbsDrug_not', alias?: string  } 
  | { name: 'pbsDrug_in', alias?: string  } 
  | { name: 'pbsDrug_not_in', alias?: string  } 
  | { name: 'pbsDrug_lt', alias?: string  } 
  | { name: 'pbsDrug_lte', alias?: string  } 
  | { name: 'pbsDrug_gt', alias?: string  } 
  | { name: 'pbsDrug_gte', alias?: string  } 
  | { name: 'pbsDrug_contains', alias?: string  } 
  | { name: 'pbsDrug_not_contains', alias?: string  } 
  | { name: 'pbsDrug_starts_with', alias?: string  } 
  | { name: 'pbsDrug_not_starts_with', alias?: string  } 
  | { name: 'pbsDrug_ends_with', alias?: string  } 
  | { name: 'pbsDrug_not_ends_with', alias?: string  } 
  | { name: 'qty', alias?: string  } 
  | { name: 'qty_not', alias?: string  } 
  | { name: 'qty_in', alias?: string  } 
  | { name: 'qty_not_in', alias?: string  } 
  | { name: 'qty_lt', alias?: string  } 
  | { name: 'qty_lte', alias?: string  } 
  | { name: 'qty_gt', alias?: string  } 
  | { name: 'qty_gte', alias?: string  } 
  | { name: 'unit', alias?: string  } 
  | { name: 'unit_not', alias?: string  } 
  | { name: 'unit_in', alias?: string  } 
  | { name: 'unit_not_in', alias?: string  } 
  | { name: 'unitPrice', alias?: string  } 
  | { name: 'unitPrice_not', alias?: string  } 
  | { name: 'unitPrice_in', alias?: string  } 
  | { name: 'unitPrice_not_in', alias?: string  } 
  | { name: 'unitPrice_lt', alias?: string  } 
  | { name: 'unitPrice_lte', alias?: string  } 
  | { name: 'unitPrice_gt', alias?: string  } 
  | { name: 'unitPrice_gte', alias?: string  } 
  | { name: 'site', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'poReceipt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ApInvoiceWhereUniqueInput {
  id?: string | null
}
export type ApInvoiceWhereUniqueInputInputObject =
  | Extract<keyof ApInvoiceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ApInvoiceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  status?: prisma.ApInvoiceStatus | null
  status_not?: prisma.ApInvoiceStatus | null
  status_in?: prisma.ApInvoiceStatus[]
  status_not_in?: prisma.ApInvoiceStatus[]
  invoiceNumber?: string | null
  invoiceNumber_not?: string | null
  invoiceNumber_in?: string[]
  invoiceNumber_not_in?: string[]
  invoiceNumber_lt?: string | null
  invoiceNumber_lte?: string | null
  invoiceNumber_gt?: string | null
  invoiceNumber_gte?: string | null
  invoiceNumber_contains?: string | null
  invoiceNumber_not_contains?: string | null
  invoiceNumber_starts_with?: string | null
  invoiceNumber_not_starts_with?: string | null
  invoiceNumber_ends_with?: string | null
  invoiceNumber_not_ends_with?: string | null
  purchaseOrder?: PurchaseOrderWhereInput | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ApInvoiceWhereInput[]
  OR?: ApInvoiceWhereInput[]
  NOT?: ApInvoiceWhereInput[]
}
export type ApInvoiceWhereInputInputObject =
  | Extract<keyof ApInvoiceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'invoiceNumber', alias?: string  } 
  | { name: 'invoiceNumber_not', alias?: string  } 
  | { name: 'invoiceNumber_in', alias?: string  } 
  | { name: 'invoiceNumber_not_in', alias?: string  } 
  | { name: 'invoiceNumber_lt', alias?: string  } 
  | { name: 'invoiceNumber_lte', alias?: string  } 
  | { name: 'invoiceNumber_gt', alias?: string  } 
  | { name: 'invoiceNumber_gte', alias?: string  } 
  | { name: 'invoiceNumber_contains', alias?: string  } 
  | { name: 'invoiceNumber_not_contains', alias?: string  } 
  | { name: 'invoiceNumber_starts_with', alias?: string  } 
  | { name: 'invoiceNumber_not_starts_with', alias?: string  } 
  | { name: 'invoiceNumber_ends_with', alias?: string  } 
  | { name: 'invoiceNumber_not_ends_with', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SalesOrderWhereUniqueInput {
  id?: string | null
}
export type SalesOrderWhereUniqueInputInputObject =
  | Extract<keyof SalesOrderWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SalesOrderWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  customer?: CustomerWhereInput | null
  transactionDate?: string | null
  transactionDate_not?: string | null
  transactionDate_in?: string[]
  transactionDate_not_in?: string[]
  transactionDate_lt?: string | null
  transactionDate_lte?: string | null
  transactionDate_gt?: string | null
  transactionDate_gte?: string | null
  currency?: prisma.Currency | null
  currency_not?: prisma.Currency | null
  currency_in?: prisma.Currency[]
  currency_not_in?: prisma.Currency[]
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: SalesOrderWhereInput[]
  OR?: SalesOrderWhereInput[]
  NOT?: SalesOrderWhereInput[]
}
export type SalesOrderWhereInputInputObject =
  | Extract<keyof SalesOrderWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'transactionDate', alias?: string  } 
  | { name: 'transactionDate_not', alias?: string  } 
  | { name: 'transactionDate_in', alias?: string  } 
  | { name: 'transactionDate_not_in', alias?: string  } 
  | { name: 'transactionDate_lt', alias?: string  } 
  | { name: 'transactionDate_lte', alias?: string  } 
  | { name: 'transactionDate_gt', alias?: string  } 
  | { name: 'transactionDate_gte', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'currency_not', alias?: string  } 
  | { name: 'currency_in', alias?: string  } 
  | { name: 'currency_not_in', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SalesOrderLineWhereUniqueInput {
  id?: string | null
}
export type SalesOrderLineWhereUniqueInputInputObject =
  | Extract<keyof SalesOrderLineWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SalesOrderLineWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  salesOrder?: SalesOrderWhereInput | null
  inventory?: InventoryWhereInput | null
  qty?: number | null
  qty_not?: number | null
  qty_in?: number[]
  qty_not_in?: number[]
  qty_lt?: number | null
  qty_lte?: number | null
  qty_gt?: number | null
  qty_gte?: number | null
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: SalesOrderLineWhereInput[]
  OR?: SalesOrderLineWhereInput[]
  NOT?: SalesOrderLineWhereInput[]
}
export type SalesOrderLineWhereInputInputObject =
  | Extract<keyof SalesOrderLineWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'salesOrder', alias?: string  } 
  | { name: 'inventory', alias?: string  } 
  | { name: 'qty', alias?: string  } 
  | { name: 'qty_not', alias?: string  } 
  | { name: 'qty_in', alias?: string  } 
  | { name: 'qty_not_in', alias?: string  } 
  | { name: 'qty_lt', alias?: string  } 
  | { name: 'qty_lte', alias?: string  } 
  | { name: 'qty_gt', alias?: string  } 
  | { name: 'qty_gte', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PredictedSalesValueByCompanyWhereUniqueInput {
  id?: string | null
}
export type PredictedSalesValueByCompanyWhereUniqueInputInputObject =
  | Extract<keyof PredictedSalesValueByCompanyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PredictedSalesValueByCompanyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  datePredictionRun?: string | null
  datePredictionRun_not?: string | null
  datePredictionRun_in?: string[]
  datePredictionRun_not_in?: string[]
  datePredictionRun_lt?: string | null
  datePredictionRun_lte?: string | null
  datePredictionRun_gt?: string | null
  datePredictionRun_gte?: string | null
  company?: CompanyWhereInput | null
  predictedSalesValue?: number | null
  predictedSalesValue_not?: number | null
  predictedSalesValue_in?: number[]
  predictedSalesValue_not_in?: number[]
  predictedSalesValue_lt?: number | null
  predictedSalesValue_lte?: number | null
  predictedSalesValue_gt?: number | null
  predictedSalesValue_gte?: number | null
  predictedDate?: string | null
  predictedDate_not?: string | null
  predictedDate_in?: string[]
  predictedDate_not_in?: string[]
  predictedDate_lt?: string | null
  predictedDate_lte?: string | null
  predictedDate_gt?: string | null
  predictedDate_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: PredictedSalesValueByCompanyWhereInput[]
  OR?: PredictedSalesValueByCompanyWhereInput[]
  NOT?: PredictedSalesValueByCompanyWhereInput[]
}
export type PredictedSalesValueByCompanyWhereInputInputObject =
  | Extract<keyof PredictedSalesValueByCompanyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'datePredictionRun', alias?: string  } 
  | { name: 'datePredictionRun_not', alias?: string  } 
  | { name: 'datePredictionRun_in', alias?: string  } 
  | { name: 'datePredictionRun_not_in', alias?: string  } 
  | { name: 'datePredictionRun_lt', alias?: string  } 
  | { name: 'datePredictionRun_lte', alias?: string  } 
  | { name: 'datePredictionRun_gt', alias?: string  } 
  | { name: 'datePredictionRun_gte', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'predictedSalesValue', alias?: string  } 
  | { name: 'predictedSalesValue_not', alias?: string  } 
  | { name: 'predictedSalesValue_in', alias?: string  } 
  | { name: 'predictedSalesValue_not_in', alias?: string  } 
  | { name: 'predictedSalesValue_lt', alias?: string  } 
  | { name: 'predictedSalesValue_lte', alias?: string  } 
  | { name: 'predictedSalesValue_gt', alias?: string  } 
  | { name: 'predictedSalesValue_gte', alias?: string  } 
  | { name: 'predictedDate', alias?: string  } 
  | { name: 'predictedDate_not', alias?: string  } 
  | { name: 'predictedDate_in', alias?: string  } 
  | { name: 'predictedDate_not_in', alias?: string  } 
  | { name: 'predictedDate_lt', alias?: string  } 
  | { name: 'predictedDate_lte', alias?: string  } 
  | { name: 'predictedDate_gt', alias?: string  } 
  | { name: 'predictedDate_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PredictedSalesQuantityOfItemsByCompanyWhereUniqueInput {
  id?: string | null
}
export type PredictedSalesQuantityOfItemsByCompanyWhereUniqueInputInputObject =
  | Extract<keyof PredictedSalesQuantityOfItemsByCompanyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PredictedSalesQuantityOfItemsByCompanyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  datePredictionRun?: string | null
  datePredictionRun_not?: string | null
  datePredictionRun_in?: string[]
  datePredictionRun_not_in?: string[]
  datePredictionRun_lt?: string | null
  datePredictionRun_lte?: string | null
  datePredictionRun_gt?: string | null
  datePredictionRun_gte?: string | null
  company?: CompanyWhereInput | null
  inventory?: InventoryWhereInput | null
  predictedSalesValue?: number | null
  predictedSalesValue_not?: number | null
  predictedSalesValue_in?: number[]
  predictedSalesValue_not_in?: number[]
  predictedSalesValue_lt?: number | null
  predictedSalesValue_lte?: number | null
  predictedSalesValue_gt?: number | null
  predictedSalesValue_gte?: number | null
  predictedDate?: string | null
  predictedDate_not?: string | null
  predictedDate_in?: string[]
  predictedDate_not_in?: string[]
  predictedDate_lt?: string | null
  predictedDate_lte?: string | null
  predictedDate_gt?: string | null
  predictedDate_gte?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: PredictedSalesQuantityOfItemsByCompanyWhereInput[]
  OR?: PredictedSalesQuantityOfItemsByCompanyWhereInput[]
  NOT?: PredictedSalesQuantityOfItemsByCompanyWhereInput[]
}
export type PredictedSalesQuantityOfItemsByCompanyWhereInputInputObject =
  | Extract<keyof PredictedSalesQuantityOfItemsByCompanyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'datePredictionRun', alias?: string  } 
  | { name: 'datePredictionRun_not', alias?: string  } 
  | { name: 'datePredictionRun_in', alias?: string  } 
  | { name: 'datePredictionRun_not_in', alias?: string  } 
  | { name: 'datePredictionRun_lt', alias?: string  } 
  | { name: 'datePredictionRun_lte', alias?: string  } 
  | { name: 'datePredictionRun_gt', alias?: string  } 
  | { name: 'datePredictionRun_gte', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'inventory', alias?: string  } 
  | { name: 'predictedSalesValue', alias?: string  } 
  | { name: 'predictedSalesValue_not', alias?: string  } 
  | { name: 'predictedSalesValue_in', alias?: string  } 
  | { name: 'predictedSalesValue_not_in', alias?: string  } 
  | { name: 'predictedSalesValue_lt', alias?: string  } 
  | { name: 'predictedSalesValue_lte', alias?: string  } 
  | { name: 'predictedSalesValue_gt', alias?: string  } 
  | { name: 'predictedSalesValue_gte', alias?: string  } 
  | { name: 'predictedDate', alias?: string  } 
  | { name: 'predictedDate_not', alias?: string  } 
  | { name: 'predictedDate_in', alias?: string  } 
  | { name: 'predictedDate_not_in', alias?: string  } 
  | { name: 'predictedDate_lt', alias?: string  } 
  | { name: 'predictedDate_lte', alias?: string  } 
  | { name: 'predictedDate_gt', alias?: string  } 
  | { name: 'predictedDate_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MedicareServiceWhereUniqueInput {
  id?: string | null
}
export type MedicareServiceWhereUniqueInputInputObject =
  | Extract<keyof MedicareServiceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MedicareServiceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  MBSScheduleFee?: number | null
  MBSScheduleFee_not?: number | null
  MBSScheduleFee_in?: number[]
  MBSScheduleFee_not_in?: number[]
  MBSScheduleFee_lt?: number | null
  MBSScheduleFee_lte?: number | null
  MBSScheduleFee_gt?: number | null
  MBSScheduleFee_gte?: number | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  isActive?: boolean | null
  isActive_not?: boolean | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: MedicareServiceWhereInput[]
  OR?: MedicareServiceWhereInput[]
  NOT?: MedicareServiceWhereInput[]
}
export type MedicareServiceWhereInputInputObject =
  | Extract<keyof MedicareServiceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'MBSScheduleFee', alias?: string  } 
  | { name: 'MBSScheduleFee_not', alias?: string  } 
  | { name: 'MBSScheduleFee_in', alias?: string  } 
  | { name: 'MBSScheduleFee_not_in', alias?: string  } 
  | { name: 'MBSScheduleFee_lt', alias?: string  } 
  | { name: 'MBSScheduleFee_lte', alias?: string  } 
  | { name: 'MBSScheduleFee_gt', alias?: string  } 
  | { name: 'MBSScheduleFee_gte', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isActive_not', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PatientWhereUniqueInput {
  id?: string | null
}
export type PatientWhereUniqueInputInputObject =
  | Extract<keyof PatientWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface NameWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  isPrimary?: boolean | null
  isPrimary_not?: boolean | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: NameWhereInput[]
  OR?: NameWhereInput[]
  NOT?: NameWhereInput[]
}
export type NameWhereInputInputObject =
  | Extract<keyof NameWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPrimary_not', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PatientWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  names_every?: NameWhereInput | null
  names_some?: NameWhereInput | null
  names_none?: NameWhereInput | null
  address?: AddressWhereInput | null
  birthAddress?: AddressWhereInput | null
  dateOfBirth?: string | null
  dateOfBirth_not?: string | null
  dateOfBirth_in?: string[]
  dateOfBirth_not_in?: string[]
  dateOfBirth_lt?: string | null
  dateOfBirth_lte?: string | null
  dateOfBirth_gt?: string | null
  dateOfBirth_gte?: string | null
  customer?: CustomerWhereInput | null
  gender?: prisma.Gender | null
  gender_not?: prisma.Gender | null
  gender_in?: prisma.Gender[]
  gender_not_in?: prisma.Gender[]
  dvaCardType?: prisma.DVACardType | null
  dvaCardType_not?: prisma.DVACardType | null
  dvaCardType_in?: prisma.DVACardType[]
  dvaCardType_not_in?: prisma.DVACardType[]
  aboriginalStatus?: prisma.AboriginalStatus | null
  aboriginalStatus_not?: prisma.AboriginalStatus | null
  aboriginalStatus_in?: prisma.AboriginalStatus[]
  aboriginalStatus_not_in?: prisma.AboriginalStatus[]
  pensionerConcession?: string | null
  pensionerConcession_not?: string | null
  pensionerConcession_in?: string[]
  pensionerConcession_not_in?: string[]
  pensionerConcession_lt?: string | null
  pensionerConcession_lte?: string | null
  pensionerConcession_gt?: string | null
  pensionerConcession_gte?: string | null
  pensionerConcession_contains?: string | null
  pensionerConcession_not_contains?: string | null
  pensionerConcession_starts_with?: string | null
  pensionerConcession_not_starts_with?: string | null
  pensionerConcession_ends_with?: string | null
  pensionerConcession_not_ends_with?: string | null
  commonwealthSeniors?: string | null
  commonwealthSeniors_not?: string | null
  commonwealthSeniors_in?: string[]
  commonwealthSeniors_not_in?: string[]
  commonwealthSeniors_lt?: string | null
  commonwealthSeniors_lte?: string | null
  commonwealthSeniors_gt?: string | null
  commonwealthSeniors_gte?: string | null
  commonwealthSeniors_contains?: string | null
  commonwealthSeniors_not_contains?: string | null
  commonwealthSeniors_starts_with?: string | null
  commonwealthSeniors_not_starts_with?: string | null
  commonwealthSeniors_ends_with?: string | null
  commonwealthSeniors_not_ends_with?: string | null
  healthcareConcession?: string | null
  healthcareConcession_not?: string | null
  healthcareConcession_in?: string[]
  healthcareConcession_not_in?: string[]
  healthcareConcession_lt?: string | null
  healthcareConcession_lte?: string | null
  healthcareConcession_gt?: string | null
  healthcareConcession_gte?: string | null
  healthcareConcession_contains?: string | null
  healthcareConcession_not_contains?: string | null
  healthcareConcession_starts_with?: string | null
  healthcareConcession_not_starts_with?: string | null
  healthcareConcession_ends_with?: string | null
  healthcareConcession_not_ends_with?: string | null
  safetyNetConcession?: number | null
  safetyNetConcession_not?: number | null
  safetyNetConcession_in?: number[]
  safetyNetConcession_not_in?: number[]
  safetyNetConcession_lt?: number | null
  safetyNetConcession_lte?: number | null
  safetyNetConcession_gt?: number | null
  safetyNetConcession_gte?: number | null
  medicareNumber?: string | null
  medicareNumber_not?: string | null
  medicareNumber_in?: string[]
  medicareNumber_not_in?: string[]
  medicareNumber_lt?: string | null
  medicareNumber_lte?: string | null
  medicareNumber_gt?: string | null
  medicareNumber_gte?: string | null
  medicareNumber_contains?: string | null
  medicareNumber_not_contains?: string | null
  medicareNumber_starts_with?: string | null
  medicareNumber_not_starts_with?: string | null
  medicareNumber_ends_with?: string | null
  medicareNumber_not_ends_with?: string | null
  DVA?: string | null
  DVA_not?: string | null
  DVA_in?: string[]
  DVA_not_in?: string[]
  DVA_lt?: string | null
  DVA_lte?: string | null
  DVA_gt?: string | null
  DVA_gte?: string | null
  DVA_contains?: string | null
  DVA_not_contains?: string | null
  DVA_starts_with?: string | null
  DVA_not_starts_with?: string | null
  DVA_ends_with?: string | null
  DVA_not_ends_with?: string | null
  potentialDuplicate?: boolean | null
  potentialDuplicate_not?: boolean | null
  oneName?: boolean | null
  oneName_not?: boolean | null
  ihi?: string | null
  ihi_not?: string | null
  ihi_in?: string[]
  ihi_not_in?: string[]
  ihi_lt?: string | null
  ihi_lte?: string | null
  ihi_gt?: string | null
  ihi_gte?: string | null
  ihi_contains?: string | null
  ihi_not_contains?: string | null
  ihi_starts_with?: string | null
  ihi_not_starts_with?: string | null
  ihi_ends_with?: string | null
  ihi_not_ends_with?: string | null
  ihiValidatedDate?: string | null
  ihiValidatedDate_not?: string | null
  ihiValidatedDate_in?: string[]
  ihiValidatedDate_not_in?: string[]
  ihiValidatedDate_lt?: string | null
  ihiValidatedDate_lte?: string | null
  ihiValidatedDate_gt?: string | null
  ihiValidatedDate_gte?: string | null
  noOfBirths?: number | null
  noOfBirths_not?: number | null
  noOfBirths_in?: number[]
  noOfBirths_not_in?: number[]
  noOfBirths_lt?: number | null
  noOfBirths_lte?: number | null
  noOfBirths_gt?: number | null
  noOfBirths_gte?: number | null
  deceasedDate?: string | null
  deceasedDate_not?: string | null
  deceasedDate_in?: string[]
  deceasedDate_not_in?: string[]
  deceasedDate_lt?: string | null
  deceasedDate_lte?: string | null
  deceasedDate_gt?: string | null
  deceasedDate_gte?: string | null
  basicDailyFee_every?: BasicDailyFeeWhereInput | null
  basicDailyFee_some?: BasicDailyFeeWhereInput | null
  basicDailyFee_none?: BasicDailyFeeWhereInput | null
  levelOfCare?: prisma.LevelOfCare | null
  levelOfCare_not?: prisma.LevelOfCare | null
  levelOfCare_in?: prisma.LevelOfCare[]
  levelOfCare_not_in?: prisma.LevelOfCare[]
  dateEnteredAgedCare?: string | null
  dateEnteredAgedCare_not?: string | null
  dateEnteredAgedCare_in?: string[]
  dateEnteredAgedCare_not_in?: string[]
  dateEnteredAgedCare_lt?: string | null
  dateEnteredAgedCare_lte?: string | null
  dateEnteredAgedCare_gt?: string | null
  dateEnteredAgedCare_gte?: string | null
  company?: CompanyWhereInput | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: PatientWhereInput[]
  OR?: PatientWhereInput[]
  NOT?: PatientWhereInput[]
}
export type PatientWhereInputInputObject =
  | Extract<keyof PatientWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'names_every', alias?: string  } 
  | { name: 'names_some', alias?: string  } 
  | { name: 'names_none', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'birthAddress', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'dateOfBirth_not', alias?: string  } 
  | { name: 'dateOfBirth_in', alias?: string  } 
  | { name: 'dateOfBirth_not_in', alias?: string  } 
  | { name: 'dateOfBirth_lt', alias?: string  } 
  | { name: 'dateOfBirth_lte', alias?: string  } 
  | { name: 'dateOfBirth_gt', alias?: string  } 
  | { name: 'dateOfBirth_gte', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'gender_not', alias?: string  } 
  | { name: 'gender_in', alias?: string  } 
  | { name: 'gender_not_in', alias?: string  } 
  | { name: 'dvaCardType', alias?: string  } 
  | { name: 'dvaCardType_not', alias?: string  } 
  | { name: 'dvaCardType_in', alias?: string  } 
  | { name: 'dvaCardType_not_in', alias?: string  } 
  | { name: 'aboriginalStatus', alias?: string  } 
  | { name: 'aboriginalStatus_not', alias?: string  } 
  | { name: 'aboriginalStatus_in', alias?: string  } 
  | { name: 'aboriginalStatus_not_in', alias?: string  } 
  | { name: 'pensionerConcession', alias?: string  } 
  | { name: 'pensionerConcession_not', alias?: string  } 
  | { name: 'pensionerConcession_in', alias?: string  } 
  | { name: 'pensionerConcession_not_in', alias?: string  } 
  | { name: 'pensionerConcession_lt', alias?: string  } 
  | { name: 'pensionerConcession_lte', alias?: string  } 
  | { name: 'pensionerConcession_gt', alias?: string  } 
  | { name: 'pensionerConcession_gte', alias?: string  } 
  | { name: 'pensionerConcession_contains', alias?: string  } 
  | { name: 'pensionerConcession_not_contains', alias?: string  } 
  | { name: 'pensionerConcession_starts_with', alias?: string  } 
  | { name: 'pensionerConcession_not_starts_with', alias?: string  } 
  | { name: 'pensionerConcession_ends_with', alias?: string  } 
  | { name: 'pensionerConcession_not_ends_with', alias?: string  } 
  | { name: 'commonwealthSeniors', alias?: string  } 
  | { name: 'commonwealthSeniors_not', alias?: string  } 
  | { name: 'commonwealthSeniors_in', alias?: string  } 
  | { name: 'commonwealthSeniors_not_in', alias?: string  } 
  | { name: 'commonwealthSeniors_lt', alias?: string  } 
  | { name: 'commonwealthSeniors_lte', alias?: string  } 
  | { name: 'commonwealthSeniors_gt', alias?: string  } 
  | { name: 'commonwealthSeniors_gte', alias?: string  } 
  | { name: 'commonwealthSeniors_contains', alias?: string  } 
  | { name: 'commonwealthSeniors_not_contains', alias?: string  } 
  | { name: 'commonwealthSeniors_starts_with', alias?: string  } 
  | { name: 'commonwealthSeniors_not_starts_with', alias?: string  } 
  | { name: 'commonwealthSeniors_ends_with', alias?: string  } 
  | { name: 'commonwealthSeniors_not_ends_with', alias?: string  } 
  | { name: 'healthcareConcession', alias?: string  } 
  | { name: 'healthcareConcession_not', alias?: string  } 
  | { name: 'healthcareConcession_in', alias?: string  } 
  | { name: 'healthcareConcession_not_in', alias?: string  } 
  | { name: 'healthcareConcession_lt', alias?: string  } 
  | { name: 'healthcareConcession_lte', alias?: string  } 
  | { name: 'healthcareConcession_gt', alias?: string  } 
  | { name: 'healthcareConcession_gte', alias?: string  } 
  | { name: 'healthcareConcession_contains', alias?: string  } 
  | { name: 'healthcareConcession_not_contains', alias?: string  } 
  | { name: 'healthcareConcession_starts_with', alias?: string  } 
  | { name: 'healthcareConcession_not_starts_with', alias?: string  } 
  | { name: 'healthcareConcession_ends_with', alias?: string  } 
  | { name: 'healthcareConcession_not_ends_with', alias?: string  } 
  | { name: 'safetyNetConcession', alias?: string  } 
  | { name: 'safetyNetConcession_not', alias?: string  } 
  | { name: 'safetyNetConcession_in', alias?: string  } 
  | { name: 'safetyNetConcession_not_in', alias?: string  } 
  | { name: 'safetyNetConcession_lt', alias?: string  } 
  | { name: 'safetyNetConcession_lte', alias?: string  } 
  | { name: 'safetyNetConcession_gt', alias?: string  } 
  | { name: 'safetyNetConcession_gte', alias?: string  } 
  | { name: 'medicareNumber', alias?: string  } 
  | { name: 'medicareNumber_not', alias?: string  } 
  | { name: 'medicareNumber_in', alias?: string  } 
  | { name: 'medicareNumber_not_in', alias?: string  } 
  | { name: 'medicareNumber_lt', alias?: string  } 
  | { name: 'medicareNumber_lte', alias?: string  } 
  | { name: 'medicareNumber_gt', alias?: string  } 
  | { name: 'medicareNumber_gte', alias?: string  } 
  | { name: 'medicareNumber_contains', alias?: string  } 
  | { name: 'medicareNumber_not_contains', alias?: string  } 
  | { name: 'medicareNumber_starts_with', alias?: string  } 
  | { name: 'medicareNumber_not_starts_with', alias?: string  } 
  | { name: 'medicareNumber_ends_with', alias?: string  } 
  | { name: 'medicareNumber_not_ends_with', alias?: string  } 
  | { name: 'DVA', alias?: string  } 
  | { name: 'DVA_not', alias?: string  } 
  | { name: 'DVA_in', alias?: string  } 
  | { name: 'DVA_not_in', alias?: string  } 
  | { name: 'DVA_lt', alias?: string  } 
  | { name: 'DVA_lte', alias?: string  } 
  | { name: 'DVA_gt', alias?: string  } 
  | { name: 'DVA_gte', alias?: string  } 
  | { name: 'DVA_contains', alias?: string  } 
  | { name: 'DVA_not_contains', alias?: string  } 
  | { name: 'DVA_starts_with', alias?: string  } 
  | { name: 'DVA_not_starts_with', alias?: string  } 
  | { name: 'DVA_ends_with', alias?: string  } 
  | { name: 'DVA_not_ends_with', alias?: string  } 
  | { name: 'potentialDuplicate', alias?: string  } 
  | { name: 'potentialDuplicate_not', alias?: string  } 
  | { name: 'oneName', alias?: string  } 
  | { name: 'oneName_not', alias?: string  } 
  | { name: 'ihi', alias?: string  } 
  | { name: 'ihi_not', alias?: string  } 
  | { name: 'ihi_in', alias?: string  } 
  | { name: 'ihi_not_in', alias?: string  } 
  | { name: 'ihi_lt', alias?: string  } 
  | { name: 'ihi_lte', alias?: string  } 
  | { name: 'ihi_gt', alias?: string  } 
  | { name: 'ihi_gte', alias?: string  } 
  | { name: 'ihi_contains', alias?: string  } 
  | { name: 'ihi_not_contains', alias?: string  } 
  | { name: 'ihi_starts_with', alias?: string  } 
  | { name: 'ihi_not_starts_with', alias?: string  } 
  | { name: 'ihi_ends_with', alias?: string  } 
  | { name: 'ihi_not_ends_with', alias?: string  } 
  | { name: 'ihiValidatedDate', alias?: string  } 
  | { name: 'ihiValidatedDate_not', alias?: string  } 
  | { name: 'ihiValidatedDate_in', alias?: string  } 
  | { name: 'ihiValidatedDate_not_in', alias?: string  } 
  | { name: 'ihiValidatedDate_lt', alias?: string  } 
  | { name: 'ihiValidatedDate_lte', alias?: string  } 
  | { name: 'ihiValidatedDate_gt', alias?: string  } 
  | { name: 'ihiValidatedDate_gte', alias?: string  } 
  | { name: 'noOfBirths', alias?: string  } 
  | { name: 'noOfBirths_not', alias?: string  } 
  | { name: 'noOfBirths_in', alias?: string  } 
  | { name: 'noOfBirths_not_in', alias?: string  } 
  | { name: 'noOfBirths_lt', alias?: string  } 
  | { name: 'noOfBirths_lte', alias?: string  } 
  | { name: 'noOfBirths_gt', alias?: string  } 
  | { name: 'noOfBirths_gte', alias?: string  } 
  | { name: 'deceasedDate', alias?: string  } 
  | { name: 'deceasedDate_not', alias?: string  } 
  | { name: 'deceasedDate_in', alias?: string  } 
  | { name: 'deceasedDate_not_in', alias?: string  } 
  | { name: 'deceasedDate_lt', alias?: string  } 
  | { name: 'deceasedDate_lte', alias?: string  } 
  | { name: 'deceasedDate_gt', alias?: string  } 
  | { name: 'deceasedDate_gte', alias?: string  } 
  | { name: 'basicDailyFee_every', alias?: string  } 
  | { name: 'basicDailyFee_some', alias?: string  } 
  | { name: 'basicDailyFee_none', alias?: string  } 
  | { name: 'levelOfCare', alias?: string  } 
  | { name: 'levelOfCare_not', alias?: string  } 
  | { name: 'levelOfCare_in', alias?: string  } 
  | { name: 'levelOfCare_not_in', alias?: string  } 
  | { name: 'dateEnteredAgedCare', alias?: string  } 
  | { name: 'dateEnteredAgedCare_not', alias?: string  } 
  | { name: 'dateEnteredAgedCare_in', alias?: string  } 
  | { name: 'dateEnteredAgedCare_not_in', alias?: string  } 
  | { name: 'dateEnteredAgedCare_lt', alias?: string  } 
  | { name: 'dateEnteredAgedCare_lte', alias?: string  } 
  | { name: 'dateEnteredAgedCare_gt', alias?: string  } 
  | { name: 'dateEnteredAgedCare_gte', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NameWhereUniqueInput {
  id?: string | null
}
export type NameWhereUniqueInputInputObject =
  | Extract<keyof NameWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface HealthcareProviderWhereUniqueInput {
  id?: string | null
}
export type HealthcareProviderWhereUniqueInputInputObject =
  | Extract<keyof HealthcareProviderWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface HealthcareProviderWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  occupation?: string | null
  occupation_not?: string | null
  occupation_in?: string[]
  occupation_not_in?: string[]
  occupation_lt?: string | null
  occupation_lte?: string | null
  occupation_gt?: string | null
  occupation_gte?: string | null
  occupation_contains?: string | null
  occupation_not_contains?: string | null
  occupation_starts_with?: string | null
  occupation_not_starts_with?: string | null
  occupation_ends_with?: string | null
  occupation_not_ends_with?: string | null
  hpii?: string | null
  hpii_not?: string | null
  hpii_in?: string[]
  hpii_not_in?: string[]
  hpii_lt?: string | null
  hpii_lte?: string | null
  hpii_gt?: string | null
  hpii_gte?: string | null
  hpii_contains?: string | null
  hpii_not_contains?: string | null
  hpii_starts_with?: string | null
  hpii_not_starts_with?: string | null
  hpii_ends_with?: string | null
  hpii_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  dateOfBirth?: string | null
  dateOfBirth_not?: string | null
  dateOfBirth_in?: string[]
  dateOfBirth_not_in?: string[]
  dateOfBirth_lt?: string | null
  dateOfBirth_lte?: string | null
  dateOfBirth_gt?: string | null
  dateOfBirth_gte?: string | null
  emailAddress?: string | null
  emailAddress_not?: string | null
  emailAddress_in?: string[]
  emailAddress_not_in?: string[]
  emailAddress_lt?: string | null
  emailAddress_lte?: string | null
  emailAddress_gt?: string | null
  emailAddress_gte?: string | null
  emailAddress_contains?: string | null
  emailAddress_not_contains?: string | null
  emailAddress_starts_with?: string | null
  emailAddress_not_starts_with?: string | null
  emailAddress_ends_with?: string | null
  emailAddress_not_ends_with?: string | null
  gender?: prisma.Gender | null
  gender_not?: prisma.Gender | null
  gender_in?: prisma.Gender[]
  gender_not_in?: prisma.Gender[]
  address?: AddressWhereInput | null
  company?: CompanyWhereInput | null
  ahpraNumber?: string | null
  ahpraNumber_not?: string | null
  ahpraNumber_in?: string[]
  ahpraNumber_not_in?: string[]
  ahpraNumber_lt?: string | null
  ahpraNumber_lte?: string | null
  ahpraNumber_gt?: string | null
  ahpraNumber_gte?: string | null
  ahpraNumber_contains?: string | null
  ahpraNumber_not_contains?: string | null
  ahpraNumber_starts_with?: string | null
  ahpraNumber_not_starts_with?: string | null
  ahpraNumber_ends_with?: string | null
  ahpraNumber_not_ends_with?: string | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: HealthcareProviderWhereInput[]
  OR?: HealthcareProviderWhereInput[]
  NOT?: HealthcareProviderWhereInput[]
}
export type HealthcareProviderWhereInputInputObject =
  | Extract<keyof HealthcareProviderWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'occupation', alias?: string  } 
  | { name: 'occupation_not', alias?: string  } 
  | { name: 'occupation_in', alias?: string  } 
  | { name: 'occupation_not_in', alias?: string  } 
  | { name: 'occupation_lt', alias?: string  } 
  | { name: 'occupation_lte', alias?: string  } 
  | { name: 'occupation_gt', alias?: string  } 
  | { name: 'occupation_gte', alias?: string  } 
  | { name: 'occupation_contains', alias?: string  } 
  | { name: 'occupation_not_contains', alias?: string  } 
  | { name: 'occupation_starts_with', alias?: string  } 
  | { name: 'occupation_not_starts_with', alias?: string  } 
  | { name: 'occupation_ends_with', alias?: string  } 
  | { name: 'occupation_not_ends_with', alias?: string  } 
  | { name: 'hpii', alias?: string  } 
  | { name: 'hpii_not', alias?: string  } 
  | { name: 'hpii_in', alias?: string  } 
  | { name: 'hpii_not_in', alias?: string  } 
  | { name: 'hpii_lt', alias?: string  } 
  | { name: 'hpii_lte', alias?: string  } 
  | { name: 'hpii_gt', alias?: string  } 
  | { name: 'hpii_gte', alias?: string  } 
  | { name: 'hpii_contains', alias?: string  } 
  | { name: 'hpii_not_contains', alias?: string  } 
  | { name: 'hpii_starts_with', alias?: string  } 
  | { name: 'hpii_not_starts_with', alias?: string  } 
  | { name: 'hpii_ends_with', alias?: string  } 
  | { name: 'hpii_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'dateOfBirth_not', alias?: string  } 
  | { name: 'dateOfBirth_in', alias?: string  } 
  | { name: 'dateOfBirth_not_in', alias?: string  } 
  | { name: 'dateOfBirth_lt', alias?: string  } 
  | { name: 'dateOfBirth_lte', alias?: string  } 
  | { name: 'dateOfBirth_gt', alias?: string  } 
  | { name: 'dateOfBirth_gte', alias?: string  } 
  | { name: 'emailAddress', alias?: string  } 
  | { name: 'emailAddress_not', alias?: string  } 
  | { name: 'emailAddress_in', alias?: string  } 
  | { name: 'emailAddress_not_in', alias?: string  } 
  | { name: 'emailAddress_lt', alias?: string  } 
  | { name: 'emailAddress_lte', alias?: string  } 
  | { name: 'emailAddress_gt', alias?: string  } 
  | { name: 'emailAddress_gte', alias?: string  } 
  | { name: 'emailAddress_contains', alias?: string  } 
  | { name: 'emailAddress_not_contains', alias?: string  } 
  | { name: 'emailAddress_starts_with', alias?: string  } 
  | { name: 'emailAddress_not_starts_with', alias?: string  } 
  | { name: 'emailAddress_ends_with', alias?: string  } 
  | { name: 'emailAddress_not_ends_with', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'gender_not', alias?: string  } 
  | { name: 'gender_in', alias?: string  } 
  | { name: 'gender_not_in', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'ahpraNumber', alias?: string  } 
  | { name: 'ahpraNumber_not', alias?: string  } 
  | { name: 'ahpraNumber_in', alias?: string  } 
  | { name: 'ahpraNumber_not_in', alias?: string  } 
  | { name: 'ahpraNumber_lt', alias?: string  } 
  | { name: 'ahpraNumber_lte', alias?: string  } 
  | { name: 'ahpraNumber_gt', alias?: string  } 
  | { name: 'ahpraNumber_gte', alias?: string  } 
  | { name: 'ahpraNumber_contains', alias?: string  } 
  | { name: 'ahpraNumber_not_contains', alias?: string  } 
  | { name: 'ahpraNumber_starts_with', alias?: string  } 
  | { name: 'ahpraNumber_not_starts_with', alias?: string  } 
  | { name: 'ahpraNumber_ends_with', alias?: string  } 
  | { name: 'ahpraNumber_not_ends_with', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ImmunisationScheduleWhereUniqueInput {
  id?: string | null
}
export type ImmunisationScheduleWhereUniqueInputInputObject =
  | Extract<keyof ImmunisationScheduleWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ImmunisationScheduleWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  ageNumber?: number | null
  ageNumber_not?: number | null
  ageNumber_in?: number[]
  ageNumber_not_in?: number[]
  ageNumber_lt?: number | null
  ageNumber_lte?: number | null
  ageNumber_gt?: number | null
  ageNumber_gte?: number | null
  agePeriod?: prisma.PeriodUnit | null
  agePeriod_not?: prisma.PeriodUnit | null
  agePeriod_in?: prisma.PeriodUnit[]
  agePeriod_not_in?: prisma.PeriodUnit[]
  disease?: DiseaseWhereInput | null
  vaccineBrand?: VaccineBrandWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ImmunisationScheduleWhereInput[]
  OR?: ImmunisationScheduleWhereInput[]
  NOT?: ImmunisationScheduleWhereInput[]
}
export type ImmunisationScheduleWhereInputInputObject =
  | Extract<keyof ImmunisationScheduleWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'ageNumber', alias?: string  } 
  | { name: 'ageNumber_not', alias?: string  } 
  | { name: 'ageNumber_in', alias?: string  } 
  | { name: 'ageNumber_not_in', alias?: string  } 
  | { name: 'ageNumber_lt', alias?: string  } 
  | { name: 'ageNumber_lte', alias?: string  } 
  | { name: 'ageNumber_gt', alias?: string  } 
  | { name: 'ageNumber_gte', alias?: string  } 
  | { name: 'agePeriod', alias?: string  } 
  | { name: 'agePeriod_not', alias?: string  } 
  | { name: 'agePeriod_in', alias?: string  } 
  | { name: 'agePeriod_not_in', alias?: string  } 
  | { name: 'disease', alias?: string  } 
  | { name: 'vaccineBrand', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DiseaseWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: DiseaseWhereInput[]
  OR?: DiseaseWhereInput[]
  NOT?: DiseaseWhereInput[]
}
export type DiseaseWhereInputInputObject =
  | Extract<keyof DiseaseWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VaccineBrandWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: VaccineBrandWhereInput[]
  OR?: VaccineBrandWhereInput[]
  NOT?: VaccineBrandWhereInput[]
}
export type VaccineBrandWhereInputInputObject =
  | Extract<keyof VaccineBrandWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VaccineBrandWhereUniqueInput {
  id?: string | null
}
export type VaccineBrandWhereUniqueInputInputObject =
  | Extract<keyof VaccineBrandWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface DiseaseWhereUniqueInput {
  id?: string | null
}
export type DiseaseWhereUniqueInputInputObject =
  | Extract<keyof DiseaseWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface HILogWhereUniqueInput {
  id?: string | null
}
export type HILogWhereUniqueInputInputObject =
  | Extract<keyof HILogWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface HILogWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  hpio?: string | null
  hpio_not?: string | null
  hpio_in?: string[]
  hpio_not_in?: string[]
  hpio_lt?: string | null
  hpio_lte?: string | null
  hpio_gt?: string | null
  hpio_gte?: string | null
  hpio_contains?: string | null
  hpio_not_contains?: string | null
  hpio_starts_with?: string | null
  hpio_not_starts_with?: string | null
  hpio_ends_with?: string | null
  hpio_not_ends_with?: string | null
  hpii?: string | null
  hpii_not?: string | null
  hpii_in?: string[]
  hpii_not_in?: string[]
  hpii_lt?: string | null
  hpii_lte?: string | null
  hpii_gt?: string | null
  hpii_gte?: string | null
  hpii_contains?: string | null
  hpii_not_contains?: string | null
  hpii_starts_with?: string | null
  hpii_not_starts_with?: string | null
  hpii_ends_with?: string | null
  hpii_not_ends_with?: string | null
  ihi?: string | null
  ihi_not?: string | null
  ihi_in?: string[]
  ihi_not_in?: string[]
  ihi_lt?: string | null
  ihi_lte?: string | null
  ihi_gt?: string | null
  ihi_gte?: string | null
  ihi_contains?: string | null
  ihi_not_contains?: string | null
  ihi_starts_with?: string | null
  ihi_not_starts_with?: string | null
  ihi_ends_with?: string | null
  ihi_not_ends_with?: string | null
  timeWaitedForSalus?: number | null
  timeWaitedForSalus_not?: number | null
  timeWaitedForSalus_in?: number[]
  timeWaitedForSalus_not_in?: number[]
  timeWaitedForSalus_lt?: number | null
  timeWaitedForSalus_lte?: number | null
  timeWaitedForSalus_gt?: number | null
  timeWaitedForSalus_gte?: number | null
  csp?: string | null
  csp_not?: string | null
  csp_in?: string[]
  csp_not_in?: string[]
  csp_lt?: string | null
  csp_lte?: string | null
  csp_gt?: string | null
  csp_gte?: string | null
  csp_contains?: string | null
  csp_not_contains?: string | null
  csp_starts_with?: string | null
  csp_not_starts_with?: string | null
  csp_ends_with?: string | null
  csp_not_ends_with?: string | null
  hiWebServiceUsed?: string | null
  hiWebServiceUsed_not?: string | null
  hiWebServiceUsed_in?: string[]
  hiWebServiceUsed_not_in?: string[]
  hiWebServiceUsed_lt?: string | null
  hiWebServiceUsed_lte?: string | null
  hiWebServiceUsed_gt?: string | null
  hiWebServiceUsed_gte?: string | null
  hiWebServiceUsed_contains?: string | null
  hiWebServiceUsed_not_contains?: string | null
  hiWebServiceUsed_starts_with?: string | null
  hiWebServiceUsed_not_starts_with?: string | null
  hiWebServiceUsed_ends_with?: string | null
  hiWebServiceUsed_not_ends_with?: string | null
  hiWebServiceVersion?: string | null
  hiWebServiceVersion_not?: string | null
  hiWebServiceVersion_in?: string[]
  hiWebServiceVersion_not_in?: string[]
  hiWebServiceVersion_lt?: string | null
  hiWebServiceVersion_lte?: string | null
  hiWebServiceVersion_gt?: string | null
  hiWebServiceVersion_gte?: string | null
  hiWebServiceVersion_contains?: string | null
  hiWebServiceVersion_not_contains?: string | null
  hiWebServiceVersion_starts_with?: string | null
  hiWebServiceVersion_not_starts_with?: string | null
  hiWebServiceVersion_ends_with?: string | null
  hiWebServiceVersion_not_ends_with?: string | null
  hiNumberStatus?: prisma.HINumberStatus | null
  hiNumberStatus_not?: prisma.HINumberStatus | null
  hiNumberStatus_in?: prisma.HINumberStatus[]
  hiNumberStatus_not_in?: prisma.HINumberStatus[]
  recordStatus?: string | null
  recordStatus_not?: string | null
  recordStatus_in?: string[]
  recordStatus_not_in?: string[]
  recordStatus_lt?: string | null
  recordStatus_lte?: string | null
  recordStatus_gt?: string | null
  recordStatus_gte?: string | null
  recordStatus_contains?: string | null
  recordStatus_not_contains?: string | null
  recordStatus_starts_with?: string | null
  recordStatus_not_starts_with?: string | null
  recordStatus_ends_with?: string | null
  recordStatus_not_ends_with?: string | null
  salusResponse?: prisma.SalusResponse | null
  salusResponse_not?: prisma.SalusResponse | null
  salusResponse_in?: prisma.SalusResponse[]
  salusResponse_not_in?: prisma.SalusResponse[]
  failureMessage?: string | null
  failureMessage_not?: string | null
  failureMessage_in?: string[]
  failureMessage_not_in?: string[]
  failureMessage_lt?: string | null
  failureMessage_lte?: string | null
  failureMessage_gt?: string | null
  failureMessage_gte?: string | null
  failureMessage_contains?: string | null
  failureMessage_not_contains?: string | null
  failureMessage_starts_with?: string | null
  failureMessage_not_starts_with?: string | null
  failureMessage_ends_with?: string | null
  failureMessage_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: HILogWhereInput[]
  OR?: HILogWhereInput[]
  NOT?: HILogWhereInput[]
}
export type HILogWhereInputInputObject =
  | Extract<keyof HILogWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'hpio', alias?: string  } 
  | { name: 'hpio_not', alias?: string  } 
  | { name: 'hpio_in', alias?: string  } 
  | { name: 'hpio_not_in', alias?: string  } 
  | { name: 'hpio_lt', alias?: string  } 
  | { name: 'hpio_lte', alias?: string  } 
  | { name: 'hpio_gt', alias?: string  } 
  | { name: 'hpio_gte', alias?: string  } 
  | { name: 'hpio_contains', alias?: string  } 
  | { name: 'hpio_not_contains', alias?: string  } 
  | { name: 'hpio_starts_with', alias?: string  } 
  | { name: 'hpio_not_starts_with', alias?: string  } 
  | { name: 'hpio_ends_with', alias?: string  } 
  | { name: 'hpio_not_ends_with', alias?: string  } 
  | { name: 'hpii', alias?: string  } 
  | { name: 'hpii_not', alias?: string  } 
  | { name: 'hpii_in', alias?: string  } 
  | { name: 'hpii_not_in', alias?: string  } 
  | { name: 'hpii_lt', alias?: string  } 
  | { name: 'hpii_lte', alias?: string  } 
  | { name: 'hpii_gt', alias?: string  } 
  | { name: 'hpii_gte', alias?: string  } 
  | { name: 'hpii_contains', alias?: string  } 
  | { name: 'hpii_not_contains', alias?: string  } 
  | { name: 'hpii_starts_with', alias?: string  } 
  | { name: 'hpii_not_starts_with', alias?: string  } 
  | { name: 'hpii_ends_with', alias?: string  } 
  | { name: 'hpii_not_ends_with', alias?: string  } 
  | { name: 'ihi', alias?: string  } 
  | { name: 'ihi_not', alias?: string  } 
  | { name: 'ihi_in', alias?: string  } 
  | { name: 'ihi_not_in', alias?: string  } 
  | { name: 'ihi_lt', alias?: string  } 
  | { name: 'ihi_lte', alias?: string  } 
  | { name: 'ihi_gt', alias?: string  } 
  | { name: 'ihi_gte', alias?: string  } 
  | { name: 'ihi_contains', alias?: string  } 
  | { name: 'ihi_not_contains', alias?: string  } 
  | { name: 'ihi_starts_with', alias?: string  } 
  | { name: 'ihi_not_starts_with', alias?: string  } 
  | { name: 'ihi_ends_with', alias?: string  } 
  | { name: 'ihi_not_ends_with', alias?: string  } 
  | { name: 'timeWaitedForSalus', alias?: string  } 
  | { name: 'timeWaitedForSalus_not', alias?: string  } 
  | { name: 'timeWaitedForSalus_in', alias?: string  } 
  | { name: 'timeWaitedForSalus_not_in', alias?: string  } 
  | { name: 'timeWaitedForSalus_lt', alias?: string  } 
  | { name: 'timeWaitedForSalus_lte', alias?: string  } 
  | { name: 'timeWaitedForSalus_gt', alias?: string  } 
  | { name: 'timeWaitedForSalus_gte', alias?: string  } 
  | { name: 'csp', alias?: string  } 
  | { name: 'csp_not', alias?: string  } 
  | { name: 'csp_in', alias?: string  } 
  | { name: 'csp_not_in', alias?: string  } 
  | { name: 'csp_lt', alias?: string  } 
  | { name: 'csp_lte', alias?: string  } 
  | { name: 'csp_gt', alias?: string  } 
  | { name: 'csp_gte', alias?: string  } 
  | { name: 'csp_contains', alias?: string  } 
  | { name: 'csp_not_contains', alias?: string  } 
  | { name: 'csp_starts_with', alias?: string  } 
  | { name: 'csp_not_starts_with', alias?: string  } 
  | { name: 'csp_ends_with', alias?: string  } 
  | { name: 'csp_not_ends_with', alias?: string  } 
  | { name: 'hiWebServiceUsed', alias?: string  } 
  | { name: 'hiWebServiceUsed_not', alias?: string  } 
  | { name: 'hiWebServiceUsed_in', alias?: string  } 
  | { name: 'hiWebServiceUsed_not_in', alias?: string  } 
  | { name: 'hiWebServiceUsed_lt', alias?: string  } 
  | { name: 'hiWebServiceUsed_lte', alias?: string  } 
  | { name: 'hiWebServiceUsed_gt', alias?: string  } 
  | { name: 'hiWebServiceUsed_gte', alias?: string  } 
  | { name: 'hiWebServiceUsed_contains', alias?: string  } 
  | { name: 'hiWebServiceUsed_not_contains', alias?: string  } 
  | { name: 'hiWebServiceUsed_starts_with', alias?: string  } 
  | { name: 'hiWebServiceUsed_not_starts_with', alias?: string  } 
  | { name: 'hiWebServiceUsed_ends_with', alias?: string  } 
  | { name: 'hiWebServiceUsed_not_ends_with', alias?: string  } 
  | { name: 'hiWebServiceVersion', alias?: string  } 
  | { name: 'hiWebServiceVersion_not', alias?: string  } 
  | { name: 'hiWebServiceVersion_in', alias?: string  } 
  | { name: 'hiWebServiceVersion_not_in', alias?: string  } 
  | { name: 'hiWebServiceVersion_lt', alias?: string  } 
  | { name: 'hiWebServiceVersion_lte', alias?: string  } 
  | { name: 'hiWebServiceVersion_gt', alias?: string  } 
  | { name: 'hiWebServiceVersion_gte', alias?: string  } 
  | { name: 'hiWebServiceVersion_contains', alias?: string  } 
  | { name: 'hiWebServiceVersion_not_contains', alias?: string  } 
  | { name: 'hiWebServiceVersion_starts_with', alias?: string  } 
  | { name: 'hiWebServiceVersion_not_starts_with', alias?: string  } 
  | { name: 'hiWebServiceVersion_ends_with', alias?: string  } 
  | { name: 'hiWebServiceVersion_not_ends_with', alias?: string  } 
  | { name: 'hiNumberStatus', alias?: string  } 
  | { name: 'hiNumberStatus_not', alias?: string  } 
  | { name: 'hiNumberStatus_in', alias?: string  } 
  | { name: 'hiNumberStatus_not_in', alias?: string  } 
  | { name: 'recordStatus', alias?: string  } 
  | { name: 'recordStatus_not', alias?: string  } 
  | { name: 'recordStatus_in', alias?: string  } 
  | { name: 'recordStatus_not_in', alias?: string  } 
  | { name: 'recordStatus_lt', alias?: string  } 
  | { name: 'recordStatus_lte', alias?: string  } 
  | { name: 'recordStatus_gt', alias?: string  } 
  | { name: 'recordStatus_gte', alias?: string  } 
  | { name: 'recordStatus_contains', alias?: string  } 
  | { name: 'recordStatus_not_contains', alias?: string  } 
  | { name: 'recordStatus_starts_with', alias?: string  } 
  | { name: 'recordStatus_not_starts_with', alias?: string  } 
  | { name: 'recordStatus_ends_with', alias?: string  } 
  | { name: 'recordStatus_not_ends_with', alias?: string  } 
  | { name: 'salusResponse', alias?: string  } 
  | { name: 'salusResponse_not', alias?: string  } 
  | { name: 'salusResponse_in', alias?: string  } 
  | { name: 'salusResponse_not_in', alias?: string  } 
  | { name: 'failureMessage', alias?: string  } 
  | { name: 'failureMessage_not', alias?: string  } 
  | { name: 'failureMessage_in', alias?: string  } 
  | { name: 'failureMessage_not_in', alias?: string  } 
  | { name: 'failureMessage_lt', alias?: string  } 
  | { name: 'failureMessage_lte', alias?: string  } 
  | { name: 'failureMessage_gt', alias?: string  } 
  | { name: 'failureMessage_gte', alias?: string  } 
  | { name: 'failureMessage_contains', alias?: string  } 
  | { name: 'failureMessage_not_contains', alias?: string  } 
  | { name: 'failureMessage_starts_with', alias?: string  } 
  | { name: 'failureMessage_not_starts_with', alias?: string  } 
  | { name: 'failureMessage_ends_with', alias?: string  } 
  | { name: 'failureMessage_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PbsOrganisationWhereUniqueInput {
  id?: string | null
}
export type PbsOrganisationWhereUniqueInputInputObject =
  | Extract<keyof PbsOrganisationWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PbsOrganisationWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  street?: string | null
  street_not?: string | null
  street_in?: string[]
  street_not_in?: string[]
  street_lt?: string | null
  street_lte?: string | null
  street_gt?: string | null
  street_gte?: string | null
  street_contains?: string | null
  street_not_contains?: string | null
  street_starts_with?: string | null
  street_not_starts_with?: string | null
  street_ends_with?: string | null
  street_not_ends_with?: string | null
  city?: string | null
  city_not?: string | null
  city_in?: string[]
  city_not_in?: string[]
  city_lt?: string | null
  city_lte?: string | null
  city_gt?: string | null
  city_gte?: string | null
  city_contains?: string | null
  city_not_contains?: string | null
  city_starts_with?: string | null
  city_not_starts_with?: string | null
  city_ends_with?: string | null
  city_not_ends_with?: string | null
  stateAddress?: string | null
  stateAddress_not?: string | null
  stateAddress_in?: string[]
  stateAddress_not_in?: string[]
  stateAddress_lt?: string | null
  stateAddress_lte?: string | null
  stateAddress_gt?: string | null
  stateAddress_gte?: string | null
  stateAddress_contains?: string | null
  stateAddress_not_contains?: string | null
  stateAddress_starts_with?: string | null
  stateAddress_not_starts_with?: string | null
  stateAddress_ends_with?: string | null
  stateAddress_not_ends_with?: string | null
  postcode?: string | null
  postcode_not?: string | null
  postcode_in?: string[]
  postcode_not_in?: string[]
  postcode_lt?: string | null
  postcode_lte?: string | null
  postcode_gt?: string | null
  postcode_gte?: string | null
  postcode_contains?: string | null
  postcode_not_contains?: string | null
  postcode_starts_with?: string | null
  postcode_not_starts_with?: string | null
  postcode_ends_with?: string | null
  postcode_not_ends_with?: string | null
  phone?: string | null
  phone_not?: string | null
  phone_in?: string[]
  phone_not_in?: string[]
  phone_lt?: string | null
  phone_lte?: string | null
  phone_gt?: string | null
  phone_gte?: string | null
  phone_contains?: string | null
  phone_not_contains?: string | null
  phone_starts_with?: string | null
  phone_not_starts_with?: string | null
  phone_ends_with?: string | null
  phone_not_ends_with?: string | null
  effectiveFrom?: string | null
  effectiveFrom_not?: string | null
  effectiveFrom_in?: string[]
  effectiveFrom_not_in?: string[]
  effectiveFrom_lt?: string | null
  effectiveFrom_lte?: string | null
  effectiveFrom_gt?: string | null
  effectiveFrom_gte?: string | null
  effectiveTo?: string | null
  effectiveTo_not?: string | null
  effectiveTo_in?: string[]
  effectiveTo_not_in?: string[]
  effectiveTo_lt?: string | null
  effectiveTo_lte?: string | null
  effectiveTo_gt?: string | null
  effectiveTo_gte?: string | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: PbsOrganisationWhereInput[]
  OR?: PbsOrganisationWhereInput[]
  NOT?: PbsOrganisationWhereInput[]
}
export type PbsOrganisationWhereInputInputObject =
  | Extract<keyof PbsOrganisationWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'street_not', alias?: string  } 
  | { name: 'street_in', alias?: string  } 
  | { name: 'street_not_in', alias?: string  } 
  | { name: 'street_lt', alias?: string  } 
  | { name: 'street_lte', alias?: string  } 
  | { name: 'street_gt', alias?: string  } 
  | { name: 'street_gte', alias?: string  } 
  | { name: 'street_contains', alias?: string  } 
  | { name: 'street_not_contains', alias?: string  } 
  | { name: 'street_starts_with', alias?: string  } 
  | { name: 'street_not_starts_with', alias?: string  } 
  | { name: 'street_ends_with', alias?: string  } 
  | { name: 'street_not_ends_with', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'city_not', alias?: string  } 
  | { name: 'city_in', alias?: string  } 
  | { name: 'city_not_in', alias?: string  } 
  | { name: 'city_lt', alias?: string  } 
  | { name: 'city_lte', alias?: string  } 
  | { name: 'city_gt', alias?: string  } 
  | { name: 'city_gte', alias?: string  } 
  | { name: 'city_contains', alias?: string  } 
  | { name: 'city_not_contains', alias?: string  } 
  | { name: 'city_starts_with', alias?: string  } 
  | { name: 'city_not_starts_with', alias?: string  } 
  | { name: 'city_ends_with', alias?: string  } 
  | { name: 'city_not_ends_with', alias?: string  } 
  | { name: 'stateAddress', alias?: string  } 
  | { name: 'stateAddress_not', alias?: string  } 
  | { name: 'stateAddress_in', alias?: string  } 
  | { name: 'stateAddress_not_in', alias?: string  } 
  | { name: 'stateAddress_lt', alias?: string  } 
  | { name: 'stateAddress_lte', alias?: string  } 
  | { name: 'stateAddress_gt', alias?: string  } 
  | { name: 'stateAddress_gte', alias?: string  } 
  | { name: 'stateAddress_contains', alias?: string  } 
  | { name: 'stateAddress_not_contains', alias?: string  } 
  | { name: 'stateAddress_starts_with', alias?: string  } 
  | { name: 'stateAddress_not_starts_with', alias?: string  } 
  | { name: 'stateAddress_ends_with', alias?: string  } 
  | { name: 'stateAddress_not_ends_with', alias?: string  } 
  | { name: 'postcode', alias?: string  } 
  | { name: 'postcode_not', alias?: string  } 
  | { name: 'postcode_in', alias?: string  } 
  | { name: 'postcode_not_in', alias?: string  } 
  | { name: 'postcode_lt', alias?: string  } 
  | { name: 'postcode_lte', alias?: string  } 
  | { name: 'postcode_gt', alias?: string  } 
  | { name: 'postcode_gte', alias?: string  } 
  | { name: 'postcode_contains', alias?: string  } 
  | { name: 'postcode_not_contains', alias?: string  } 
  | { name: 'postcode_starts_with', alias?: string  } 
  | { name: 'postcode_not_starts_with', alias?: string  } 
  | { name: 'postcode_ends_with', alias?: string  } 
  | { name: 'postcode_not_ends_with', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'phone_not', alias?: string  } 
  | { name: 'phone_in', alias?: string  } 
  | { name: 'phone_not_in', alias?: string  } 
  | { name: 'phone_lt', alias?: string  } 
  | { name: 'phone_lte', alias?: string  } 
  | { name: 'phone_gt', alias?: string  } 
  | { name: 'phone_gte', alias?: string  } 
  | { name: 'phone_contains', alias?: string  } 
  | { name: 'phone_not_contains', alias?: string  } 
  | { name: 'phone_starts_with', alias?: string  } 
  | { name: 'phone_not_starts_with', alias?: string  } 
  | { name: 'phone_ends_with', alias?: string  } 
  | { name: 'phone_not_ends_with', alias?: string  } 
  | { name: 'effectiveFrom', alias?: string  } 
  | { name: 'effectiveFrom_not', alias?: string  } 
  | { name: 'effectiveFrom_in', alias?: string  } 
  | { name: 'effectiveFrom_not_in', alias?: string  } 
  | { name: 'effectiveFrom_lt', alias?: string  } 
  | { name: 'effectiveFrom_lte', alias?: string  } 
  | { name: 'effectiveFrom_gt', alias?: string  } 
  | { name: 'effectiveFrom_gte', alias?: string  } 
  | { name: 'effectiveTo', alias?: string  } 
  | { name: 'effectiveTo_not', alias?: string  } 
  | { name: 'effectiveTo_in', alias?: string  } 
  | { name: 'effectiveTo_not_in', alias?: string  } 
  | { name: 'effectiveTo_lt', alias?: string  } 
  | { name: 'effectiveTo_lte', alias?: string  } 
  | { name: 'effectiveTo_gt', alias?: string  } 
  | { name: 'effectiveTo_gte', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PbsTPPWhereUniqueInput {
  id?: string | null
}
export type PbsTPPWhereUniqueInputInputObject =
  | Extract<keyof PbsTPPWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PbsTPPWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  snomedCode?: string | null
  snomedCode_not?: string | null
  snomedCode_in?: string[]
  snomedCode_not_in?: string[]
  snomedCode_lt?: string | null
  snomedCode_lte?: string | null
  snomedCode_gt?: string | null
  snomedCode_gte?: string | null
  snomedCode_contains?: string | null
  snomedCode_not_contains?: string | null
  snomedCode_starts_with?: string | null
  snomedCode_not_starts_with?: string | null
  snomedCode_ends_with?: string | null
  snomedCode_not_ends_with?: string | null
  clinicalPreferredTerm?: string | null
  clinicalPreferredTerm_not?: string | null
  clinicalPreferredTerm_in?: string[]
  clinicalPreferredTerm_not_in?: string[]
  clinicalPreferredTerm_lt?: string | null
  clinicalPreferredTerm_lte?: string | null
  clinicalPreferredTerm_gt?: string | null
  clinicalPreferredTerm_gte?: string | null
  clinicalPreferredTerm_contains?: string | null
  clinicalPreferredTerm_not_contains?: string | null
  clinicalPreferredTerm_starts_with?: string | null
  clinicalPreferredTerm_not_starts_with?: string | null
  clinicalPreferredTerm_ends_with?: string | null
  clinicalPreferredTerm_not_ends_with?: string | null
  packSize?: number | null
  packSize_not?: number | null
  packSize_in?: number[]
  packSize_not_in?: number[]
  packSize_lt?: number | null
  packSize_lte?: number | null
  packSize_gt?: number | null
  packSize_gte?: number | null
  brandName?: string | null
  brandName_not?: string | null
  brandName_in?: string[]
  brandName_not_in?: string[]
  brandName_lt?: string | null
  brandName_lte?: string | null
  brandName_gt?: string | null
  brandName_gte?: string | null
  brandName_contains?: string | null
  brandName_not_contains?: string | null
  brandName_starts_with?: string | null
  brandName_not_starts_with?: string | null
  brandName_ends_with?: string | null
  brandName_not_ends_with?: string | null
  exManufacturerPrice?: number | null
  exManufacturerPrice_not?: number | null
  exManufacturerPrice_in?: number[]
  exManufacturerPrice_not_in?: number[]
  exManufacturerPrice_lt?: number | null
  exManufacturerPrice_lte?: number | null
  exManufacturerPrice_gt?: number | null
  exManufacturerPrice_gte?: number | null
  pricingModel?: prisma.PBSPricingModel | null
  pricingModel_not?: prisma.PBSPricingModel | null
  pricingModel_in?: prisma.PBSPricingModel[]
  pricingModel_not_in?: prisma.PBSPricingModel[]
  mpp_id?: string | null
  mpp_id_not?: string | null
  mpp_id_in?: string[]
  mpp_id_not_in?: string[]
  mpp_id_lt?: string | null
  mpp_id_lte?: string | null
  mpp_id_gt?: string | null
  mpp_id_gte?: string | null
  mpp_id_contains?: string | null
  mpp_id_not_contains?: string | null
  mpp_id_starts_with?: string | null
  mpp_id_not_starts_with?: string | null
  mpp_id_ends_with?: string | null
  mpp_id_not_ends_with?: string | null
  organisation_id?: PbsOrganisationWhereInput | null
  effectiveFrom?: string | null
  effectiveFrom_not?: string | null
  effectiveFrom_in?: string[]
  effectiveFrom_not_in?: string[]
  effectiveFrom_lt?: string | null
  effectiveFrom_lte?: string | null
  effectiveFrom_gt?: string | null
  effectiveFrom_gte?: string | null
  effectiveTo?: string | null
  effectiveTo_not?: string | null
  effectiveTo_in?: string[]
  effectiveTo_not_in?: string[]
  effectiveTo_lt?: string | null
  effectiveTo_lte?: string | null
  effectiveTo_gt?: string | null
  effectiveTo_gte?: string | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: PbsTPPWhereInput[]
  OR?: PbsTPPWhereInput[]
  NOT?: PbsTPPWhereInput[]
}
export type PbsTPPWhereInputInputObject =
  | Extract<keyof PbsTPPWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'snomedCode', alias?: string  } 
  | { name: 'snomedCode_not', alias?: string  } 
  | { name: 'snomedCode_in', alias?: string  } 
  | { name: 'snomedCode_not_in', alias?: string  } 
  | { name: 'snomedCode_lt', alias?: string  } 
  | { name: 'snomedCode_lte', alias?: string  } 
  | { name: 'snomedCode_gt', alias?: string  } 
  | { name: 'snomedCode_gte', alias?: string  } 
  | { name: 'snomedCode_contains', alias?: string  } 
  | { name: 'snomedCode_not_contains', alias?: string  } 
  | { name: 'snomedCode_starts_with', alias?: string  } 
  | { name: 'snomedCode_not_starts_with', alias?: string  } 
  | { name: 'snomedCode_ends_with', alias?: string  } 
  | { name: 'snomedCode_not_ends_with', alias?: string  } 
  | { name: 'clinicalPreferredTerm', alias?: string  } 
  | { name: 'clinicalPreferredTerm_not', alias?: string  } 
  | { name: 'clinicalPreferredTerm_in', alias?: string  } 
  | { name: 'clinicalPreferredTerm_not_in', alias?: string  } 
  | { name: 'clinicalPreferredTerm_lt', alias?: string  } 
  | { name: 'clinicalPreferredTerm_lte', alias?: string  } 
  | { name: 'clinicalPreferredTerm_gt', alias?: string  } 
  | { name: 'clinicalPreferredTerm_gte', alias?: string  } 
  | { name: 'clinicalPreferredTerm_contains', alias?: string  } 
  | { name: 'clinicalPreferredTerm_not_contains', alias?: string  } 
  | { name: 'clinicalPreferredTerm_starts_with', alias?: string  } 
  | { name: 'clinicalPreferredTerm_not_starts_with', alias?: string  } 
  | { name: 'clinicalPreferredTerm_ends_with', alias?: string  } 
  | { name: 'clinicalPreferredTerm_not_ends_with', alias?: string  } 
  | { name: 'packSize', alias?: string  } 
  | { name: 'packSize_not', alias?: string  } 
  | { name: 'packSize_in', alias?: string  } 
  | { name: 'packSize_not_in', alias?: string  } 
  | { name: 'packSize_lt', alias?: string  } 
  | { name: 'packSize_lte', alias?: string  } 
  | { name: 'packSize_gt', alias?: string  } 
  | { name: 'packSize_gte', alias?: string  } 
  | { name: 'brandName', alias?: string  } 
  | { name: 'brandName_not', alias?: string  } 
  | { name: 'brandName_in', alias?: string  } 
  | { name: 'brandName_not_in', alias?: string  } 
  | { name: 'brandName_lt', alias?: string  } 
  | { name: 'brandName_lte', alias?: string  } 
  | { name: 'brandName_gt', alias?: string  } 
  | { name: 'brandName_gte', alias?: string  } 
  | { name: 'brandName_contains', alias?: string  } 
  | { name: 'brandName_not_contains', alias?: string  } 
  | { name: 'brandName_starts_with', alias?: string  } 
  | { name: 'brandName_not_starts_with', alias?: string  } 
  | { name: 'brandName_ends_with', alias?: string  } 
  | { name: 'brandName_not_ends_with', alias?: string  } 
  | { name: 'exManufacturerPrice', alias?: string  } 
  | { name: 'exManufacturerPrice_not', alias?: string  } 
  | { name: 'exManufacturerPrice_in', alias?: string  } 
  | { name: 'exManufacturerPrice_not_in', alias?: string  } 
  | { name: 'exManufacturerPrice_lt', alias?: string  } 
  | { name: 'exManufacturerPrice_lte', alias?: string  } 
  | { name: 'exManufacturerPrice_gt', alias?: string  } 
  | { name: 'exManufacturerPrice_gte', alias?: string  } 
  | { name: 'pricingModel', alias?: string  } 
  | { name: 'pricingModel_not', alias?: string  } 
  | { name: 'pricingModel_in', alias?: string  } 
  | { name: 'pricingModel_not_in', alias?: string  } 
  | { name: 'mpp_id', alias?: string  } 
  | { name: 'mpp_id_not', alias?: string  } 
  | { name: 'mpp_id_in', alias?: string  } 
  | { name: 'mpp_id_not_in', alias?: string  } 
  | { name: 'mpp_id_lt', alias?: string  } 
  | { name: 'mpp_id_lte', alias?: string  } 
  | { name: 'mpp_id_gt', alias?: string  } 
  | { name: 'mpp_id_gte', alias?: string  } 
  | { name: 'mpp_id_contains', alias?: string  } 
  | { name: 'mpp_id_not_contains', alias?: string  } 
  | { name: 'mpp_id_starts_with', alias?: string  } 
  | { name: 'mpp_id_not_starts_with', alias?: string  } 
  | { name: 'mpp_id_ends_with', alias?: string  } 
  | { name: 'mpp_id_not_ends_with', alias?: string  } 
  | { name: 'organisation_id', alias?: string  } 
  | { name: 'effectiveFrom', alias?: string  } 
  | { name: 'effectiveFrom_not', alias?: string  } 
  | { name: 'effectiveFrom_in', alias?: string  } 
  | { name: 'effectiveFrom_not_in', alias?: string  } 
  | { name: 'effectiveFrom_lt', alias?: string  } 
  | { name: 'effectiveFrom_lte', alias?: string  } 
  | { name: 'effectiveFrom_gt', alias?: string  } 
  | { name: 'effectiveFrom_gte', alias?: string  } 
  | { name: 'effectiveTo', alias?: string  } 
  | { name: 'effectiveTo_not', alias?: string  } 
  | { name: 'effectiveTo_in', alias?: string  } 
  | { name: 'effectiveTo_not_in', alias?: string  } 
  | { name: 'effectiveTo_lt', alias?: string  } 
  | { name: 'effectiveTo_lte', alias?: string  } 
  | { name: 'effectiveTo_gt', alias?: string  } 
  | { name: 'effectiveTo_gte', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MeansTestedFeeWhereUniqueInput {
  id?: string | null
}
export type MeansTestedFeeWhereUniqueInputInputObject =
  | Extract<keyof MeansTestedFeeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MeansTestLimitsWhereUniqueInput {
  id?: string | null
}
export type MeansTestLimitsWhereUniqueInputInputObject =
  | Extract<keyof MeansTestLimitsWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MeansTestLimitsWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  annual?: number | null
  annual_not?: number | null
  annual_in?: number[]
  annual_not_in?: number[]
  annual_lt?: number | null
  annual_lte?: number | null
  annual_gt?: number | null
  annual_gte?: number | null
  lifetime?: number | null
  lifetime_not?: number | null
  lifetime_in?: number[]
  lifetime_not_in?: number[]
  lifetime_lt?: number | null
  lifetime_lte?: number | null
  lifetime_gt?: number | null
  lifetime_gte?: number | null
  dateFrom?: string | null
  dateFrom_not?: string | null
  dateFrom_in?: string[]
  dateFrom_not_in?: string[]
  dateFrom_lt?: string | null
  dateFrom_lte?: string | null
  dateFrom_gt?: string | null
  dateFrom_gte?: string | null
  dateTo?: string | null
  dateTo_not?: string | null
  dateTo_in?: string[]
  dateTo_not_in?: string[]
  dateTo_lt?: string | null
  dateTo_lte?: string | null
  dateTo_gt?: string | null
  dateTo_gte?: string | null
  AND?: MeansTestLimitsWhereInput[]
  OR?: MeansTestLimitsWhereInput[]
  NOT?: MeansTestLimitsWhereInput[]
}
export type MeansTestLimitsWhereInputInputObject =
  | Extract<keyof MeansTestLimitsWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'annual', alias?: string  } 
  | { name: 'annual_not', alias?: string  } 
  | { name: 'annual_in', alias?: string  } 
  | { name: 'annual_not_in', alias?: string  } 
  | { name: 'annual_lt', alias?: string  } 
  | { name: 'annual_lte', alias?: string  } 
  | { name: 'annual_gt', alias?: string  } 
  | { name: 'annual_gte', alias?: string  } 
  | { name: 'lifetime', alias?: string  } 
  | { name: 'lifetime_not', alias?: string  } 
  | { name: 'lifetime_in', alias?: string  } 
  | { name: 'lifetime_not_in', alias?: string  } 
  | { name: 'lifetime_lt', alias?: string  } 
  | { name: 'lifetime_lte', alias?: string  } 
  | { name: 'lifetime_gt', alias?: string  } 
  | { name: 'lifetime_gte', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateFrom_not', alias?: string  } 
  | { name: 'dateFrom_in', alias?: string  } 
  | { name: 'dateFrom_not_in', alias?: string  } 
  | { name: 'dateFrom_lt', alias?: string  } 
  | { name: 'dateFrom_lte', alias?: string  } 
  | { name: 'dateFrom_gt', alias?: string  } 
  | { name: 'dateFrom_gte', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  | { name: 'dateTo_not', alias?: string  } 
  | { name: 'dateTo_in', alias?: string  } 
  | { name: 'dateTo_not_in', alias?: string  } 
  | { name: 'dateTo_lt', alias?: string  } 
  | { name: 'dateTo_lte', alias?: string  } 
  | { name: 'dateTo_gt', alias?: string  } 
  | { name: 'dateTo_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BasicDailyFeeWhereUniqueInput {
  id?: string | null
}
export type BasicDailyFeeWhereUniqueInputInputObject =
  | Extract<keyof BasicDailyFeeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  contactNumber?: undefined | null
  email?: string | null
  firstName?: string | null
  isActive?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isRoot?: boolean | null
  jobTitle?: string | null
  lastName?: string | null
  password?: string | null
  secondAuthEnabled?: boolean | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isRoot', alias?: string  } 
  | { name: 'jobTitle', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'secondAuthEnabled', alias?: string  } 
  
export interface UserUpdateInput {
  contactNumber?: undefined | null
  email?: string | null
  firstName?: string | null
  isActive?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isRoot?: boolean | null
  jobTitle?: string | null
  lastName?: string | null
  password?: string | null
  secondAuthEnabled?: boolean | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isRoot', alias?: string  } 
  | { name: 'jobTitle', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'secondAuthEnabled', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  contactNumber?: undefined | null
  email?: string | null
  firstName?: string | null
  isActive?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isRoot?: boolean | null
  jobTitle?: string | null
  lastName?: string | null
  password?: string | null
  secondAuthEnabled?: boolean | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isRoot', alias?: string  } 
  | { name: 'jobTitle', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'secondAuthEnabled', alias?: string  } 
  
export interface AddressCreateInput {
  id?: string | null
  street?: string | null
  city?: string | null
  state?: string | null
  country?: string | null
  postCode?: string | null
  latitude?: string | null
  longitude?: string | null
}
export type AddressCreateInputInputObject =
  | Extract<keyof AddressCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'postCode', alias?: string  } 
  | { name: 'latitude', alias?: string  } 
  | { name: 'longitude', alias?: string  } 
  
export interface AddressUpdateInput {
  street?: string | null
  city?: string | null
  state?: string | null
  country?: string | null
  postCode?: string | null
  latitude?: string | null
  longitude?: string | null
}
export type AddressUpdateInputInputObject =
  | Extract<keyof AddressUpdateInput, string>
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'postCode', alias?: string  } 
  | { name: 'latitude', alias?: string  } 
  | { name: 'longitude', alias?: string  } 
  
export interface AddressUpdateManyMutationInput {
  street?: string | null
  city?: string | null
  state?: string | null
  country?: string | null
  postCode?: string | null
  latitude?: string | null
  longitude?: string | null
}
export type AddressUpdateManyMutationInputInputObject =
  | Extract<keyof AddressUpdateManyMutationInput, string>
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'postCode', alias?: string  } 
  | { name: 'latitude', alias?: string  } 
  | { name: 'longitude', alias?: string  } 
  
export interface ContactCreateInput {
  id?: string | null
  name?: string | null
  surname?: string | null
  email?: string | null
  mobileCode?: string | null
  mobileNumber?: string | null
  landlineCode?: string | null
  landlineNumber?: string | null
}
export type ContactCreateInputInputObject =
  | Extract<keyof ContactCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'mobileCode', alias?: string  } 
  | { name: 'mobileNumber', alias?: string  } 
  | { name: 'landlineCode', alias?: string  } 
  | { name: 'landlineNumber', alias?: string  } 
  
export interface ContactUpdateInput {
  name?: string | null
  surname?: string | null
  email?: string | null
  mobileCode?: string | null
  mobileNumber?: string | null
  landlineCode?: string | null
  landlineNumber?: string | null
}
export type ContactUpdateInputInputObject =
  | Extract<keyof ContactUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'mobileCode', alias?: string  } 
  | { name: 'mobileNumber', alias?: string  } 
  | { name: 'landlineCode', alias?: string  } 
  | { name: 'landlineNumber', alias?: string  } 
  
export interface ContactUpdateManyMutationInput {
  name?: string | null
  surname?: string | null
  email?: string | null
  mobileCode?: string | null
  mobileNumber?: string | null
  landlineCode?: string | null
  landlineNumber?: string | null
}
export type ContactUpdateManyMutationInputInputObject =
  | Extract<keyof ContactUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'mobileCode', alias?: string  } 
  | { name: 'mobileNumber', alias?: string  } 
  | { name: 'landlineCode', alias?: string  } 
  | { name: 'landlineNumber', alias?: string  } 
  
export interface CompanyCreateInput {
  id?: string | null
  bankAccount?: undefined | null
  businessType?: prisma.BusinessType | null
  country?: prisma.Country | null
  govNumber?: string | null
  currency?: prisma.Currency
  isArchived?: boolean | null
  isDeleted?: boolean | null
  HPIO?: string | null
  legalName?: string
  logo?: AttachmentCreateOneInput | null
  name?: string
  salesTax?: boolean | null
  timeSheetSettings?: undefined | null
  websiteURL?: string | null
  addresses?: AddressCreateManyInput | null
  contacts?: ContactCreateManyInput | null
  companyMembers?: CompanyMemberCreateManyWithoutCompanyInput | null
  activePlan?: PlanCreateOneWithoutCompanyInput | null
  stripeCustomerId?: string | null
}
export type CompanyCreateInputInputObject =
  | Extract<keyof CompanyCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'bankAccount', alias?: string  } 
  | { name: 'businessType', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'HPIO', alias?: string  } 
  | { name: 'legalName', alias?: string  } 
  | { name: 'logo', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'timeSheetSettings', alias?: string  } 
  | { name: 'websiteURL', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  | { name: 'contacts', alias?: string  } 
  | { name: 'companyMembers', alias?: string  } 
  | { name: 'activePlan', alias?: string  } 
  | { name: 'stripeCustomerId', alias?: string  } 
  
export interface AttachmentCreateOneInput {
  create?: AttachmentCreateInput | null
  connect?: AttachmentWhereUniqueInput | null
}
export type AttachmentCreateOneInputInputObject =
  | Extract<keyof AttachmentCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AttachmentCreateInput {
  id?: string | null
  description?: string | null
  fileName?: string | null
  label?: string | null
  url?: string | null
  s3Bucket?: string | null
  s3Key?: string | null
}
export type AttachmentCreateInputInputObject =
  | Extract<keyof AttachmentCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'fileName', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 's3Bucket', alias?: string  } 
  | { name: 's3Key', alias?: string  } 
  
export interface AddressCreateManyInput {
  create?: AddressCreateInput[]
  connect?: AddressWhereUniqueInput[]
}
export type AddressCreateManyInputInputObject =
  | Extract<keyof AddressCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ContactCreateManyInput {
  create?: ContactCreateInput[]
  connect?: ContactWhereUniqueInput[]
}
export type ContactCreateManyInputInputObject =
  | Extract<keyof ContactCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyMemberCreateManyWithoutCompanyInput {
  create?: CompanyMemberCreateWithoutCompanyInput[]
  connect?: CompanyMemberWhereUniqueInput[]
}
export type CompanyMemberCreateManyWithoutCompanyInputInputObject =
  | Extract<keyof CompanyMemberCreateManyWithoutCompanyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyMemberCreateWithoutCompanyInput {
  id?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  role?: prisma.CompanyMemberRole | null
  status?: prisma.CompanyMemberStatus | null
  user?: UserCreateOneInput | null
}
export type CompanyMemberCreateWithoutCompanyInputInputObject =
  | Extract<keyof CompanyMemberCreateWithoutCompanyInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlanCreateOneWithoutCompanyInput {
  create?: PlanCreateWithoutCompanyInput | null
  connect?: PlanWhereUniqueInput | null
}
export type PlanCreateOneWithoutCompanyInputInputObject =
  | Extract<keyof PlanCreateOneWithoutCompanyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlanCreateWithoutCompanyInput {
  id?: string | null
  isActive?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  price?: number | null
  type?: prisma.PlanType | null
  currency?: prisma.Currency
}
export type PlanCreateWithoutCompanyInputInputObject =
  | Extract<keyof PlanCreateWithoutCompanyInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  
export interface CompanyUpdateInput {
  bankAccount?: undefined | null
  businessType?: prisma.BusinessType | null
  country?: prisma.Country | null
  govNumber?: string | null
  currency?: prisma.Currency | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  HPIO?: string | null
  legalName?: string | null
  logo?: AttachmentUpdateOneInput | null
  name?: string | null
  salesTax?: boolean | null
  timeSheetSettings?: undefined | null
  websiteURL?: string | null
  addresses?: AddressUpdateManyInput | null
  contacts?: ContactUpdateManyInput | null
  companyMembers?: CompanyMemberUpdateManyWithoutCompanyInput | null
  activePlan?: PlanUpdateOneWithoutCompanyInput | null
  stripeCustomerId?: string | null
}
export type CompanyUpdateInputInputObject =
  | Extract<keyof CompanyUpdateInput, string>
  | { name: 'bankAccount', alias?: string  } 
  | { name: 'businessType', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'HPIO', alias?: string  } 
  | { name: 'legalName', alias?: string  } 
  | { name: 'logo', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'timeSheetSettings', alias?: string  } 
  | { name: 'websiteURL', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  | { name: 'contacts', alias?: string  } 
  | { name: 'companyMembers', alias?: string  } 
  | { name: 'activePlan', alias?: string  } 
  | { name: 'stripeCustomerId', alias?: string  } 
  
export interface AttachmentUpdateOneInput {
  create?: AttachmentCreateInput | null
  update?: AttachmentUpdateDataInput | null
  upsert?: AttachmentUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: AttachmentWhereUniqueInput | null
}
export type AttachmentUpdateOneInputInputObject =
  | Extract<keyof AttachmentUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AttachmentUpdateDataInput {
  description?: string | null
  fileName?: string | null
  label?: string | null
  url?: string | null
  s3Bucket?: string | null
  s3Key?: string | null
}
export type AttachmentUpdateDataInputInputObject =
  | Extract<keyof AttachmentUpdateDataInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'fileName', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 's3Bucket', alias?: string  } 
  | { name: 's3Key', alias?: string  } 
  
export interface AttachmentUpsertNestedInput {
  update?: AttachmentUpdateDataInput
  create?: AttachmentCreateInput
}
export type AttachmentUpsertNestedInputInputObject =
  | Extract<keyof AttachmentUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AddressUpdateManyInput {
  create?: AddressCreateInput[]
  update?: AddressUpdateWithWhereUniqueNestedInput[]
  upsert?: AddressUpsertWithWhereUniqueNestedInput[]
  delete?: AddressWhereUniqueInput[]
  connect?: AddressWhereUniqueInput[]
  set?: AddressWhereUniqueInput[]
  disconnect?: AddressWhereUniqueInput[]
  deleteMany?: AddressScalarWhereInput[]
  updateMany?: AddressUpdateManyWithWhereNestedInput[]
}
export type AddressUpdateManyInputInputObject =
  | Extract<keyof AddressUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AddressUpdateWithWhereUniqueNestedInput {
  where?: AddressWhereUniqueInput
  data?: AddressUpdateDataInput
}
export type AddressUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof AddressUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AddressUpdateDataInput {
  street?: string | null
  city?: string | null
  state?: string | null
  country?: string | null
  postCode?: string | null
  latitude?: string | null
  longitude?: string | null
}
export type AddressUpdateDataInputInputObject =
  | Extract<keyof AddressUpdateDataInput, string>
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'postCode', alias?: string  } 
  | { name: 'latitude', alias?: string  } 
  | { name: 'longitude', alias?: string  } 
  
export interface AddressUpsertWithWhereUniqueNestedInput {
  where?: AddressWhereUniqueInput
  update?: AddressUpdateDataInput
  create?: AddressCreateInput
}
export type AddressUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof AddressUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AddressScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  street?: string | null
  street_not?: string | null
  street_in?: string[]
  street_not_in?: string[]
  street_lt?: string | null
  street_lte?: string | null
  street_gt?: string | null
  street_gte?: string | null
  street_contains?: string | null
  street_not_contains?: string | null
  street_starts_with?: string | null
  street_not_starts_with?: string | null
  street_ends_with?: string | null
  street_not_ends_with?: string | null
  city?: string | null
  city_not?: string | null
  city_in?: string[]
  city_not_in?: string[]
  city_lt?: string | null
  city_lte?: string | null
  city_gt?: string | null
  city_gte?: string | null
  city_contains?: string | null
  city_not_contains?: string | null
  city_starts_with?: string | null
  city_not_starts_with?: string | null
  city_ends_with?: string | null
  city_not_ends_with?: string | null
  state?: string | null
  state_not?: string | null
  state_in?: string[]
  state_not_in?: string[]
  state_lt?: string | null
  state_lte?: string | null
  state_gt?: string | null
  state_gte?: string | null
  state_contains?: string | null
  state_not_contains?: string | null
  state_starts_with?: string | null
  state_not_starts_with?: string | null
  state_ends_with?: string | null
  state_not_ends_with?: string | null
  country?: string | null
  country_not?: string | null
  country_in?: string[]
  country_not_in?: string[]
  country_lt?: string | null
  country_lte?: string | null
  country_gt?: string | null
  country_gte?: string | null
  country_contains?: string | null
  country_not_contains?: string | null
  country_starts_with?: string | null
  country_not_starts_with?: string | null
  country_ends_with?: string | null
  country_not_ends_with?: string | null
  postCode?: string | null
  postCode_not?: string | null
  postCode_in?: string[]
  postCode_not_in?: string[]
  postCode_lt?: string | null
  postCode_lte?: string | null
  postCode_gt?: string | null
  postCode_gte?: string | null
  postCode_contains?: string | null
  postCode_not_contains?: string | null
  postCode_starts_with?: string | null
  postCode_not_starts_with?: string | null
  postCode_ends_with?: string | null
  postCode_not_ends_with?: string | null
  latitude?: string | null
  latitude_not?: string | null
  latitude_in?: string[]
  latitude_not_in?: string[]
  latitude_lt?: string | null
  latitude_lte?: string | null
  latitude_gt?: string | null
  latitude_gte?: string | null
  latitude_contains?: string | null
  latitude_not_contains?: string | null
  latitude_starts_with?: string | null
  latitude_not_starts_with?: string | null
  latitude_ends_with?: string | null
  latitude_not_ends_with?: string | null
  longitude?: string | null
  longitude_not?: string | null
  longitude_in?: string[]
  longitude_not_in?: string[]
  longitude_lt?: string | null
  longitude_lte?: string | null
  longitude_gt?: string | null
  longitude_gte?: string | null
  longitude_contains?: string | null
  longitude_not_contains?: string | null
  longitude_starts_with?: string | null
  longitude_not_starts_with?: string | null
  longitude_ends_with?: string | null
  longitude_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: AddressScalarWhereInput[]
  OR?: AddressScalarWhereInput[]
  NOT?: AddressScalarWhereInput[]
}
export type AddressScalarWhereInputInputObject =
  | Extract<keyof AddressScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'street_not', alias?: string  } 
  | { name: 'street_in', alias?: string  } 
  | { name: 'street_not_in', alias?: string  } 
  | { name: 'street_lt', alias?: string  } 
  | { name: 'street_lte', alias?: string  } 
  | { name: 'street_gt', alias?: string  } 
  | { name: 'street_gte', alias?: string  } 
  | { name: 'street_contains', alias?: string  } 
  | { name: 'street_not_contains', alias?: string  } 
  | { name: 'street_starts_with', alias?: string  } 
  | { name: 'street_not_starts_with', alias?: string  } 
  | { name: 'street_ends_with', alias?: string  } 
  | { name: 'street_not_ends_with', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'city_not', alias?: string  } 
  | { name: 'city_in', alias?: string  } 
  | { name: 'city_not_in', alias?: string  } 
  | { name: 'city_lt', alias?: string  } 
  | { name: 'city_lte', alias?: string  } 
  | { name: 'city_gt', alias?: string  } 
  | { name: 'city_gte', alias?: string  } 
  | { name: 'city_contains', alias?: string  } 
  | { name: 'city_not_contains', alias?: string  } 
  | { name: 'city_starts_with', alias?: string  } 
  | { name: 'city_not_starts_with', alias?: string  } 
  | { name: 'city_ends_with', alias?: string  } 
  | { name: 'city_not_ends_with', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'state_not', alias?: string  } 
  | { name: 'state_in', alias?: string  } 
  | { name: 'state_not_in', alias?: string  } 
  | { name: 'state_lt', alias?: string  } 
  | { name: 'state_lte', alias?: string  } 
  | { name: 'state_gt', alias?: string  } 
  | { name: 'state_gte', alias?: string  } 
  | { name: 'state_contains', alias?: string  } 
  | { name: 'state_not_contains', alias?: string  } 
  | { name: 'state_starts_with', alias?: string  } 
  | { name: 'state_not_starts_with', alias?: string  } 
  | { name: 'state_ends_with', alias?: string  } 
  | { name: 'state_not_ends_with', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'country_not', alias?: string  } 
  | { name: 'country_in', alias?: string  } 
  | { name: 'country_not_in', alias?: string  } 
  | { name: 'country_lt', alias?: string  } 
  | { name: 'country_lte', alias?: string  } 
  | { name: 'country_gt', alias?: string  } 
  | { name: 'country_gte', alias?: string  } 
  | { name: 'country_contains', alias?: string  } 
  | { name: 'country_not_contains', alias?: string  } 
  | { name: 'country_starts_with', alias?: string  } 
  | { name: 'country_not_starts_with', alias?: string  } 
  | { name: 'country_ends_with', alias?: string  } 
  | { name: 'country_not_ends_with', alias?: string  } 
  | { name: 'postCode', alias?: string  } 
  | { name: 'postCode_not', alias?: string  } 
  | { name: 'postCode_in', alias?: string  } 
  | { name: 'postCode_not_in', alias?: string  } 
  | { name: 'postCode_lt', alias?: string  } 
  | { name: 'postCode_lte', alias?: string  } 
  | { name: 'postCode_gt', alias?: string  } 
  | { name: 'postCode_gte', alias?: string  } 
  | { name: 'postCode_contains', alias?: string  } 
  | { name: 'postCode_not_contains', alias?: string  } 
  | { name: 'postCode_starts_with', alias?: string  } 
  | { name: 'postCode_not_starts_with', alias?: string  } 
  | { name: 'postCode_ends_with', alias?: string  } 
  | { name: 'postCode_not_ends_with', alias?: string  } 
  | { name: 'latitude', alias?: string  } 
  | { name: 'latitude_not', alias?: string  } 
  | { name: 'latitude_in', alias?: string  } 
  | { name: 'latitude_not_in', alias?: string  } 
  | { name: 'latitude_lt', alias?: string  } 
  | { name: 'latitude_lte', alias?: string  } 
  | { name: 'latitude_gt', alias?: string  } 
  | { name: 'latitude_gte', alias?: string  } 
  | { name: 'latitude_contains', alias?: string  } 
  | { name: 'latitude_not_contains', alias?: string  } 
  | { name: 'latitude_starts_with', alias?: string  } 
  | { name: 'latitude_not_starts_with', alias?: string  } 
  | { name: 'latitude_ends_with', alias?: string  } 
  | { name: 'latitude_not_ends_with', alias?: string  } 
  | { name: 'longitude', alias?: string  } 
  | { name: 'longitude_not', alias?: string  } 
  | { name: 'longitude_in', alias?: string  } 
  | { name: 'longitude_not_in', alias?: string  } 
  | { name: 'longitude_lt', alias?: string  } 
  | { name: 'longitude_lte', alias?: string  } 
  | { name: 'longitude_gt', alias?: string  } 
  | { name: 'longitude_gte', alias?: string  } 
  | { name: 'longitude_contains', alias?: string  } 
  | { name: 'longitude_not_contains', alias?: string  } 
  | { name: 'longitude_starts_with', alias?: string  } 
  | { name: 'longitude_not_starts_with', alias?: string  } 
  | { name: 'longitude_ends_with', alias?: string  } 
  | { name: 'longitude_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AddressUpdateManyWithWhereNestedInput {
  where?: AddressScalarWhereInput
  data?: AddressUpdateManyDataInput
}
export type AddressUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AddressUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AddressUpdateManyDataInput {
  street?: string | null
  city?: string | null
  state?: string | null
  country?: string | null
  postCode?: string | null
  latitude?: string | null
  longitude?: string | null
}
export type AddressUpdateManyDataInputInputObject =
  | Extract<keyof AddressUpdateManyDataInput, string>
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'state', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'postCode', alias?: string  } 
  | { name: 'latitude', alias?: string  } 
  | { name: 'longitude', alias?: string  } 
  
export interface ContactUpdateManyInput {
  create?: ContactCreateInput[]
  update?: ContactUpdateWithWhereUniqueNestedInput[]
  upsert?: ContactUpsertWithWhereUniqueNestedInput[]
  delete?: ContactWhereUniqueInput[]
  connect?: ContactWhereUniqueInput[]
  set?: ContactWhereUniqueInput[]
  disconnect?: ContactWhereUniqueInput[]
  deleteMany?: ContactScalarWhereInput[]
  updateMany?: ContactUpdateManyWithWhereNestedInput[]
}
export type ContactUpdateManyInputInputObject =
  | Extract<keyof ContactUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ContactUpdateWithWhereUniqueNestedInput {
  where?: ContactWhereUniqueInput
  data?: ContactUpdateDataInput
}
export type ContactUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ContactUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ContactUpdateDataInput {
  name?: string | null
  surname?: string | null
  email?: string | null
  mobileCode?: string | null
  mobileNumber?: string | null
  landlineCode?: string | null
  landlineNumber?: string | null
}
export type ContactUpdateDataInputInputObject =
  | Extract<keyof ContactUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'mobileCode', alias?: string  } 
  | { name: 'mobileNumber', alias?: string  } 
  | { name: 'landlineCode', alias?: string  } 
  | { name: 'landlineNumber', alias?: string  } 
  
export interface ContactUpsertWithWhereUniqueNestedInput {
  where?: ContactWhereUniqueInput
  update?: ContactUpdateDataInput
  create?: ContactCreateInput
}
export type ContactUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ContactUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ContactScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  surname?: string | null
  surname_not?: string | null
  surname_in?: string[]
  surname_not_in?: string[]
  surname_lt?: string | null
  surname_lte?: string | null
  surname_gt?: string | null
  surname_gte?: string | null
  surname_contains?: string | null
  surname_not_contains?: string | null
  surname_starts_with?: string | null
  surname_not_starts_with?: string | null
  surname_ends_with?: string | null
  surname_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  mobileCode?: string | null
  mobileCode_not?: string | null
  mobileCode_in?: string[]
  mobileCode_not_in?: string[]
  mobileCode_lt?: string | null
  mobileCode_lte?: string | null
  mobileCode_gt?: string | null
  mobileCode_gte?: string | null
  mobileCode_contains?: string | null
  mobileCode_not_contains?: string | null
  mobileCode_starts_with?: string | null
  mobileCode_not_starts_with?: string | null
  mobileCode_ends_with?: string | null
  mobileCode_not_ends_with?: string | null
  mobileNumber?: string | null
  mobileNumber_not?: string | null
  mobileNumber_in?: string[]
  mobileNumber_not_in?: string[]
  mobileNumber_lt?: string | null
  mobileNumber_lte?: string | null
  mobileNumber_gt?: string | null
  mobileNumber_gte?: string | null
  mobileNumber_contains?: string | null
  mobileNumber_not_contains?: string | null
  mobileNumber_starts_with?: string | null
  mobileNumber_not_starts_with?: string | null
  mobileNumber_ends_with?: string | null
  mobileNumber_not_ends_with?: string | null
  landlineCode?: string | null
  landlineCode_not?: string | null
  landlineCode_in?: string[]
  landlineCode_not_in?: string[]
  landlineCode_lt?: string | null
  landlineCode_lte?: string | null
  landlineCode_gt?: string | null
  landlineCode_gte?: string | null
  landlineCode_contains?: string | null
  landlineCode_not_contains?: string | null
  landlineCode_starts_with?: string | null
  landlineCode_not_starts_with?: string | null
  landlineCode_ends_with?: string | null
  landlineCode_not_ends_with?: string | null
  landlineNumber?: string | null
  landlineNumber_not?: string | null
  landlineNumber_in?: string[]
  landlineNumber_not_in?: string[]
  landlineNumber_lt?: string | null
  landlineNumber_lte?: string | null
  landlineNumber_gt?: string | null
  landlineNumber_gte?: string | null
  landlineNumber_contains?: string | null
  landlineNumber_not_contains?: string | null
  landlineNumber_starts_with?: string | null
  landlineNumber_not_starts_with?: string | null
  landlineNumber_ends_with?: string | null
  landlineNumber_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ContactScalarWhereInput[]
  OR?: ContactScalarWhereInput[]
  NOT?: ContactScalarWhereInput[]
}
export type ContactScalarWhereInputInputObject =
  | Extract<keyof ContactScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'surname_not', alias?: string  } 
  | { name: 'surname_in', alias?: string  } 
  | { name: 'surname_not_in', alias?: string  } 
  | { name: 'surname_lt', alias?: string  } 
  | { name: 'surname_lte', alias?: string  } 
  | { name: 'surname_gt', alias?: string  } 
  | { name: 'surname_gte', alias?: string  } 
  | { name: 'surname_contains', alias?: string  } 
  | { name: 'surname_not_contains', alias?: string  } 
  | { name: 'surname_starts_with', alias?: string  } 
  | { name: 'surname_not_starts_with', alias?: string  } 
  | { name: 'surname_ends_with', alias?: string  } 
  | { name: 'surname_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'mobileCode', alias?: string  } 
  | { name: 'mobileCode_not', alias?: string  } 
  | { name: 'mobileCode_in', alias?: string  } 
  | { name: 'mobileCode_not_in', alias?: string  } 
  | { name: 'mobileCode_lt', alias?: string  } 
  | { name: 'mobileCode_lte', alias?: string  } 
  | { name: 'mobileCode_gt', alias?: string  } 
  | { name: 'mobileCode_gte', alias?: string  } 
  | { name: 'mobileCode_contains', alias?: string  } 
  | { name: 'mobileCode_not_contains', alias?: string  } 
  | { name: 'mobileCode_starts_with', alias?: string  } 
  | { name: 'mobileCode_not_starts_with', alias?: string  } 
  | { name: 'mobileCode_ends_with', alias?: string  } 
  | { name: 'mobileCode_not_ends_with', alias?: string  } 
  | { name: 'mobileNumber', alias?: string  } 
  | { name: 'mobileNumber_not', alias?: string  } 
  | { name: 'mobileNumber_in', alias?: string  } 
  | { name: 'mobileNumber_not_in', alias?: string  } 
  | { name: 'mobileNumber_lt', alias?: string  } 
  | { name: 'mobileNumber_lte', alias?: string  } 
  | { name: 'mobileNumber_gt', alias?: string  } 
  | { name: 'mobileNumber_gte', alias?: string  } 
  | { name: 'mobileNumber_contains', alias?: string  } 
  | { name: 'mobileNumber_not_contains', alias?: string  } 
  | { name: 'mobileNumber_starts_with', alias?: string  } 
  | { name: 'mobileNumber_not_starts_with', alias?: string  } 
  | { name: 'mobileNumber_ends_with', alias?: string  } 
  | { name: 'mobileNumber_not_ends_with', alias?: string  } 
  | { name: 'landlineCode', alias?: string  } 
  | { name: 'landlineCode_not', alias?: string  } 
  | { name: 'landlineCode_in', alias?: string  } 
  | { name: 'landlineCode_not_in', alias?: string  } 
  | { name: 'landlineCode_lt', alias?: string  } 
  | { name: 'landlineCode_lte', alias?: string  } 
  | { name: 'landlineCode_gt', alias?: string  } 
  | { name: 'landlineCode_gte', alias?: string  } 
  | { name: 'landlineCode_contains', alias?: string  } 
  | { name: 'landlineCode_not_contains', alias?: string  } 
  | { name: 'landlineCode_starts_with', alias?: string  } 
  | { name: 'landlineCode_not_starts_with', alias?: string  } 
  | { name: 'landlineCode_ends_with', alias?: string  } 
  | { name: 'landlineCode_not_ends_with', alias?: string  } 
  | { name: 'landlineNumber', alias?: string  } 
  | { name: 'landlineNumber_not', alias?: string  } 
  | { name: 'landlineNumber_in', alias?: string  } 
  | { name: 'landlineNumber_not_in', alias?: string  } 
  | { name: 'landlineNumber_lt', alias?: string  } 
  | { name: 'landlineNumber_lte', alias?: string  } 
  | { name: 'landlineNumber_gt', alias?: string  } 
  | { name: 'landlineNumber_gte', alias?: string  } 
  | { name: 'landlineNumber_contains', alias?: string  } 
  | { name: 'landlineNumber_not_contains', alias?: string  } 
  | { name: 'landlineNumber_starts_with', alias?: string  } 
  | { name: 'landlineNumber_not_starts_with', alias?: string  } 
  | { name: 'landlineNumber_ends_with', alias?: string  } 
  | { name: 'landlineNumber_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ContactUpdateManyWithWhereNestedInput {
  where?: ContactScalarWhereInput
  data?: ContactUpdateManyDataInput
}
export type ContactUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ContactUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ContactUpdateManyDataInput {
  name?: string | null
  surname?: string | null
  email?: string | null
  mobileCode?: string | null
  mobileNumber?: string | null
  landlineCode?: string | null
  landlineNumber?: string | null
}
export type ContactUpdateManyDataInputInputObject =
  | Extract<keyof ContactUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'surname', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'mobileCode', alias?: string  } 
  | { name: 'mobileNumber', alias?: string  } 
  | { name: 'landlineCode', alias?: string  } 
  | { name: 'landlineNumber', alias?: string  } 
  
export interface CompanyMemberUpdateManyWithoutCompanyInput {
  create?: CompanyMemberCreateWithoutCompanyInput[]
  delete?: CompanyMemberWhereUniqueInput[]
  connect?: CompanyMemberWhereUniqueInput[]
  set?: CompanyMemberWhereUniqueInput[]
  disconnect?: CompanyMemberWhereUniqueInput[]
  update?: CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput[]
  upsert?: CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput[]
  deleteMany?: CompanyMemberScalarWhereInput[]
  updateMany?: CompanyMemberUpdateManyWithWhereNestedInput[]
}
export type CompanyMemberUpdateManyWithoutCompanyInputInputObject =
  | Extract<keyof CompanyMemberUpdateManyWithoutCompanyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput {
  where?: CompanyMemberWhereUniqueInput
  data?: CompanyMemberUpdateWithoutCompanyDataInput
}
export type CompanyMemberUpdateWithWhereUniqueWithoutCompanyInputInputObject =
  | Extract<keyof CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CompanyMemberUpdateWithoutCompanyDataInput {
  isArchived?: boolean | null
  isDeleted?: boolean | null
  role?: prisma.CompanyMemberRole | null
  status?: prisma.CompanyMemberStatus | null
  user?: UserUpdateOneInput | null
}
export type CompanyMemberUpdateWithoutCompanyDataInputInputObject =
  | Extract<keyof CompanyMemberUpdateWithoutCompanyDataInput, string>
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserUpdateOneInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneInputInputObject =
  | Extract<keyof UserUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateDataInput {
  contactNumber?: undefined | null
  email?: string | null
  firstName?: string | null
  isActive?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isRoot?: boolean | null
  jobTitle?: string | null
  lastName?: string | null
  password?: string | null
  secondAuthEnabled?: boolean | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'contactNumber', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isRoot', alias?: string  } 
  | { name: 'jobTitle', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'secondAuthEnabled', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput {
  where?: CompanyMemberWhereUniqueInput
  update?: CompanyMemberUpdateWithoutCompanyDataInput
  create?: CompanyMemberCreateWithoutCompanyInput
}
export type CompanyMemberUpsertWithWhereUniqueWithoutCompanyInputInputObject =
  | Extract<keyof CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CompanyMemberScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  role?: prisma.CompanyMemberRole | null
  role_not?: prisma.CompanyMemberRole | null
  role_in?: prisma.CompanyMemberRole[]
  role_not_in?: prisma.CompanyMemberRole[]
  status?: prisma.CompanyMemberStatus | null
  status_not?: prisma.CompanyMemberStatus | null
  status_in?: prisma.CompanyMemberStatus[]
  status_not_in?: prisma.CompanyMemberStatus[]
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CompanyMemberScalarWhereInput[]
  OR?: CompanyMemberScalarWhereInput[]
  NOT?: CompanyMemberScalarWhereInput[]
}
export type CompanyMemberScalarWhereInputInputObject =
  | Extract<keyof CompanyMemberScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CompanyMemberUpdateManyWithWhereNestedInput {
  where?: CompanyMemberScalarWhereInput
  data?: CompanyMemberUpdateManyDataInput
}
export type CompanyMemberUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CompanyMemberUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CompanyMemberUpdateManyDataInput {
  isArchived?: boolean | null
  isDeleted?: boolean | null
  role?: prisma.CompanyMemberRole | null
  status?: prisma.CompanyMemberStatus | null
}
export type CompanyMemberUpdateManyDataInputInputObject =
  | Extract<keyof CompanyMemberUpdateManyDataInput, string>
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface PlanUpdateOneWithoutCompanyInput {
  create?: PlanCreateWithoutCompanyInput | null
  update?: PlanUpdateWithoutCompanyDataInput | null
  upsert?: PlanUpsertWithoutCompanyInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: PlanWhereUniqueInput | null
}
export type PlanUpdateOneWithoutCompanyInputInputObject =
  | Extract<keyof PlanUpdateOneWithoutCompanyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlanUpdateWithoutCompanyDataInput {
  isActive?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  price?: number | null
  type?: prisma.PlanType | null
  currency?: prisma.Currency | null
}
export type PlanUpdateWithoutCompanyDataInputInputObject =
  | Extract<keyof PlanUpdateWithoutCompanyDataInput, string>
  | { name: 'isActive', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  
export interface PlanUpsertWithoutCompanyInput {
  update?: PlanUpdateWithoutCompanyDataInput
  create?: PlanCreateWithoutCompanyInput
}
export type PlanUpsertWithoutCompanyInputInputObject =
  | Extract<keyof PlanUpsertWithoutCompanyInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CompanyUpdateManyMutationInput {
  bankAccount?: undefined | null
  businessType?: prisma.BusinessType | null
  country?: prisma.Country | null
  govNumber?: string | null
  currency?: prisma.Currency | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  HPIO?: string | null
  legalName?: string | null
  name?: string | null
  salesTax?: boolean | null
  timeSheetSettings?: undefined | null
  websiteURL?: string | null
  stripeCustomerId?: string | null
}
export type CompanyUpdateManyMutationInputInputObject =
  | Extract<keyof CompanyUpdateManyMutationInput, string>
  | { name: 'bankAccount', alias?: string  } 
  | { name: 'businessType', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'HPIO', alias?: string  } 
  | { name: 'legalName', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'timeSheetSettings', alias?: string  } 
  | { name: 'websiteURL', alias?: string  } 
  | { name: 'stripeCustomerId', alias?: string  } 
  
export interface CompanyMemberCreateInput {
  id?: string | null
  company?: CompanyCreateOneWithoutCompanyMembersInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
  role?: prisma.CompanyMemberRole | null
  status?: prisma.CompanyMemberStatus | null
  user?: UserCreateOneInput | null
}
export type CompanyMemberCreateInputInputObject =
  | Extract<keyof CompanyMemberCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface CompanyCreateOneWithoutCompanyMembersInput {
  create?: CompanyCreateWithoutCompanyMembersInput | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyCreateOneWithoutCompanyMembersInputInputObject =
  | Extract<keyof CompanyCreateOneWithoutCompanyMembersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyCreateWithoutCompanyMembersInput {
  id?: string | null
  bankAccount?: undefined | null
  businessType?: prisma.BusinessType | null
  country?: prisma.Country | null
  govNumber?: string | null
  currency?: prisma.Currency
  isArchived?: boolean | null
  isDeleted?: boolean | null
  HPIO?: string | null
  legalName?: string
  logo?: AttachmentCreateOneInput | null
  name?: string
  salesTax?: boolean | null
  timeSheetSettings?: undefined | null
  websiteURL?: string | null
  addresses?: AddressCreateManyInput | null
  contacts?: ContactCreateManyInput | null
  activePlan?: PlanCreateOneWithoutCompanyInput | null
  stripeCustomerId?: string | null
}
export type CompanyCreateWithoutCompanyMembersInputInputObject =
  | Extract<keyof CompanyCreateWithoutCompanyMembersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'bankAccount', alias?: string  } 
  | { name: 'businessType', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'HPIO', alias?: string  } 
  | { name: 'legalName', alias?: string  } 
  | { name: 'logo', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'timeSheetSettings', alias?: string  } 
  | { name: 'websiteURL', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  | { name: 'contacts', alias?: string  } 
  | { name: 'activePlan', alias?: string  } 
  | { name: 'stripeCustomerId', alias?: string  } 
  
export interface CompanyMemberUpdateInput {
  company?: CompanyUpdateOneRequiredWithoutCompanyMembersInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  role?: prisma.CompanyMemberRole | null
  status?: prisma.CompanyMemberStatus | null
  user?: UserUpdateOneInput | null
}
export type CompanyMemberUpdateInputInputObject =
  | Extract<keyof CompanyMemberUpdateInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface CompanyUpdateOneRequiredWithoutCompanyMembersInput {
  create?: CompanyCreateWithoutCompanyMembersInput | null
  update?: CompanyUpdateWithoutCompanyMembersDataInput | null
  upsert?: CompanyUpsertWithoutCompanyMembersInput | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyUpdateOneRequiredWithoutCompanyMembersInputInputObject =
  | Extract<keyof CompanyUpdateOneRequiredWithoutCompanyMembersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyUpdateWithoutCompanyMembersDataInput {
  bankAccount?: undefined | null
  businessType?: prisma.BusinessType | null
  country?: prisma.Country | null
  govNumber?: string | null
  currency?: prisma.Currency | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  HPIO?: string | null
  legalName?: string | null
  logo?: AttachmentUpdateOneInput | null
  name?: string | null
  salesTax?: boolean | null
  timeSheetSettings?: undefined | null
  websiteURL?: string | null
  addresses?: AddressUpdateManyInput | null
  contacts?: ContactUpdateManyInput | null
  activePlan?: PlanUpdateOneWithoutCompanyInput | null
  stripeCustomerId?: string | null
}
export type CompanyUpdateWithoutCompanyMembersDataInputInputObject =
  | Extract<keyof CompanyUpdateWithoutCompanyMembersDataInput, string>
  | { name: 'bankAccount', alias?: string  } 
  | { name: 'businessType', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'HPIO', alias?: string  } 
  | { name: 'legalName', alias?: string  } 
  | { name: 'logo', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'timeSheetSettings', alias?: string  } 
  | { name: 'websiteURL', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  | { name: 'contacts', alias?: string  } 
  | { name: 'activePlan', alias?: string  } 
  | { name: 'stripeCustomerId', alias?: string  } 
  
export interface CompanyUpsertWithoutCompanyMembersInput {
  update?: CompanyUpdateWithoutCompanyMembersDataInput
  create?: CompanyCreateWithoutCompanyMembersInput
}
export type CompanyUpsertWithoutCompanyMembersInputInputObject =
  | Extract<keyof CompanyUpsertWithoutCompanyMembersInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CompanyMemberUpdateManyMutationInput {
  isArchived?: boolean | null
  isDeleted?: boolean | null
  role?: prisma.CompanyMemberRole | null
  status?: prisma.CompanyMemberStatus | null
}
export type CompanyMemberUpdateManyMutationInputInputObject =
  | Extract<keyof CompanyMemberUpdateManyMutationInput, string>
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface CustomerCreateInput {
  id?: string | null
  company?: CompanyCreateOneInput
  description?: string | null
  govNumber?: string | null
  salesTax?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  name?: string | null
  billingFrequency?: prisma.SupplierTermsOfPayment | null
  meansTestedFee?: MeansTestedFeeCreateOneInput | null
  basicDailyFee?: BasicDailyFeeCreateOneInput | null
  contacts?: ContactCreateManyInput | null
  addresses?: AddressCreateManyInput | null
}
export type CustomerCreateInputInputObject =
  | Extract<keyof CustomerCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'billingFrequency', alias?: string  } 
  | { name: 'meansTestedFee', alias?: string  } 
  | { name: 'basicDailyFee', alias?: string  } 
  | { name: 'contacts', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  
export interface CompanyCreateOneInput {
  create?: CompanyCreateInput | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyCreateOneInputInputObject =
  | Extract<keyof CompanyCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MeansTestedFeeCreateOneInput {
  create?: MeansTestedFeeCreateInput | null
  connect?: MeansTestedFeeWhereUniqueInput | null
}
export type MeansTestedFeeCreateOneInputInputObject =
  | Extract<keyof MeansTestedFeeCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MeansTestedFeeCreateInput {
  id?: string | null
  amount?: number | null
  currency?: prisma.Currency | null
  dateFrom?: string | null
  dateTo?: string | null
  company?: CompanyCreateOneInput | null
}
export type MeansTestedFeeCreateInputInputObject =
  | Extract<keyof MeansTestedFeeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  | { name: 'company', alias?: string  } 
  
export interface BasicDailyFeeCreateOneInput {
  create?: BasicDailyFeeCreateInput | null
  connect?: BasicDailyFeeWhereUniqueInput | null
}
export type BasicDailyFeeCreateOneInputInputObject =
  | Extract<keyof BasicDailyFeeCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BasicDailyFeeCreateInput {
  id?: string | null
  level?: prisma.LevelOfCare | null
  rate?: number | null
  dateFrom?: string | null
  dateTo?: string | null
  rechargeable?: number | null
  company?: CompanyCreateOneInput | null
}
export type BasicDailyFeeCreateInputInputObject =
  | Extract<keyof BasicDailyFeeCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'rate', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  | { name: 'rechargeable', alias?: string  } 
  | { name: 'company', alias?: string  } 
  
export interface CustomerUpdateInput {
  company?: CompanyUpdateOneRequiredInput | null
  description?: string | null
  govNumber?: string | null
  salesTax?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  name?: string | null
  billingFrequency?: prisma.SupplierTermsOfPayment | null
  meansTestedFee?: MeansTestedFeeUpdateOneInput | null
  basicDailyFee?: BasicDailyFeeUpdateOneInput | null
  contacts?: ContactUpdateManyInput | null
  addresses?: AddressUpdateManyInput | null
}
export type CustomerUpdateInputInputObject =
  | Extract<keyof CustomerUpdateInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'billingFrequency', alias?: string  } 
  | { name: 'meansTestedFee', alias?: string  } 
  | { name: 'basicDailyFee', alias?: string  } 
  | { name: 'contacts', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  
export interface CompanyUpdateOneRequiredInput {
  create?: CompanyCreateInput | null
  update?: CompanyUpdateDataInput | null
  upsert?: CompanyUpsertNestedInput | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyUpdateOneRequiredInputInputObject =
  | Extract<keyof CompanyUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyUpdateDataInput {
  bankAccount?: undefined | null
  businessType?: prisma.BusinessType | null
  country?: prisma.Country | null
  govNumber?: string | null
  currency?: prisma.Currency | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  HPIO?: string | null
  legalName?: string | null
  logo?: AttachmentUpdateOneInput | null
  name?: string | null
  salesTax?: boolean | null
  timeSheetSettings?: undefined | null
  websiteURL?: string | null
  addresses?: AddressUpdateManyInput | null
  contacts?: ContactUpdateManyInput | null
  companyMembers?: CompanyMemberUpdateManyWithoutCompanyInput | null
  activePlan?: PlanUpdateOneWithoutCompanyInput | null
  stripeCustomerId?: string | null
}
export type CompanyUpdateDataInputInputObject =
  | Extract<keyof CompanyUpdateDataInput, string>
  | { name: 'bankAccount', alias?: string  } 
  | { name: 'businessType', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'HPIO', alias?: string  } 
  | { name: 'legalName', alias?: string  } 
  | { name: 'logo', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'timeSheetSettings', alias?: string  } 
  | { name: 'websiteURL', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  | { name: 'contacts', alias?: string  } 
  | { name: 'companyMembers', alias?: string  } 
  | { name: 'activePlan', alias?: string  } 
  | { name: 'stripeCustomerId', alias?: string  } 
  
export interface CompanyUpsertNestedInput {
  update?: CompanyUpdateDataInput
  create?: CompanyCreateInput
}
export type CompanyUpsertNestedInputInputObject =
  | Extract<keyof CompanyUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MeansTestedFeeUpdateOneInput {
  create?: MeansTestedFeeCreateInput | null
  update?: MeansTestedFeeUpdateDataInput | null
  upsert?: MeansTestedFeeUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: MeansTestedFeeWhereUniqueInput | null
}
export type MeansTestedFeeUpdateOneInputInputObject =
  | Extract<keyof MeansTestedFeeUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MeansTestedFeeUpdateDataInput {
  amount?: number | null
  currency?: prisma.Currency | null
  dateFrom?: string | null
  dateTo?: string | null
  company?: CompanyUpdateOneInput | null
}
export type MeansTestedFeeUpdateDataInputInputObject =
  | Extract<keyof MeansTestedFeeUpdateDataInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  | { name: 'company', alias?: string  } 
  
export interface CompanyUpdateOneInput {
  create?: CompanyCreateInput | null
  update?: CompanyUpdateDataInput | null
  upsert?: CompanyUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyUpdateOneInputInputObject =
  | Extract<keyof CompanyUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MeansTestedFeeUpsertNestedInput {
  update?: MeansTestedFeeUpdateDataInput
  create?: MeansTestedFeeCreateInput
}
export type MeansTestedFeeUpsertNestedInputInputObject =
  | Extract<keyof MeansTestedFeeUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BasicDailyFeeUpdateOneInput {
  create?: BasicDailyFeeCreateInput | null
  update?: BasicDailyFeeUpdateDataInput | null
  upsert?: BasicDailyFeeUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: BasicDailyFeeWhereUniqueInput | null
}
export type BasicDailyFeeUpdateOneInputInputObject =
  | Extract<keyof BasicDailyFeeUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BasicDailyFeeUpdateDataInput {
  level?: prisma.LevelOfCare | null
  rate?: number | null
  dateFrom?: string | null
  dateTo?: string | null
  rechargeable?: number | null
  company?: CompanyUpdateOneInput | null
}
export type BasicDailyFeeUpdateDataInputInputObject =
  | Extract<keyof BasicDailyFeeUpdateDataInput, string>
  | { name: 'level', alias?: string  } 
  | { name: 'rate', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  | { name: 'rechargeable', alias?: string  } 
  | { name: 'company', alias?: string  } 
  
export interface BasicDailyFeeUpsertNestedInput {
  update?: BasicDailyFeeUpdateDataInput
  create?: BasicDailyFeeCreateInput
}
export type BasicDailyFeeUpsertNestedInputInputObject =
  | Extract<keyof BasicDailyFeeUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CustomerUpdateManyMutationInput {
  description?: string | null
  govNumber?: string | null
  salesTax?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  name?: string | null
  billingFrequency?: prisma.SupplierTermsOfPayment | null
}
export type CustomerUpdateManyMutationInputInputObject =
  | Extract<keyof CustomerUpdateManyMutationInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'billingFrequency', alias?: string  } 
  
export interface IntegrationCreateInput {
  id?: string | null
  company?: CompanyCreateOneInput
  data?: undefined | null
  type?: prisma.IntegrationType | null
}
export type IntegrationCreateInputInputObject =
  | Extract<keyof IntegrationCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface IntegrationUpdateInput {
  company?: CompanyUpdateOneRequiredInput | null
  data?: undefined | null
  type?: prisma.IntegrationType | null
}
export type IntegrationUpdateInputInputObject =
  | Extract<keyof IntegrationUpdateInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface IntegrationUpdateManyMutationInput {
  data?: undefined | null
  type?: prisma.IntegrationType | null
}
export type IntegrationUpdateManyMutationInputInputObject =
  | Extract<keyof IntegrationUpdateManyMutationInput, string>
  | { name: 'data', alias?: string  } 
  | { name: 'type', alias?: string  } 
  
export interface ServiceCreateInput {
  id?: string | null
  billingType?: prisma.ServiceBillingType
  company?: CompanyCreateOneInput
  includeConsTax?: boolean
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isTemplate?: boolean | null
  name?: string
  timeBasedType?: prisma.TimeBasedType | null
  totalAmount?: number
}
export type ServiceCreateInputInputObject =
  | Extract<keyof ServiceCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'billingType', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'includeConsTax', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isTemplate', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'timeBasedType', alias?: string  } 
  | { name: 'totalAmount', alias?: string  } 
  
export interface ServiceUpdateInput {
  billingType?: prisma.ServiceBillingType | null
  company?: CompanyUpdateOneRequiredInput | null
  includeConsTax?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isTemplate?: boolean | null
  name?: string | null
  timeBasedType?: prisma.TimeBasedType | null
  totalAmount?: number | null
}
export type ServiceUpdateInputInputObject =
  | Extract<keyof ServiceUpdateInput, string>
  | { name: 'billingType', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'includeConsTax', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isTemplate', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'timeBasedType', alias?: string  } 
  | { name: 'totalAmount', alias?: string  } 
  
export interface ServiceUpdateManyMutationInput {
  billingType?: prisma.ServiceBillingType | null
  includeConsTax?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isTemplate?: boolean | null
  name?: string | null
  timeBasedType?: prisma.TimeBasedType | null
  totalAmount?: number | null
}
export type ServiceUpdateManyMutationInputInputObject =
  | Extract<keyof ServiceUpdateManyMutationInput, string>
  | { name: 'billingType', alias?: string  } 
  | { name: 'includeConsTax', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isTemplate', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'timeBasedType', alias?: string  } 
  | { name: 'totalAmount', alias?: string  } 
  
export interface ProjectCreateInput {
  id?: string | null
  company?: CompanyCreateOneInput
  customer?: CustomerCreateOneInput | null
  description?: string | null
  endsAt?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  name?: string | null
  projectService?: ProjectServiceCreateManyWithoutProjectInput | null
  startsAt?: string | null
  status?: prisma.ProjectStatus | null
}
export type ProjectCreateInputInputObject =
  | Extract<keyof ProjectCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'projectService', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface CustomerCreateOneInput {
  create?: CustomerCreateInput | null
  connect?: CustomerWhereUniqueInput | null
}
export type CustomerCreateOneInputInputObject =
  | Extract<keyof CustomerCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectServiceCreateManyWithoutProjectInput {
  create?: ProjectServiceCreateWithoutProjectInput[]
  connect?: ProjectServiceWhereUniqueInput[]
}
export type ProjectServiceCreateManyWithoutProjectInputInputObject =
  | Extract<keyof ProjectServiceCreateManyWithoutProjectInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectServiceCreateWithoutProjectInput {
  id?: string | null
  amount?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  rules?: ProjectServiceRuleCreateManyWithoutProjectServiceInput | null
  service?: ServiceCreateOneInput | null
}
export type ProjectServiceCreateWithoutProjectInputInputObject =
  | Extract<keyof ProjectServiceCreateWithoutProjectInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'rules', alias?: string  } 
  | { name: 'service', alias?: string  } 
  
export interface ProjectServiceRuleCreateManyWithoutProjectServiceInput {
  create?: ProjectServiceRuleCreateWithoutProjectServiceInput[]
  connect?: ProjectServiceRuleWhereUniqueInput[]
}
export type ProjectServiceRuleCreateManyWithoutProjectServiceInputInputObject =
  | Extract<keyof ProjectServiceRuleCreateManyWithoutProjectServiceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectServiceRuleCreateWithoutProjectServiceInput {
  id?: string | null
  amount?: number | null
  percent?: number | null
  type?: prisma.ProjectServiceRuleType | null
  isPercent?: boolean | null
}
export type ProjectServiceRuleCreateWithoutProjectServiceInputInputObject =
  | Extract<keyof ProjectServiceRuleCreateWithoutProjectServiceInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'percent', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'isPercent', alias?: string  } 
  
export interface ServiceCreateOneInput {
  create?: ServiceCreateInput | null
  connect?: ServiceWhereUniqueInput | null
}
export type ServiceCreateOneInputInputObject =
  | Extract<keyof ServiceCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectUpdateInput {
  company?: CompanyUpdateOneRequiredInput | null
  customer?: CustomerUpdateOneInput | null
  description?: string | null
  endsAt?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  name?: string | null
  projectService?: ProjectServiceUpdateManyWithoutProjectInput | null
  startsAt?: string | null
  status?: prisma.ProjectStatus | null
}
export type ProjectUpdateInputInputObject =
  | Extract<keyof ProjectUpdateInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'projectService', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface CustomerUpdateOneInput {
  create?: CustomerCreateInput | null
  update?: CustomerUpdateDataInput | null
  upsert?: CustomerUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: CustomerWhereUniqueInput | null
}
export type CustomerUpdateOneInputInputObject =
  | Extract<keyof CustomerUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CustomerUpdateDataInput {
  company?: CompanyUpdateOneRequiredInput | null
  description?: string | null
  govNumber?: string | null
  salesTax?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  name?: string | null
  billingFrequency?: prisma.SupplierTermsOfPayment | null
  meansTestedFee?: MeansTestedFeeUpdateOneInput | null
  basicDailyFee?: BasicDailyFeeUpdateOneInput | null
  contacts?: ContactUpdateManyInput | null
  addresses?: AddressUpdateManyInput | null
}
export type CustomerUpdateDataInputInputObject =
  | Extract<keyof CustomerUpdateDataInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'billingFrequency', alias?: string  } 
  | { name: 'meansTestedFee', alias?: string  } 
  | { name: 'basicDailyFee', alias?: string  } 
  | { name: 'contacts', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  
export interface CustomerUpsertNestedInput {
  update?: CustomerUpdateDataInput
  create?: CustomerCreateInput
}
export type CustomerUpsertNestedInputInputObject =
  | Extract<keyof CustomerUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectServiceUpdateManyWithoutProjectInput {
  create?: ProjectServiceCreateWithoutProjectInput[]
  delete?: ProjectServiceWhereUniqueInput[]
  connect?: ProjectServiceWhereUniqueInput[]
  set?: ProjectServiceWhereUniqueInput[]
  disconnect?: ProjectServiceWhereUniqueInput[]
  update?: ProjectServiceUpdateWithWhereUniqueWithoutProjectInput[]
  upsert?: ProjectServiceUpsertWithWhereUniqueWithoutProjectInput[]
  deleteMany?: ProjectServiceScalarWhereInput[]
  updateMany?: ProjectServiceUpdateManyWithWhereNestedInput[]
}
export type ProjectServiceUpdateManyWithoutProjectInputInputObject =
  | Extract<keyof ProjectServiceUpdateManyWithoutProjectInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectServiceUpdateWithWhereUniqueWithoutProjectInput {
  where?: ProjectServiceWhereUniqueInput
  data?: ProjectServiceUpdateWithoutProjectDataInput
}
export type ProjectServiceUpdateWithWhereUniqueWithoutProjectInputInputObject =
  | Extract<keyof ProjectServiceUpdateWithWhereUniqueWithoutProjectInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectServiceUpdateWithoutProjectDataInput {
  amount?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  rules?: ProjectServiceRuleUpdateManyWithoutProjectServiceInput | null
  service?: ServiceUpdateOneInput | null
}
export type ProjectServiceUpdateWithoutProjectDataInputInputObject =
  | Extract<keyof ProjectServiceUpdateWithoutProjectDataInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'rules', alias?: string  } 
  | { name: 'service', alias?: string  } 
  
export interface ProjectServiceRuleUpdateManyWithoutProjectServiceInput {
  create?: ProjectServiceRuleCreateWithoutProjectServiceInput[]
  delete?: ProjectServiceRuleWhereUniqueInput[]
  connect?: ProjectServiceRuleWhereUniqueInput[]
  set?: ProjectServiceRuleWhereUniqueInput[]
  disconnect?: ProjectServiceRuleWhereUniqueInput[]
  update?: ProjectServiceRuleUpdateWithWhereUniqueWithoutProjectServiceInput[]
  upsert?: ProjectServiceRuleUpsertWithWhereUniqueWithoutProjectServiceInput[]
  deleteMany?: ProjectServiceRuleScalarWhereInput[]
  updateMany?: ProjectServiceRuleUpdateManyWithWhereNestedInput[]
}
export type ProjectServiceRuleUpdateManyWithoutProjectServiceInputInputObject =
  | Extract<keyof ProjectServiceRuleUpdateManyWithoutProjectServiceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ProjectServiceRuleUpdateWithWhereUniqueWithoutProjectServiceInput {
  where?: ProjectServiceRuleWhereUniqueInput
  data?: ProjectServiceRuleUpdateWithoutProjectServiceDataInput
}
export type ProjectServiceRuleUpdateWithWhereUniqueWithoutProjectServiceInputInputObject =
  | Extract<keyof ProjectServiceRuleUpdateWithWhereUniqueWithoutProjectServiceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectServiceRuleUpdateWithoutProjectServiceDataInput {
  amount?: number | null
  percent?: number | null
  type?: prisma.ProjectServiceRuleType | null
  isPercent?: boolean | null
}
export type ProjectServiceRuleUpdateWithoutProjectServiceDataInputInputObject =
  | Extract<keyof ProjectServiceRuleUpdateWithoutProjectServiceDataInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'percent', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'isPercent', alias?: string  } 
  
export interface ProjectServiceRuleUpsertWithWhereUniqueWithoutProjectServiceInput {
  where?: ProjectServiceRuleWhereUniqueInput
  update?: ProjectServiceRuleUpdateWithoutProjectServiceDataInput
  create?: ProjectServiceRuleCreateWithoutProjectServiceInput
}
export type ProjectServiceRuleUpsertWithWhereUniqueWithoutProjectServiceInputInputObject =
  | Extract<keyof ProjectServiceRuleUpsertWithWhereUniqueWithoutProjectServiceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectServiceRuleScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  amount?: number | null
  amount_not?: number | null
  amount_in?: number[]
  amount_not_in?: number[]
  amount_lt?: number | null
  amount_lte?: number | null
  amount_gt?: number | null
  amount_gte?: number | null
  percent?: number | null
  percent_not?: number | null
  percent_in?: number[]
  percent_not_in?: number[]
  percent_lt?: number | null
  percent_lte?: number | null
  percent_gt?: number | null
  percent_gte?: number | null
  type?: prisma.ProjectServiceRuleType | null
  type_not?: prisma.ProjectServiceRuleType | null
  type_in?: prisma.ProjectServiceRuleType[]
  type_not_in?: prisma.ProjectServiceRuleType[]
  isPercent?: boolean | null
  isPercent_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProjectServiceRuleScalarWhereInput[]
  OR?: ProjectServiceRuleScalarWhereInput[]
  NOT?: ProjectServiceRuleScalarWhereInput[]
}
export type ProjectServiceRuleScalarWhereInputInputObject =
  | Extract<keyof ProjectServiceRuleScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'amount_not', alias?: string  } 
  | { name: 'amount_in', alias?: string  } 
  | { name: 'amount_not_in', alias?: string  } 
  | { name: 'amount_lt', alias?: string  } 
  | { name: 'amount_lte', alias?: string  } 
  | { name: 'amount_gt', alias?: string  } 
  | { name: 'amount_gte', alias?: string  } 
  | { name: 'percent', alias?: string  } 
  | { name: 'percent_not', alias?: string  } 
  | { name: 'percent_in', alias?: string  } 
  | { name: 'percent_not_in', alias?: string  } 
  | { name: 'percent_lt', alias?: string  } 
  | { name: 'percent_lte', alias?: string  } 
  | { name: 'percent_gt', alias?: string  } 
  | { name: 'percent_gte', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'isPercent', alias?: string  } 
  | { name: 'isPercent_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectServiceRuleUpdateManyWithWhereNestedInput {
  where?: ProjectServiceRuleScalarWhereInput
  data?: ProjectServiceRuleUpdateManyDataInput
}
export type ProjectServiceRuleUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProjectServiceRuleUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectServiceRuleUpdateManyDataInput {
  amount?: number | null
  percent?: number | null
  type?: prisma.ProjectServiceRuleType | null
  isPercent?: boolean | null
}
export type ProjectServiceRuleUpdateManyDataInputInputObject =
  | Extract<keyof ProjectServiceRuleUpdateManyDataInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'percent', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'isPercent', alias?: string  } 
  
export interface ServiceUpdateOneInput {
  create?: ServiceCreateInput | null
  update?: ServiceUpdateDataInput | null
  upsert?: ServiceUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ServiceWhereUniqueInput | null
}
export type ServiceUpdateOneInputInputObject =
  | Extract<keyof ServiceUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ServiceUpdateDataInput {
  billingType?: prisma.ServiceBillingType | null
  company?: CompanyUpdateOneRequiredInput | null
  includeConsTax?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isTemplate?: boolean | null
  name?: string | null
  timeBasedType?: prisma.TimeBasedType | null
  totalAmount?: number | null
}
export type ServiceUpdateDataInputInputObject =
  | Extract<keyof ServiceUpdateDataInput, string>
  | { name: 'billingType', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'includeConsTax', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isTemplate', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'timeBasedType', alias?: string  } 
  | { name: 'totalAmount', alias?: string  } 
  
export interface ServiceUpsertNestedInput {
  update?: ServiceUpdateDataInput
  create?: ServiceCreateInput
}
export type ServiceUpsertNestedInputInputObject =
  | Extract<keyof ServiceUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectServiceUpsertWithWhereUniqueWithoutProjectInput {
  where?: ProjectServiceWhereUniqueInput
  update?: ProjectServiceUpdateWithoutProjectDataInput
  create?: ProjectServiceCreateWithoutProjectInput
}
export type ProjectServiceUpsertWithWhereUniqueWithoutProjectInputInputObject =
  | Extract<keyof ProjectServiceUpsertWithWhereUniqueWithoutProjectInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectServiceScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  amount?: number | null
  amount_not?: number | null
  amount_in?: number[]
  amount_not_in?: number[]
  amount_lt?: number | null
  amount_lte?: number | null
  amount_gt?: number | null
  amount_gte?: number | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ProjectServiceScalarWhereInput[]
  OR?: ProjectServiceScalarWhereInput[]
  NOT?: ProjectServiceScalarWhereInput[]
}
export type ProjectServiceScalarWhereInputInputObject =
  | Extract<keyof ProjectServiceScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'amount_not', alias?: string  } 
  | { name: 'amount_in', alias?: string  } 
  | { name: 'amount_not_in', alias?: string  } 
  | { name: 'amount_lt', alias?: string  } 
  | { name: 'amount_lte', alias?: string  } 
  | { name: 'amount_gt', alias?: string  } 
  | { name: 'amount_gte', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectServiceUpdateManyWithWhereNestedInput {
  where?: ProjectServiceScalarWhereInput
  data?: ProjectServiceUpdateManyDataInput
}
export type ProjectServiceUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ProjectServiceUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ProjectServiceUpdateManyDataInput {
  amount?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type ProjectServiceUpdateManyDataInputInputObject =
  | Extract<keyof ProjectServiceUpdateManyDataInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface ProjectUpdateManyMutationInput {
  description?: string | null
  endsAt?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  name?: string | null
  startsAt?: string | null
  status?: prisma.ProjectStatus | null
}
export type ProjectUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectUpdateManyMutationInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface ProjectServiceCreateInput {
  id?: string | null
  amount?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  project?: ProjectCreateOneWithoutProjectServiceInput | null
  rules?: ProjectServiceRuleCreateManyWithoutProjectServiceInput | null
  service?: ServiceCreateOneInput | null
}
export type ProjectServiceCreateInputInputObject =
  | Extract<keyof ProjectServiceCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'rules', alias?: string  } 
  | { name: 'service', alias?: string  } 
  
export interface ProjectCreateOneWithoutProjectServiceInput {
  create?: ProjectCreateWithoutProjectServiceInput | null
  connect?: ProjectWhereUniqueInput | null
}
export type ProjectCreateOneWithoutProjectServiceInputInputObject =
  | Extract<keyof ProjectCreateOneWithoutProjectServiceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectCreateWithoutProjectServiceInput {
  id?: string | null
  company?: CompanyCreateOneInput
  customer?: CustomerCreateOneInput | null
  description?: string | null
  endsAt?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  name?: string | null
  startsAt?: string | null
  status?: prisma.ProjectStatus | null
}
export type ProjectCreateWithoutProjectServiceInputInputObject =
  | Extract<keyof ProjectCreateWithoutProjectServiceInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface ProjectServiceUpdateInput {
  amount?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  project?: ProjectUpdateOneWithoutProjectServiceInput | null
  rules?: ProjectServiceRuleUpdateManyWithoutProjectServiceInput | null
  service?: ServiceUpdateOneInput | null
}
export type ProjectServiceUpdateInputInputObject =
  | Extract<keyof ProjectServiceUpdateInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'rules', alias?: string  } 
  | { name: 'service', alias?: string  } 
  
export interface ProjectUpdateOneWithoutProjectServiceInput {
  create?: ProjectCreateWithoutProjectServiceInput | null
  update?: ProjectUpdateWithoutProjectServiceDataInput | null
  upsert?: ProjectUpsertWithoutProjectServiceInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ProjectWhereUniqueInput | null
}
export type ProjectUpdateOneWithoutProjectServiceInputInputObject =
  | Extract<keyof ProjectUpdateOneWithoutProjectServiceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectUpdateWithoutProjectServiceDataInput {
  company?: CompanyUpdateOneRequiredInput | null
  customer?: CustomerUpdateOneInput | null
  description?: string | null
  endsAt?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  name?: string | null
  startsAt?: string | null
  status?: prisma.ProjectStatus | null
}
export type ProjectUpdateWithoutProjectServiceDataInputInputObject =
  | Extract<keyof ProjectUpdateWithoutProjectServiceDataInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface ProjectUpsertWithoutProjectServiceInput {
  update?: ProjectUpdateWithoutProjectServiceDataInput
  create?: ProjectCreateWithoutProjectServiceInput
}
export type ProjectUpsertWithoutProjectServiceInputInputObject =
  | Extract<keyof ProjectUpsertWithoutProjectServiceInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectServiceUpdateManyMutationInput {
  amount?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type ProjectServiceUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectServiceUpdateManyMutationInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface ProjectServiceRuleCreateInput {
  id?: string | null
  projectService?: ProjectServiceCreateOneWithoutRulesInput | null
  amount?: number | null
  percent?: number | null
  type?: prisma.ProjectServiceRuleType | null
  isPercent?: boolean | null
}
export type ProjectServiceRuleCreateInputInputObject =
  | Extract<keyof ProjectServiceRuleCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'projectService', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'percent', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'isPercent', alias?: string  } 
  
export interface ProjectServiceCreateOneWithoutRulesInput {
  create?: ProjectServiceCreateWithoutRulesInput | null
  connect?: ProjectServiceWhereUniqueInput | null
}
export type ProjectServiceCreateOneWithoutRulesInputInputObject =
  | Extract<keyof ProjectServiceCreateOneWithoutRulesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectServiceCreateWithoutRulesInput {
  id?: string | null
  amount?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  project?: ProjectCreateOneWithoutProjectServiceInput | null
  service?: ServiceCreateOneInput | null
}
export type ProjectServiceCreateWithoutRulesInputInputObject =
  | Extract<keyof ProjectServiceCreateWithoutRulesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  
export interface ProjectServiceRuleUpdateInput {
  projectService?: ProjectServiceUpdateOneWithoutRulesInput | null
  amount?: number | null
  percent?: number | null
  type?: prisma.ProjectServiceRuleType | null
  isPercent?: boolean | null
}
export type ProjectServiceRuleUpdateInputInputObject =
  | Extract<keyof ProjectServiceRuleUpdateInput, string>
  | { name: 'projectService', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'percent', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'isPercent', alias?: string  } 
  
export interface ProjectServiceUpdateOneWithoutRulesInput {
  create?: ProjectServiceCreateWithoutRulesInput | null
  update?: ProjectServiceUpdateWithoutRulesDataInput | null
  upsert?: ProjectServiceUpsertWithoutRulesInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ProjectServiceWhereUniqueInput | null
}
export type ProjectServiceUpdateOneWithoutRulesInputInputObject =
  | Extract<keyof ProjectServiceUpdateOneWithoutRulesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectServiceUpdateWithoutRulesDataInput {
  amount?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  project?: ProjectUpdateOneWithoutProjectServiceInput | null
  service?: ServiceUpdateOneInput | null
}
export type ProjectServiceUpdateWithoutRulesDataInputInputObject =
  | Extract<keyof ProjectServiceUpdateWithoutRulesDataInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  
export interface ProjectServiceUpsertWithoutRulesInput {
  update?: ProjectServiceUpdateWithoutRulesDataInput
  create?: ProjectServiceCreateWithoutRulesInput
}
export type ProjectServiceUpsertWithoutRulesInputInputObject =
  | Extract<keyof ProjectServiceUpsertWithoutRulesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ProjectServiceRuleUpdateManyMutationInput {
  amount?: number | null
  percent?: number | null
  type?: prisma.ProjectServiceRuleType | null
  isPercent?: boolean | null
}
export type ProjectServiceRuleUpdateManyMutationInputInputObject =
  | Extract<keyof ProjectServiceRuleUpdateManyMutationInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'percent', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'isPercent', alias?: string  } 
  
export interface PlanCreateInput {
  id?: string | null
  company?: CompanyCreateOneWithoutActivePlanInput
  isActive?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  price?: number | null
  type?: prisma.PlanType | null
  currency?: prisma.Currency
}
export type PlanCreateInputInputObject =
  | Extract<keyof PlanCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  
export interface CompanyCreateOneWithoutActivePlanInput {
  create?: CompanyCreateWithoutActivePlanInput | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyCreateOneWithoutActivePlanInputInputObject =
  | Extract<keyof CompanyCreateOneWithoutActivePlanInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyCreateWithoutActivePlanInput {
  id?: string | null
  bankAccount?: undefined | null
  businessType?: prisma.BusinessType | null
  country?: prisma.Country | null
  govNumber?: string | null
  currency?: prisma.Currency
  isArchived?: boolean | null
  isDeleted?: boolean | null
  HPIO?: string | null
  legalName?: string
  logo?: AttachmentCreateOneInput | null
  name?: string
  salesTax?: boolean | null
  timeSheetSettings?: undefined | null
  websiteURL?: string | null
  addresses?: AddressCreateManyInput | null
  contacts?: ContactCreateManyInput | null
  companyMembers?: CompanyMemberCreateManyWithoutCompanyInput | null
  stripeCustomerId?: string | null
}
export type CompanyCreateWithoutActivePlanInputInputObject =
  | Extract<keyof CompanyCreateWithoutActivePlanInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'bankAccount', alias?: string  } 
  | { name: 'businessType', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'HPIO', alias?: string  } 
  | { name: 'legalName', alias?: string  } 
  | { name: 'logo', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'timeSheetSettings', alias?: string  } 
  | { name: 'websiteURL', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  | { name: 'contacts', alias?: string  } 
  | { name: 'companyMembers', alias?: string  } 
  | { name: 'stripeCustomerId', alias?: string  } 
  
export interface PlanUpdateInput {
  company?: CompanyUpdateOneRequiredWithoutActivePlanInput | null
  isActive?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  price?: number | null
  type?: prisma.PlanType | null
  currency?: prisma.Currency | null
}
export type PlanUpdateInputInputObject =
  | Extract<keyof PlanUpdateInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  
export interface CompanyUpdateOneRequiredWithoutActivePlanInput {
  create?: CompanyCreateWithoutActivePlanInput | null
  update?: CompanyUpdateWithoutActivePlanDataInput | null
  upsert?: CompanyUpsertWithoutActivePlanInput | null
  connect?: CompanyWhereUniqueInput | null
}
export type CompanyUpdateOneRequiredWithoutActivePlanInputInputObject =
  | Extract<keyof CompanyUpdateOneRequiredWithoutActivePlanInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CompanyUpdateWithoutActivePlanDataInput {
  bankAccount?: undefined | null
  businessType?: prisma.BusinessType | null
  country?: prisma.Country | null
  govNumber?: string | null
  currency?: prisma.Currency | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  HPIO?: string | null
  legalName?: string | null
  logo?: AttachmentUpdateOneInput | null
  name?: string | null
  salesTax?: boolean | null
  timeSheetSettings?: undefined | null
  websiteURL?: string | null
  addresses?: AddressUpdateManyInput | null
  contacts?: ContactUpdateManyInput | null
  companyMembers?: CompanyMemberUpdateManyWithoutCompanyInput | null
  stripeCustomerId?: string | null
}
export type CompanyUpdateWithoutActivePlanDataInputInputObject =
  | Extract<keyof CompanyUpdateWithoutActivePlanDataInput, string>
  | { name: 'bankAccount', alias?: string  } 
  | { name: 'businessType', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'govNumber', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'HPIO', alias?: string  } 
  | { name: 'legalName', alias?: string  } 
  | { name: 'logo', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'salesTax', alias?: string  } 
  | { name: 'timeSheetSettings', alias?: string  } 
  | { name: 'websiteURL', alias?: string  } 
  | { name: 'addresses', alias?: string  } 
  | { name: 'contacts', alias?: string  } 
  | { name: 'companyMembers', alias?: string  } 
  | { name: 'stripeCustomerId', alias?: string  } 
  
export interface CompanyUpsertWithoutActivePlanInput {
  update?: CompanyUpdateWithoutActivePlanDataInput
  create?: CompanyCreateWithoutActivePlanInput
}
export type CompanyUpsertWithoutActivePlanInputInputObject =
  | Extract<keyof CompanyUpsertWithoutActivePlanInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PlanUpdateManyMutationInput {
  isActive?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  price?: number | null
  type?: prisma.PlanType | null
  currency?: prisma.Currency | null
}
export type PlanUpdateManyMutationInputInputObject =
  | Extract<keyof PlanUpdateManyMutationInput, string>
  | { name: 'isActive', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  
export interface SessionCreateInput {
  id?: string | null
  expires_at?: string | null
  is_active?: boolean | null
  is_archived?: boolean | null
  is_deleted?: boolean | null
  signed_at?: string | null
  user?: UserCreateOneInput | null
}
export type SessionCreateInputInputObject =
  | Extract<keyof SessionCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'expires_at', alias?: string  } 
  | { name: 'is_active', alias?: string  } 
  | { name: 'is_archived', alias?: string  } 
  | { name: 'is_deleted', alias?: string  } 
  | { name: 'signed_at', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface SessionUpdateInput {
  expires_at?: string | null
  is_active?: boolean | null
  is_archived?: boolean | null
  is_deleted?: boolean | null
  signed_at?: string | null
  user?: UserUpdateOneInput | null
}
export type SessionUpdateInputInputObject =
  | Extract<keyof SessionUpdateInput, string>
  | { name: 'expires_at', alias?: string  } 
  | { name: 'is_active', alias?: string  } 
  | { name: 'is_archived', alias?: string  } 
  | { name: 'is_deleted', alias?: string  } 
  | { name: 'signed_at', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface SessionUpdateManyMutationInput {
  expires_at?: string | null
  is_active?: boolean | null
  is_archived?: boolean | null
  is_deleted?: boolean | null
  signed_at?: string | null
}
export type SessionUpdateManyMutationInputInputObject =
  | Extract<keyof SessionUpdateManyMutationInput, string>
  | { name: 'expires_at', alias?: string  } 
  | { name: 'is_active', alias?: string  } 
  | { name: 'is_archived', alias?: string  } 
  | { name: 'is_deleted', alias?: string  } 
  | { name: 'signed_at', alias?: string  } 
  
export interface TimeSheetCreateInput {
  id?: string | null
  attachments?: AttachmentCreateManyInput | null
  company?: CompanyCreateOneInput
  endsAt?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  number?: number | null
  preview?: AttachmentCreateOneInput | null
  startsAt?: string | null
  status?: prisma.TimeSheetStatus | null
  timeSheetEntries?: TimeSheetEntryCreateManyWithoutTimeSheetInput | null
  user?: UserCreateOneInput | null
}
export type TimeSheetCreateInputInputObject =
  | Extract<keyof TimeSheetCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'timeSheetEntries', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface AttachmentCreateManyInput {
  create?: AttachmentCreateInput[]
  connect?: AttachmentWhereUniqueInput[]
}
export type AttachmentCreateManyInputInputObject =
  | Extract<keyof AttachmentCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimeSheetEntryCreateManyWithoutTimeSheetInput {
  create?: TimeSheetEntryCreateWithoutTimeSheetInput[]
  connect?: TimeSheetEntryWhereUniqueInput[]
}
export type TimeSheetEntryCreateManyWithoutTimeSheetInputInputObject =
  | Extract<keyof TimeSheetEntryCreateManyWithoutTimeSheetInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimeSheetEntryCreateWithoutTimeSheetInput {
  id?: string | null
  customer?: CustomerCreateOneInput | null
  date?: string | null
  duration?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isInvoiced?: boolean | null
  project?: ProjectCreateOneInput | null
  service?: ServiceCreateOneInput | null
}
export type TimeSheetEntryCreateWithoutTimeSheetInputInputObject =
  | Extract<keyof TimeSheetEntryCreateWithoutTimeSheetInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'duration', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isInvoiced', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  
export interface ProjectCreateOneInput {
  create?: ProjectCreateInput | null
  connect?: ProjectWhereUniqueInput | null
}
export type ProjectCreateOneInputInputObject =
  | Extract<keyof ProjectCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimeSheetUpdateInput {
  attachments?: AttachmentUpdateManyInput | null
  company?: CompanyUpdateOneRequiredInput | null
  endsAt?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  number?: number | null
  preview?: AttachmentUpdateOneInput | null
  startsAt?: string | null
  status?: prisma.TimeSheetStatus | null
  timeSheetEntries?: TimeSheetEntryUpdateManyWithoutTimeSheetInput | null
  user?: UserUpdateOneInput | null
}
export type TimeSheetUpdateInputInputObject =
  | Extract<keyof TimeSheetUpdateInput, string>
  | { name: 'attachments', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'timeSheetEntries', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface AttachmentUpdateManyInput {
  create?: AttachmentCreateInput[]
  update?: AttachmentUpdateWithWhereUniqueNestedInput[]
  upsert?: AttachmentUpsertWithWhereUniqueNestedInput[]
  delete?: AttachmentWhereUniqueInput[]
  connect?: AttachmentWhereUniqueInput[]
  set?: AttachmentWhereUniqueInput[]
  disconnect?: AttachmentWhereUniqueInput[]
  deleteMany?: AttachmentScalarWhereInput[]
  updateMany?: AttachmentUpdateManyWithWhereNestedInput[]
}
export type AttachmentUpdateManyInputInputObject =
  | Extract<keyof AttachmentUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AttachmentUpdateWithWhereUniqueNestedInput {
  where?: AttachmentWhereUniqueInput
  data?: AttachmentUpdateDataInput
}
export type AttachmentUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof AttachmentUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AttachmentUpsertWithWhereUniqueNestedInput {
  where?: AttachmentWhereUniqueInput
  update?: AttachmentUpdateDataInput
  create?: AttachmentCreateInput
}
export type AttachmentUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof AttachmentUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AttachmentScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  fileName?: string | null
  fileName_not?: string | null
  fileName_in?: string[]
  fileName_not_in?: string[]
  fileName_lt?: string | null
  fileName_lte?: string | null
  fileName_gt?: string | null
  fileName_gte?: string | null
  fileName_contains?: string | null
  fileName_not_contains?: string | null
  fileName_starts_with?: string | null
  fileName_not_starts_with?: string | null
  fileName_ends_with?: string | null
  fileName_not_ends_with?: string | null
  label?: string | null
  label_not?: string | null
  label_in?: string[]
  label_not_in?: string[]
  label_lt?: string | null
  label_lte?: string | null
  label_gt?: string | null
  label_gte?: string | null
  label_contains?: string | null
  label_not_contains?: string | null
  label_starts_with?: string | null
  label_not_starts_with?: string | null
  label_ends_with?: string | null
  label_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  s3Bucket?: string | null
  s3Bucket_not?: string | null
  s3Bucket_in?: string[]
  s3Bucket_not_in?: string[]
  s3Bucket_lt?: string | null
  s3Bucket_lte?: string | null
  s3Bucket_gt?: string | null
  s3Bucket_gte?: string | null
  s3Bucket_contains?: string | null
  s3Bucket_not_contains?: string | null
  s3Bucket_starts_with?: string | null
  s3Bucket_not_starts_with?: string | null
  s3Bucket_ends_with?: string | null
  s3Bucket_not_ends_with?: string | null
  s3Key?: string | null
  s3Key_not?: string | null
  s3Key_in?: string[]
  s3Key_not_in?: string[]
  s3Key_lt?: string | null
  s3Key_lte?: string | null
  s3Key_gt?: string | null
  s3Key_gte?: string | null
  s3Key_contains?: string | null
  s3Key_not_contains?: string | null
  s3Key_starts_with?: string | null
  s3Key_not_starts_with?: string | null
  s3Key_ends_with?: string | null
  s3Key_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: AttachmentScalarWhereInput[]
  OR?: AttachmentScalarWhereInput[]
  NOT?: AttachmentScalarWhereInput[]
}
export type AttachmentScalarWhereInputInputObject =
  | Extract<keyof AttachmentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'fileName', alias?: string  } 
  | { name: 'fileName_not', alias?: string  } 
  | { name: 'fileName_in', alias?: string  } 
  | { name: 'fileName_not_in', alias?: string  } 
  | { name: 'fileName_lt', alias?: string  } 
  | { name: 'fileName_lte', alias?: string  } 
  | { name: 'fileName_gt', alias?: string  } 
  | { name: 'fileName_gte', alias?: string  } 
  | { name: 'fileName_contains', alias?: string  } 
  | { name: 'fileName_not_contains', alias?: string  } 
  | { name: 'fileName_starts_with', alias?: string  } 
  | { name: 'fileName_not_starts_with', alias?: string  } 
  | { name: 'fileName_ends_with', alias?: string  } 
  | { name: 'fileName_not_ends_with', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'label_not', alias?: string  } 
  | { name: 'label_in', alias?: string  } 
  | { name: 'label_not_in', alias?: string  } 
  | { name: 'label_lt', alias?: string  } 
  | { name: 'label_lte', alias?: string  } 
  | { name: 'label_gt', alias?: string  } 
  | { name: 'label_gte', alias?: string  } 
  | { name: 'label_contains', alias?: string  } 
  | { name: 'label_not_contains', alias?: string  } 
  | { name: 'label_starts_with', alias?: string  } 
  | { name: 'label_not_starts_with', alias?: string  } 
  | { name: 'label_ends_with', alias?: string  } 
  | { name: 'label_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 's3Bucket', alias?: string  } 
  | { name: 's3Bucket_not', alias?: string  } 
  | { name: 's3Bucket_in', alias?: string  } 
  | { name: 's3Bucket_not_in', alias?: string  } 
  | { name: 's3Bucket_lt', alias?: string  } 
  | { name: 's3Bucket_lte', alias?: string  } 
  | { name: 's3Bucket_gt', alias?: string  } 
  | { name: 's3Bucket_gte', alias?: string  } 
  | { name: 's3Bucket_contains', alias?: string  } 
  | { name: 's3Bucket_not_contains', alias?: string  } 
  | { name: 's3Bucket_starts_with', alias?: string  } 
  | { name: 's3Bucket_not_starts_with', alias?: string  } 
  | { name: 's3Bucket_ends_with', alias?: string  } 
  | { name: 's3Bucket_not_ends_with', alias?: string  } 
  | { name: 's3Key', alias?: string  } 
  | { name: 's3Key_not', alias?: string  } 
  | { name: 's3Key_in', alias?: string  } 
  | { name: 's3Key_not_in', alias?: string  } 
  | { name: 's3Key_lt', alias?: string  } 
  | { name: 's3Key_lte', alias?: string  } 
  | { name: 's3Key_gt', alias?: string  } 
  | { name: 's3Key_gte', alias?: string  } 
  | { name: 's3Key_contains', alias?: string  } 
  | { name: 's3Key_not_contains', alias?: string  } 
  | { name: 's3Key_starts_with', alias?: string  } 
  | { name: 's3Key_not_starts_with', alias?: string  } 
  | { name: 's3Key_ends_with', alias?: string  } 
  | { name: 's3Key_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttachmentUpdateManyWithWhereNestedInput {
  where?: AttachmentScalarWhereInput
  data?: AttachmentUpdateManyDataInput
}
export type AttachmentUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AttachmentUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AttachmentUpdateManyDataInput {
  description?: string | null
  fileName?: string | null
  label?: string | null
  url?: string | null
  s3Bucket?: string | null
  s3Key?: string | null
}
export type AttachmentUpdateManyDataInputInputObject =
  | Extract<keyof AttachmentUpdateManyDataInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'fileName', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 's3Bucket', alias?: string  } 
  | { name: 's3Key', alias?: string  } 
  
export interface TimeSheetEntryUpdateManyWithoutTimeSheetInput {
  create?: TimeSheetEntryCreateWithoutTimeSheetInput[]
  delete?: TimeSheetEntryWhereUniqueInput[]
  connect?: TimeSheetEntryWhereUniqueInput[]
  set?: TimeSheetEntryWhereUniqueInput[]
  disconnect?: TimeSheetEntryWhereUniqueInput[]
  update?: TimeSheetEntryUpdateWithWhereUniqueWithoutTimeSheetInput[]
  upsert?: TimeSheetEntryUpsertWithWhereUniqueWithoutTimeSheetInput[]
  deleteMany?: TimeSheetEntryScalarWhereInput[]
  updateMany?: TimeSheetEntryUpdateManyWithWhereNestedInput[]
}
export type TimeSheetEntryUpdateManyWithoutTimeSheetInputInputObject =
  | Extract<keyof TimeSheetEntryUpdateManyWithoutTimeSheetInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TimeSheetEntryUpdateWithWhereUniqueWithoutTimeSheetInput {
  where?: TimeSheetEntryWhereUniqueInput
  data?: TimeSheetEntryUpdateWithoutTimeSheetDataInput
}
export type TimeSheetEntryUpdateWithWhereUniqueWithoutTimeSheetInputInputObject =
  | Extract<keyof TimeSheetEntryUpdateWithWhereUniqueWithoutTimeSheetInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TimeSheetEntryUpdateWithoutTimeSheetDataInput {
  customer?: CustomerUpdateOneInput | null
  date?: string | null
  duration?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isInvoiced?: boolean | null
  project?: ProjectUpdateOneInput | null
  service?: ServiceUpdateOneInput | null
}
export type TimeSheetEntryUpdateWithoutTimeSheetDataInputInputObject =
  | Extract<keyof TimeSheetEntryUpdateWithoutTimeSheetDataInput, string>
  | { name: 'customer', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'duration', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isInvoiced', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  
export interface ProjectUpdateOneInput {
  create?: ProjectCreateInput | null
  update?: ProjectUpdateDataInput | null
  upsert?: ProjectUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ProjectWhereUniqueInput | null
}
export type ProjectUpdateOneInputInputObject =
  | Extract<keyof ProjectUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ProjectUpdateDataInput {
  company?: CompanyUpdateOneRequiredInput | null
  customer?: CustomerUpdateOneInput | null
  description?: string | null
  endsAt?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  name?: string | null
  projectService?: ProjectServiceUpdateManyWithoutProjectInput | null
  startsAt?: string | null
  status?: prisma.ProjectStatus | null
}
export type ProjectUpdateDataInputInputObject =
  | Extract<keyof ProjectUpdateDataInput, string>
  | { name: 'company', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'projectService', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface ProjectUpsertNestedInput {
  update?: ProjectUpdateDataInput
  create?: ProjectCreateInput
}
export type ProjectUpsertNestedInputInputObject =
  | Extract<keyof ProjectUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TimeSheetEntryUpsertWithWhereUniqueWithoutTimeSheetInput {
  where?: TimeSheetEntryWhereUniqueInput
  update?: TimeSheetEntryUpdateWithoutTimeSheetDataInput
  create?: TimeSheetEntryCreateWithoutTimeSheetInput
}
export type TimeSheetEntryUpsertWithWhereUniqueWithoutTimeSheetInputInputObject =
  | Extract<keyof TimeSheetEntryUpsertWithWhereUniqueWithoutTimeSheetInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TimeSheetEntryScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  date?: string | null
  date_not?: string | null
  date_in?: string[]
  date_not_in?: string[]
  date_lt?: string | null
  date_lte?: string | null
  date_gt?: string | null
  date_gte?: string | null
  duration?: number | null
  duration_not?: number | null
  duration_in?: number[]
  duration_not_in?: number[]
  duration_lt?: number | null
  duration_lte?: number | null
  duration_gt?: number | null
  duration_gte?: number | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  isInvoiced?: boolean | null
  isInvoiced_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TimeSheetEntryScalarWhereInput[]
  OR?: TimeSheetEntryScalarWhereInput[]
  NOT?: TimeSheetEntryScalarWhereInput[]
}
export type TimeSheetEntryScalarWhereInputInputObject =
  | Extract<keyof TimeSheetEntryScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'date_not', alias?: string  } 
  | { name: 'date_in', alias?: string  } 
  | { name: 'date_not_in', alias?: string  } 
  | { name: 'date_lt', alias?: string  } 
  | { name: 'date_lte', alias?: string  } 
  | { name: 'date_gt', alias?: string  } 
  | { name: 'date_gte', alias?: string  } 
  | { name: 'duration', alias?: string  } 
  | { name: 'duration_not', alias?: string  } 
  | { name: 'duration_in', alias?: string  } 
  | { name: 'duration_not_in', alias?: string  } 
  | { name: 'duration_lt', alias?: string  } 
  | { name: 'duration_lte', alias?: string  } 
  | { name: 'duration_gt', alias?: string  } 
  | { name: 'duration_gte', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'isInvoiced', alias?: string  } 
  | { name: 'isInvoiced_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TimeSheetEntryUpdateManyWithWhereNestedInput {
  where?: TimeSheetEntryScalarWhereInput
  data?: TimeSheetEntryUpdateManyDataInput
}
export type TimeSheetEntryUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TimeSheetEntryUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TimeSheetEntryUpdateManyDataInput {
  date?: string | null
  duration?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isInvoiced?: boolean | null
}
export type TimeSheetEntryUpdateManyDataInputInputObject =
  | Extract<keyof TimeSheetEntryUpdateManyDataInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'duration', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isInvoiced', alias?: string  } 
  
export interface TimeSheetUpdateManyMutationInput {
  endsAt?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  number?: number | null
  startsAt?: string | null
  status?: prisma.TimeSheetStatus | null
}
export type TimeSheetUpdateManyMutationInputInputObject =
  | Extract<keyof TimeSheetUpdateManyMutationInput, string>
  | { name: 'endsAt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface AttachmentUpdateInput {
  description?: string | null
  fileName?: string | null
  label?: string | null
  url?: string | null
  s3Bucket?: string | null
  s3Key?: string | null
}
export type AttachmentUpdateInputInputObject =
  | Extract<keyof AttachmentUpdateInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'fileName', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 's3Bucket', alias?: string  } 
  | { name: 's3Key', alias?: string  } 
  
export interface AttachmentUpdateManyMutationInput {
  description?: string | null
  fileName?: string | null
  label?: string | null
  url?: string | null
  s3Bucket?: string | null
  s3Key?: string | null
}
export type AttachmentUpdateManyMutationInputInputObject =
  | Extract<keyof AttachmentUpdateManyMutationInput, string>
  | { name: 'description', alias?: string  } 
  | { name: 'fileName', alias?: string  } 
  | { name: 'label', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 's3Bucket', alias?: string  } 
  | { name: 's3Key', alias?: string  } 
  
export interface TimeSheetEntryCreateInput {
  id?: string | null
  customer?: CustomerCreateOneInput | null
  date?: string | null
  duration?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isInvoiced?: boolean | null
  project?: ProjectCreateOneInput | null
  service?: ServiceCreateOneInput | null
  timeSheet?: TimeSheetCreateOneWithoutTimeSheetEntriesInput | null
}
export type TimeSheetEntryCreateInputInputObject =
  | Extract<keyof TimeSheetEntryCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'duration', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isInvoiced', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  | { name: 'timeSheet', alias?: string  } 
  
export interface TimeSheetCreateOneWithoutTimeSheetEntriesInput {
  create?: TimeSheetCreateWithoutTimeSheetEntriesInput | null
  connect?: TimeSheetWhereUniqueInput | null
}
export type TimeSheetCreateOneWithoutTimeSheetEntriesInputInputObject =
  | Extract<keyof TimeSheetCreateOneWithoutTimeSheetEntriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimeSheetCreateWithoutTimeSheetEntriesInput {
  id?: string | null
  attachments?: AttachmentCreateManyInput | null
  company?: CompanyCreateOneInput
  endsAt?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  number?: number | null
  preview?: AttachmentCreateOneInput | null
  startsAt?: string | null
  status?: prisma.TimeSheetStatus | null
  user?: UserCreateOneInput | null
}
export type TimeSheetCreateWithoutTimeSheetEntriesInputInputObject =
  | Extract<keyof TimeSheetCreateWithoutTimeSheetEntriesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface TimeSheetEntryUpdateInput {
  customer?: CustomerUpdateOneInput | null
  date?: string | null
  duration?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isInvoiced?: boolean | null
  project?: ProjectUpdateOneInput | null
  service?: ServiceUpdateOneInput | null
  timeSheet?: TimeSheetUpdateOneWithoutTimeSheetEntriesInput | null
}
export type TimeSheetEntryUpdateInputInputObject =
  | Extract<keyof TimeSheetEntryUpdateInput, string>
  | { name: 'customer', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'duration', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isInvoiced', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  | { name: 'timeSheet', alias?: string  } 
  
export interface TimeSheetUpdateOneWithoutTimeSheetEntriesInput {
  create?: TimeSheetCreateWithoutTimeSheetEntriesInput | null
  update?: TimeSheetUpdateWithoutTimeSheetEntriesDataInput | null
  upsert?: TimeSheetUpsertWithoutTimeSheetEntriesInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TimeSheetWhereUniqueInput | null
}
export type TimeSheetUpdateOneWithoutTimeSheetEntriesInputInputObject =
  | Extract<keyof TimeSheetUpdateOneWithoutTimeSheetEntriesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimeSheetUpdateWithoutTimeSheetEntriesDataInput {
  attachments?: AttachmentUpdateManyInput | null
  company?: CompanyUpdateOneRequiredInput | null
  endsAt?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  number?: number | null
  preview?: AttachmentUpdateOneInput | null
  startsAt?: string | null
  status?: prisma.TimeSheetStatus | null
  user?: UserUpdateOneInput | null
}
export type TimeSheetUpdateWithoutTimeSheetEntriesDataInputInputObject =
  | Extract<keyof TimeSheetUpdateWithoutTimeSheetEntriesDataInput, string>
  | { name: 'attachments', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface TimeSheetUpsertWithoutTimeSheetEntriesInput {
  update?: TimeSheetUpdateWithoutTimeSheetEntriesDataInput
  create?: TimeSheetCreateWithoutTimeSheetEntriesInput
}
export type TimeSheetUpsertWithoutTimeSheetEntriesInputInputObject =
  | Extract<keyof TimeSheetUpsertWithoutTimeSheetEntriesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TimeSheetEntryUpdateManyMutationInput {
  date?: string | null
  duration?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isInvoiced?: boolean | null
}
export type TimeSheetEntryUpdateManyMutationInputInputObject =
  | Extract<keyof TimeSheetEntryUpdateManyMutationInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'duration', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isInvoiced', alias?: string  } 
  
export interface InvoiceItemEntryCreateInput {
  id?: string | null
  order?: number | null
  description?: string | null
  name?: string | null
  price?: number | null
  quantity?: number | null
  tax?: number | null
  invoice?: InvoiceCreateOneWithoutItemsInput | null
  project?: ProjectCreateOneInput | null
  service?: ServiceCreateOneInput | null
  timeSheetEntry?: TimeSheetEntryCreateOneInput | null
  timeSheet?: TimeSheetCreateOneInput | null
}
export type InvoiceItemEntryCreateInputInputObject =
  | Extract<keyof InvoiceItemEntryCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'tax', alias?: string  } 
  | { name: 'invoice', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  | { name: 'timeSheetEntry', alias?: string  } 
  | { name: 'timeSheet', alias?: string  } 
  
export interface InvoiceCreateOneWithoutItemsInput {
  create?: InvoiceCreateWithoutItemsInput | null
  connect?: InvoiceWhereUniqueInput | null
}
export type InvoiceCreateOneWithoutItemsInputInputObject =
  | Extract<keyof InvoiceCreateOneWithoutItemsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InvoiceCreateWithoutItemsInput {
  id?: string | null
  title?: string | null
  attachments?: AttachmentCreateManyInput | null
  buyer?: CustomerCreateOneInput | null
  number?: number | null
  description?: string | null
  invoiceDate?: string | null
  dueDate?: string | null
  preview?: AttachmentCreateOneInput | null
  seller?: CompanyCreateOneInput
  status?: prisma.InvoiceStatus | null
  type?: prisma.InvoiceType | null
  total?: number | null
}
export type InvoiceCreateWithoutItemsInputInputObject =
  | Extract<keyof InvoiceCreateWithoutItemsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  | { name: 'buyer', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'invoiceDate', alias?: string  } 
  | { name: 'dueDate', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'seller', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'total', alias?: string  } 
  
export interface TimeSheetEntryCreateOneInput {
  create?: TimeSheetEntryCreateInput | null
  connect?: TimeSheetEntryWhereUniqueInput | null
}
export type TimeSheetEntryCreateOneInputInputObject =
  | Extract<keyof TimeSheetEntryCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimeSheetCreateOneInput {
  create?: TimeSheetCreateInput | null
  connect?: TimeSheetWhereUniqueInput | null
}
export type TimeSheetCreateOneInputInputObject =
  | Extract<keyof TimeSheetCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InvoiceItemEntryUpdateInput {
  order?: number | null
  description?: string | null
  name?: string | null
  price?: number | null
  quantity?: number | null
  tax?: number | null
  invoice?: InvoiceUpdateOneWithoutItemsInput | null
  project?: ProjectUpdateOneInput | null
  service?: ServiceUpdateOneInput | null
  timeSheetEntry?: TimeSheetEntryUpdateOneInput | null
  timeSheet?: TimeSheetUpdateOneInput | null
}
export type InvoiceItemEntryUpdateInputInputObject =
  | Extract<keyof InvoiceItemEntryUpdateInput, string>
  | { name: 'order', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'tax', alias?: string  } 
  | { name: 'invoice', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  | { name: 'timeSheetEntry', alias?: string  } 
  | { name: 'timeSheet', alias?: string  } 
  
export interface InvoiceUpdateOneWithoutItemsInput {
  create?: InvoiceCreateWithoutItemsInput | null
  update?: InvoiceUpdateWithoutItemsDataInput | null
  upsert?: InvoiceUpsertWithoutItemsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: InvoiceWhereUniqueInput | null
}
export type InvoiceUpdateOneWithoutItemsInputInputObject =
  | Extract<keyof InvoiceUpdateOneWithoutItemsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InvoiceUpdateWithoutItemsDataInput {
  title?: string | null
  attachments?: AttachmentUpdateManyInput | null
  buyer?: CustomerUpdateOneInput | null
  number?: number | null
  description?: string | null
  invoiceDate?: string | null
  dueDate?: string | null
  preview?: AttachmentUpdateOneInput | null
  seller?: CompanyUpdateOneRequiredInput | null
  status?: prisma.InvoiceStatus | null
  type?: prisma.InvoiceType | null
  total?: number | null
}
export type InvoiceUpdateWithoutItemsDataInputInputObject =
  | Extract<keyof InvoiceUpdateWithoutItemsDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  | { name: 'buyer', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'invoiceDate', alias?: string  } 
  | { name: 'dueDate', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'seller', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'total', alias?: string  } 
  
export interface InvoiceUpsertWithoutItemsInput {
  update?: InvoiceUpdateWithoutItemsDataInput
  create?: InvoiceCreateWithoutItemsInput
}
export type InvoiceUpsertWithoutItemsInputInputObject =
  | Extract<keyof InvoiceUpsertWithoutItemsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TimeSheetEntryUpdateOneInput {
  create?: TimeSheetEntryCreateInput | null
  update?: TimeSheetEntryUpdateDataInput | null
  upsert?: TimeSheetEntryUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TimeSheetEntryWhereUniqueInput | null
}
export type TimeSheetEntryUpdateOneInputInputObject =
  | Extract<keyof TimeSheetEntryUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimeSheetEntryUpdateDataInput {
  customer?: CustomerUpdateOneInput | null
  date?: string | null
  duration?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  isInvoiced?: boolean | null
  project?: ProjectUpdateOneInput | null
  service?: ServiceUpdateOneInput | null
  timeSheet?: TimeSheetUpdateOneWithoutTimeSheetEntriesInput | null
}
export type TimeSheetEntryUpdateDataInputInputObject =
  | Extract<keyof TimeSheetEntryUpdateDataInput, string>
  | { name: 'customer', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'duration', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isInvoiced', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  | { name: 'timeSheet', alias?: string  } 
  
export interface TimeSheetEntryUpsertNestedInput {
  update?: TimeSheetEntryUpdateDataInput
  create?: TimeSheetEntryCreateInput
}
export type TimeSheetEntryUpsertNestedInputInputObject =
  | Extract<keyof TimeSheetEntryUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TimeSheetUpdateOneInput {
  create?: TimeSheetCreateInput | null
  update?: TimeSheetUpdateDataInput | null
  upsert?: TimeSheetUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TimeSheetWhereUniqueInput | null
}
export type TimeSheetUpdateOneInputInputObject =
  | Extract<keyof TimeSheetUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TimeSheetUpdateDataInput {
  attachments?: AttachmentUpdateManyInput | null
  company?: CompanyUpdateOneRequiredInput | null
  endsAt?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
  number?: number | null
  preview?: AttachmentUpdateOneInput | null
  startsAt?: string | null
  status?: prisma.TimeSheetStatus | null
  timeSheetEntries?: TimeSheetEntryUpdateManyWithoutTimeSheetInput | null
  user?: UserUpdateOneInput | null
}
export type TimeSheetUpdateDataInputInputObject =
  | Extract<keyof TimeSheetUpdateDataInput, string>
  | { name: 'attachments', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'endsAt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'startsAt', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'timeSheetEntries', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface TimeSheetUpsertNestedInput {
  update?: TimeSheetUpdateDataInput
  create?: TimeSheetCreateInput
}
export type TimeSheetUpsertNestedInputInputObject =
  | Extract<keyof TimeSheetUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InvoiceItemEntryUpdateManyMutationInput {
  order?: number | null
  description?: string | null
  name?: string | null
  price?: number | null
  quantity?: number | null
  tax?: number | null
}
export type InvoiceItemEntryUpdateManyMutationInputInputObject =
  | Extract<keyof InvoiceItemEntryUpdateManyMutationInput, string>
  | { name: 'order', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'tax', alias?: string  } 
  
export interface InvoiceCreateInput {
  id?: string | null
  title?: string | null
  attachments?: AttachmentCreateManyInput | null
  buyer?: CustomerCreateOneInput | null
  number?: number | null
  description?: string | null
  invoiceDate?: string | null
  dueDate?: string | null
  preview?: AttachmentCreateOneInput | null
  items?: InvoiceItemEntryCreateManyWithoutInvoiceInput | null
  seller?: CompanyCreateOneInput
  status?: prisma.InvoiceStatus | null
  type?: prisma.InvoiceType | null
  total?: number | null
}
export type InvoiceCreateInputInputObject =
  | Extract<keyof InvoiceCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  | { name: 'buyer', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'invoiceDate', alias?: string  } 
  | { name: 'dueDate', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'items', alias?: string  } 
  | { name: 'seller', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'total', alias?: string  } 
  
export interface InvoiceItemEntryCreateManyWithoutInvoiceInput {
  create?: InvoiceItemEntryCreateWithoutInvoiceInput[]
  connect?: InvoiceItemEntryWhereUniqueInput[]
}
export type InvoiceItemEntryCreateManyWithoutInvoiceInputInputObject =
  | Extract<keyof InvoiceItemEntryCreateManyWithoutInvoiceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InvoiceItemEntryCreateWithoutInvoiceInput {
  id?: string | null
  order?: number | null
  description?: string | null
  name?: string | null
  price?: number | null
  quantity?: number | null
  tax?: number | null
  project?: ProjectCreateOneInput | null
  service?: ServiceCreateOneInput | null
  timeSheetEntry?: TimeSheetEntryCreateOneInput | null
  timeSheet?: TimeSheetCreateOneInput | null
}
export type InvoiceItemEntryCreateWithoutInvoiceInputInputObject =
  | Extract<keyof InvoiceItemEntryCreateWithoutInvoiceInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'tax', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  | { name: 'timeSheetEntry', alias?: string  } 
  | { name: 'timeSheet', alias?: string  } 
  
export interface InvoiceUpdateInput {
  title?: string | null
  attachments?: AttachmentUpdateManyInput | null
  buyer?: CustomerUpdateOneInput | null
  number?: number | null
  description?: string | null
  invoiceDate?: string | null
  dueDate?: string | null
  preview?: AttachmentUpdateOneInput | null
  items?: InvoiceItemEntryUpdateManyWithoutInvoiceInput | null
  seller?: CompanyUpdateOneRequiredInput | null
  status?: prisma.InvoiceStatus | null
  type?: prisma.InvoiceType | null
  total?: number | null
}
export type InvoiceUpdateInputInputObject =
  | Extract<keyof InvoiceUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'attachments', alias?: string  } 
  | { name: 'buyer', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'invoiceDate', alias?: string  } 
  | { name: 'dueDate', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'items', alias?: string  } 
  | { name: 'seller', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'total', alias?: string  } 
  
export interface InvoiceItemEntryUpdateManyWithoutInvoiceInput {
  create?: InvoiceItemEntryCreateWithoutInvoiceInput[]
  delete?: InvoiceItemEntryWhereUniqueInput[]
  connect?: InvoiceItemEntryWhereUniqueInput[]
  set?: InvoiceItemEntryWhereUniqueInput[]
  disconnect?: InvoiceItemEntryWhereUniqueInput[]
  update?: InvoiceItemEntryUpdateWithWhereUniqueWithoutInvoiceInput[]
  upsert?: InvoiceItemEntryUpsertWithWhereUniqueWithoutInvoiceInput[]
  deleteMany?: InvoiceItemEntryScalarWhereInput[]
  updateMany?: InvoiceItemEntryUpdateManyWithWhereNestedInput[]
}
export type InvoiceItemEntryUpdateManyWithoutInvoiceInputInputObject =
  | Extract<keyof InvoiceItemEntryUpdateManyWithoutInvoiceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface InvoiceItemEntryUpdateWithWhereUniqueWithoutInvoiceInput {
  where?: InvoiceItemEntryWhereUniqueInput
  data?: InvoiceItemEntryUpdateWithoutInvoiceDataInput
}
export type InvoiceItemEntryUpdateWithWhereUniqueWithoutInvoiceInputInputObject =
  | Extract<keyof InvoiceItemEntryUpdateWithWhereUniqueWithoutInvoiceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface InvoiceItemEntryUpdateWithoutInvoiceDataInput {
  order?: number | null
  description?: string | null
  name?: string | null
  price?: number | null
  quantity?: number | null
  tax?: number | null
  project?: ProjectUpdateOneInput | null
  service?: ServiceUpdateOneInput | null
  timeSheetEntry?: TimeSheetEntryUpdateOneInput | null
  timeSheet?: TimeSheetUpdateOneInput | null
}
export type InvoiceItemEntryUpdateWithoutInvoiceDataInputInputObject =
  | Extract<keyof InvoiceItemEntryUpdateWithoutInvoiceDataInput, string>
  | { name: 'order', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'tax', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'service', alias?: string  } 
  | { name: 'timeSheetEntry', alias?: string  } 
  | { name: 'timeSheet', alias?: string  } 
  
export interface InvoiceItemEntryUpsertWithWhereUniqueWithoutInvoiceInput {
  where?: InvoiceItemEntryWhereUniqueInput
  update?: InvoiceItemEntryUpdateWithoutInvoiceDataInput
  create?: InvoiceItemEntryCreateWithoutInvoiceInput
}
export type InvoiceItemEntryUpsertWithWhereUniqueWithoutInvoiceInputInputObject =
  | Extract<keyof InvoiceItemEntryUpsertWithWhereUniqueWithoutInvoiceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InvoiceItemEntryScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  order?: number | null
  order_not?: number | null
  order_in?: number[]
  order_not_in?: number[]
  order_lt?: number | null
  order_lte?: number | null
  order_gt?: number | null
  order_gte?: number | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  quantity?: number | null
  quantity_not?: number | null
  quantity_in?: number[]
  quantity_not_in?: number[]
  quantity_lt?: number | null
  quantity_lte?: number | null
  quantity_gt?: number | null
  quantity_gte?: number | null
  tax?: number | null
  tax_not?: number | null
  tax_in?: number[]
  tax_not_in?: number[]
  tax_lt?: number | null
  tax_lte?: number | null
  tax_gt?: number | null
  tax_gte?: number | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: InvoiceItemEntryScalarWhereInput[]
  OR?: InvoiceItemEntryScalarWhereInput[]
  NOT?: InvoiceItemEntryScalarWhereInput[]
}
export type InvoiceItemEntryScalarWhereInputInputObject =
  | Extract<keyof InvoiceItemEntryScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'order_not', alias?: string  } 
  | { name: 'order_in', alias?: string  } 
  | { name: 'order_not_in', alias?: string  } 
  | { name: 'order_lt', alias?: string  } 
  | { name: 'order_lte', alias?: string  } 
  | { name: 'order_gt', alias?: string  } 
  | { name: 'order_gte', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'quantity_not', alias?: string  } 
  | { name: 'quantity_in', alias?: string  } 
  | { name: 'quantity_not_in', alias?: string  } 
  | { name: 'quantity_lt', alias?: string  } 
  | { name: 'quantity_lte', alias?: string  } 
  | { name: 'quantity_gt', alias?: string  } 
  | { name: 'quantity_gte', alias?: string  } 
  | { name: 'tax', alias?: string  } 
  | { name: 'tax_not', alias?: string  } 
  | { name: 'tax_in', alias?: string  } 
  | { name: 'tax_not_in', alias?: string  } 
  | { name: 'tax_lt', alias?: string  } 
  | { name: 'tax_lte', alias?: string  } 
  | { name: 'tax_gt', alias?: string  } 
  | { name: 'tax_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InvoiceItemEntryUpdateManyWithWhereNestedInput {
  where?: InvoiceItemEntryScalarWhereInput
  data?: InvoiceItemEntryUpdateManyDataInput
}
export type InvoiceItemEntryUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof InvoiceItemEntryUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface InvoiceItemEntryUpdateManyDataInput {
  order?: number | null
  description?: string | null
  name?: string | null
  price?: number | null
  quantity?: number | null
  tax?: number | null
}
export type InvoiceItemEntryUpdateManyDataInputInputObject =
  | Extract<keyof InvoiceItemEntryUpdateManyDataInput, string>
  | { name: 'order', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'quantity', alias?: string  } 
  | { name: 'tax', alias?: string  } 
  
export interface InvoiceUpdateManyMutationInput {
  title?: string | null
  number?: number | null
  description?: string | null
  invoiceDate?: string | null
  dueDate?: string | null
  status?: prisma.InvoiceStatus | null
  type?: prisma.InvoiceType | null
  total?: number | null
}
export type InvoiceUpdateManyMutationInputInputObject =
  | Extract<keyof InvoiceUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'number', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'invoiceDate', alias?: string  } 
  | { name: 'dueDate', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'total', alias?: string  } 
  
export interface MainAccountCreateInput {
  id?: string | null
  code?: string
  name?: string
  description?: string | null
  type?: prisma.MainAccountType
  ConsTaxFree?: boolean | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type MainAccountCreateInputInputObject =
  | Extract<keyof MainAccountCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'ConsTaxFree', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface MainAccountUpdateInput {
  code?: string | null
  name?: string | null
  description?: string | null
  type?: prisma.MainAccountType | null
  ConsTaxFree?: boolean | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type MainAccountUpdateInputInputObject =
  | Extract<keyof MainAccountUpdateInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'ConsTaxFree', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface MainAccountUpdateManyMutationInput {
  code?: string | null
  name?: string | null
  description?: string | null
  type?: prisma.MainAccountType | null
  ConsTaxFree?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type MainAccountUpdateManyMutationInputInputObject =
  | Extract<keyof MainAccountUpdateManyMutationInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'ConsTaxFree', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface LedgerJournalCreateInput {
  id?: string | null
  total?: number | null
  description?: string | null
  currency?: prisma.Currency
  includeConsTax?: boolean
  posted?: boolean
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type LedgerJournalCreateInputInputObject =
  | Extract<keyof LedgerJournalCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'total', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'includeConsTax', alias?: string  } 
  | { name: 'posted', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface LedgerJournalUpdateInput {
  total?: number | null
  description?: string | null
  currency?: prisma.Currency | null
  includeConsTax?: boolean | null
  posted?: boolean | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type LedgerJournalUpdateInputInputObject =
  | Extract<keyof LedgerJournalUpdateInput, string>
  | { name: 'total', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'includeConsTax', alias?: string  } 
  | { name: 'posted', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface LedgerJournalUpdateManyMutationInput {
  total?: number | null
  description?: string | null
  currency?: prisma.Currency | null
  includeConsTax?: boolean | null
  posted?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type LedgerJournalUpdateManyMutationInputInputObject =
  | Extract<keyof LedgerJournalUpdateManyMutationInput, string>
  | { name: 'total', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'includeConsTax', alias?: string  } 
  | { name: 'posted', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface LedgerTransactionCreateInput {
  id?: string | null
  mainAccount?: MainAccountCreateOneInput
  ledgerJournal?: LedgerJournalCreateOneInput
  drcr?: prisma.DrCr
  amount?: number
  currency?: prisma.Currency
  date?: string
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type LedgerTransactionCreateInputInputObject =
  | Extract<keyof LedgerTransactionCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'mainAccount', alias?: string  } 
  | { name: 'ledgerJournal', alias?: string  } 
  | { name: 'drcr', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface MainAccountCreateOneInput {
  create?: MainAccountCreateInput | null
  connect?: MainAccountWhereUniqueInput | null
}
export type MainAccountCreateOneInputInputObject =
  | Extract<keyof MainAccountCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LedgerJournalCreateOneInput {
  create?: LedgerJournalCreateInput | null
  connect?: LedgerJournalWhereUniqueInput | null
}
export type LedgerJournalCreateOneInputInputObject =
  | Extract<keyof LedgerJournalCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LedgerTransactionUpdateInput {
  mainAccount?: MainAccountUpdateOneRequiredInput | null
  ledgerJournal?: LedgerJournalUpdateOneRequiredInput | null
  drcr?: prisma.DrCr | null
  amount?: number | null
  currency?: prisma.Currency | null
  date?: string | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type LedgerTransactionUpdateInputInputObject =
  | Extract<keyof LedgerTransactionUpdateInput, string>
  | { name: 'mainAccount', alias?: string  } 
  | { name: 'ledgerJournal', alias?: string  } 
  | { name: 'drcr', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface MainAccountUpdateOneRequiredInput {
  create?: MainAccountCreateInput | null
  update?: MainAccountUpdateDataInput | null
  upsert?: MainAccountUpsertNestedInput | null
  connect?: MainAccountWhereUniqueInput | null
}
export type MainAccountUpdateOneRequiredInputInputObject =
  | Extract<keyof MainAccountUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MainAccountUpdateDataInput {
  code?: string | null
  name?: string | null
  description?: string | null
  type?: prisma.MainAccountType | null
  ConsTaxFree?: boolean | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type MainAccountUpdateDataInputInputObject =
  | Extract<keyof MainAccountUpdateDataInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'ConsTaxFree', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface MainAccountUpsertNestedInput {
  update?: MainAccountUpdateDataInput
  create?: MainAccountCreateInput
}
export type MainAccountUpsertNestedInputInputObject =
  | Extract<keyof MainAccountUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface LedgerJournalUpdateOneRequiredInput {
  create?: LedgerJournalCreateInput | null
  update?: LedgerJournalUpdateDataInput | null
  upsert?: LedgerJournalUpsertNestedInput | null
  connect?: LedgerJournalWhereUniqueInput | null
}
export type LedgerJournalUpdateOneRequiredInputInputObject =
  | Extract<keyof LedgerJournalUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LedgerJournalUpdateDataInput {
  total?: number | null
  description?: string | null
  currency?: prisma.Currency | null
  includeConsTax?: boolean | null
  posted?: boolean | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type LedgerJournalUpdateDataInputInputObject =
  | Extract<keyof LedgerJournalUpdateDataInput, string>
  | { name: 'total', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'includeConsTax', alias?: string  } 
  | { name: 'posted', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface LedgerJournalUpsertNestedInput {
  update?: LedgerJournalUpdateDataInput
  create?: LedgerJournalCreateInput
}
export type LedgerJournalUpsertNestedInputInputObject =
  | Extract<keyof LedgerJournalUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface LedgerTransactionUpdateManyMutationInput {
  drcr?: prisma.DrCr | null
  amount?: number | null
  currency?: prisma.Currency | null
  date?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type LedgerTransactionUpdateManyMutationInputInputObject =
  | Extract<keyof LedgerTransactionUpdateManyMutationInput, string>
  | { name: 'drcr', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface LedgerPostingCreateInput {
  id?: string | null
  postingType?: prisma.PostingType | null
  mainAccount?: MainAccountCreateOneInput | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type LedgerPostingCreateInputInputObject =
  | Extract<keyof LedgerPostingCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'postingType', alias?: string  } 
  | { name: 'mainAccount', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface LedgerPostingUpdateInput {
  postingType?: prisma.PostingType | null
  mainAccount?: MainAccountUpdateOneInput | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type LedgerPostingUpdateInputInputObject =
  | Extract<keyof LedgerPostingUpdateInput, string>
  | { name: 'postingType', alias?: string  } 
  | { name: 'mainAccount', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface MainAccountUpdateOneInput {
  create?: MainAccountCreateInput | null
  update?: MainAccountUpdateDataInput | null
  upsert?: MainAccountUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: MainAccountWhereUniqueInput | null
}
export type MainAccountUpdateOneInputInputObject =
  | Extract<keyof MainAccountUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LedgerPostingUpdateManyMutationInput {
  postingType?: prisma.PostingType | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type LedgerPostingUpdateManyMutationInputInputObject =
  | Extract<keyof LedgerPostingUpdateManyMutationInput, string>
  | { name: 'postingType', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface BankCreateInput {
  id?: string | null
  name?: string | null
  institution?: string | null
  bsb?: string | null
  accountNumber?: string | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type BankCreateInputInputObject =
  | Extract<keyof BankCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'institution', alias?: string  } 
  | { name: 'bsb', alias?: string  } 
  | { name: 'accountNumber', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface BankUpdateInput {
  name?: string | null
  institution?: string | null
  bsb?: string | null
  accountNumber?: string | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type BankUpdateInputInputObject =
  | Extract<keyof BankUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'institution', alias?: string  } 
  | { name: 'bsb', alias?: string  } 
  | { name: 'accountNumber', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface BankUpdateManyMutationInput {
  name?: string | null
  institution?: string | null
  bsb?: string | null
  accountNumber?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type BankUpdateManyMutationInputInputObject =
  | Extract<keyof BankUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'institution', alias?: string  } 
  | { name: 'bsb', alias?: string  } 
  | { name: 'accountNumber', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface BankTransactionCreateInput {
  id?: string | null
  transactionDate?: string
  amount?: number
  description?: string | null
  posted?: boolean | null
  ledgerJournal?: LedgerJournalCreateOneInput | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type BankTransactionCreateInputInputObject =
  | Extract<keyof BankTransactionCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'transactionDate', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'posted', alias?: string  } 
  | { name: 'ledgerJournal', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface BankTransactionUpdateInput {
  transactionDate?: string | null
  amount?: number | null
  description?: string | null
  posted?: boolean | null
  ledgerJournal?: LedgerJournalUpdateOneInput | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type BankTransactionUpdateInputInputObject =
  | Extract<keyof BankTransactionUpdateInput, string>
  | { name: 'transactionDate', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'posted', alias?: string  } 
  | { name: 'ledgerJournal', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface LedgerJournalUpdateOneInput {
  create?: LedgerJournalCreateInput | null
  update?: LedgerJournalUpdateDataInput | null
  upsert?: LedgerJournalUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: LedgerJournalWhereUniqueInput | null
}
export type LedgerJournalUpdateOneInputInputObject =
  | Extract<keyof LedgerJournalUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BankTransactionUpdateManyMutationInput {
  transactionDate?: string | null
  amount?: number | null
  description?: string | null
  posted?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type BankTransactionUpdateManyMutationInputInputObject =
  | Extract<keyof BankTransactionUpdateManyMutationInput, string>
  | { name: 'transactionDate', alias?: string  } 
  | { name: 'amount', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'posted', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface WareHouseCreateInput {
  id?: string | null
  name?: string | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type WareHouseCreateInputInputObject =
  | Extract<keyof WareHouseCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface WareHouseUpdateInput {
  name?: string | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type WareHouseUpdateInputInputObject =
  | Extract<keyof WareHouseUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface WareHouseUpdateManyMutationInput {
  name?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type WareHouseUpdateManyMutationInputInputObject =
  | Extract<keyof WareHouseUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface InventoryCreateInput {
  id?: string | null
  name?: string | null
  inventoryModel?: prisma.InventoryModel | null
  uom?: prisma.UOM | null
  price?: number | null
  SellingPrice?: number | null
  Barcode?: string | null
  Taxable?: boolean | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type InventoryCreateInputInputObject =
  | Extract<keyof InventoryCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'inventoryModel', alias?: string  } 
  | { name: 'uom', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'SellingPrice', alias?: string  } 
  | { name: 'Barcode', alias?: string  } 
  | { name: 'Taxable', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface InventoryUpdateInput {
  name?: string | null
  inventoryModel?: prisma.InventoryModel | null
  uom?: prisma.UOM | null
  price?: number | null
  SellingPrice?: number | null
  Barcode?: string | null
  Taxable?: boolean | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type InventoryUpdateInputInputObject =
  | Extract<keyof InventoryUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'inventoryModel', alias?: string  } 
  | { name: 'uom', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'SellingPrice', alias?: string  } 
  | { name: 'Barcode', alias?: string  } 
  | { name: 'Taxable', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface InventoryUpdateManyMutationInput {
  name?: string | null
  inventoryModel?: prisma.InventoryModel | null
  uom?: prisma.UOM | null
  price?: number | null
  SellingPrice?: number | null
  Barcode?: string | null
  Taxable?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type InventoryUpdateManyMutationInputInputObject =
  | Extract<keyof InventoryUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'inventoryModel', alias?: string  } 
  | { name: 'uom', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'SellingPrice', alias?: string  } 
  | { name: 'Barcode', alias?: string  } 
  | { name: 'Taxable', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SupplierCreateInput {
  id?: string | null
  name?: string | null
  address?: AddressCreateManyInput | null
  termsOfPayment?: prisma.SupplierTermsOfPayment | null
  bankAccount?: undefined | null
  emailAddressForRemittance?: string | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type SupplierCreateInputInputObject =
  | Extract<keyof SupplierCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'termsOfPayment', alias?: string  } 
  | { name: 'bankAccount', alias?: string  } 
  | { name: 'emailAddressForRemittance', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SupplierUpdateInput {
  name?: string | null
  address?: AddressUpdateManyInput | null
  termsOfPayment?: prisma.SupplierTermsOfPayment | null
  bankAccount?: undefined | null
  emailAddressForRemittance?: string | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type SupplierUpdateInputInputObject =
  | Extract<keyof SupplierUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'termsOfPayment', alias?: string  } 
  | { name: 'bankAccount', alias?: string  } 
  | { name: 'emailAddressForRemittance', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SupplierUpdateManyMutationInput {
  name?: string | null
  termsOfPayment?: prisma.SupplierTermsOfPayment | null
  bankAccount?: undefined | null
  emailAddressForRemittance?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type SupplierUpdateManyMutationInputInputObject =
  | Extract<keyof SupplierUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'termsOfPayment', alias?: string  } 
  | { name: 'bankAccount', alias?: string  } 
  | { name: 'emailAddressForRemittance', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface AssetGroupCreateInput {
  id?: string | null
  name?: string | null
  depreciationType?: prisma.AssetGroupDepreciationType | null
  usefulLife?: number | null
  deprMainAccount?: MainAccountCreateOneInput | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type AssetGroupCreateInputInputObject =
  | Extract<keyof AssetGroupCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'depreciationType', alias?: string  } 
  | { name: 'usefulLife', alias?: string  } 
  | { name: 'deprMainAccount', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface AssetGroupUpdateInput {
  name?: string | null
  depreciationType?: prisma.AssetGroupDepreciationType | null
  usefulLife?: number | null
  deprMainAccount?: MainAccountUpdateOneInput | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type AssetGroupUpdateInputInputObject =
  | Extract<keyof AssetGroupUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'depreciationType', alias?: string  } 
  | { name: 'usefulLife', alias?: string  } 
  | { name: 'deprMainAccount', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface AssetGroupUpdateManyMutationInput {
  name?: string | null
  depreciationType?: prisma.AssetGroupDepreciationType | null
  usefulLife?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type AssetGroupUpdateManyMutationInputInputObject =
  | Extract<keyof AssetGroupUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'depreciationType', alias?: string  } 
  | { name: 'usefulLife', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface AssetCreateInput {
  id?: string | null
  name?: string | null
  assetGroup?: AssetGroupCreateOneInput | null
  dateOfAquisition?: string | null
  aquisitionPrice?: number | null
  netBookValue?: number | null
  depreciation?: number | null
  salvageValue?: number | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type AssetCreateInputInputObject =
  | Extract<keyof AssetCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'assetGroup', alias?: string  } 
  | { name: 'dateOfAquisition', alias?: string  } 
  | { name: 'aquisitionPrice', alias?: string  } 
  | { name: 'netBookValue', alias?: string  } 
  | { name: 'depreciation', alias?: string  } 
  | { name: 'salvageValue', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface AssetGroupCreateOneInput {
  create?: AssetGroupCreateInput | null
  connect?: AssetGroupWhereUniqueInput | null
}
export type AssetGroupCreateOneInputInputObject =
  | Extract<keyof AssetGroupCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AssetUpdateInput {
  name?: string | null
  assetGroup?: AssetGroupUpdateOneInput | null
  dateOfAquisition?: string | null
  aquisitionPrice?: number | null
  netBookValue?: number | null
  depreciation?: number | null
  salvageValue?: number | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type AssetUpdateInputInputObject =
  | Extract<keyof AssetUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'assetGroup', alias?: string  } 
  | { name: 'dateOfAquisition', alias?: string  } 
  | { name: 'aquisitionPrice', alias?: string  } 
  | { name: 'netBookValue', alias?: string  } 
  | { name: 'depreciation', alias?: string  } 
  | { name: 'salvageValue', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface AssetGroupUpdateOneInput {
  create?: AssetGroupCreateInput | null
  update?: AssetGroupUpdateDataInput | null
  upsert?: AssetGroupUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: AssetGroupWhereUniqueInput | null
}
export type AssetGroupUpdateOneInputInputObject =
  | Extract<keyof AssetGroupUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AssetGroupUpdateDataInput {
  name?: string | null
  depreciationType?: prisma.AssetGroupDepreciationType | null
  usefulLife?: number | null
  deprMainAccount?: MainAccountUpdateOneInput | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type AssetGroupUpdateDataInputInputObject =
  | Extract<keyof AssetGroupUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'depreciationType', alias?: string  } 
  | { name: 'usefulLife', alias?: string  } 
  | { name: 'deprMainAccount', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface AssetGroupUpsertNestedInput {
  update?: AssetGroupUpdateDataInput
  create?: AssetGroupCreateInput
}
export type AssetGroupUpsertNestedInputInputObject =
  | Extract<keyof AssetGroupUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AssetUpdateManyMutationInput {
  name?: string | null
  dateOfAquisition?: string | null
  aquisitionPrice?: number | null
  netBookValue?: number | null
  depreciation?: number | null
  salvageValue?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type AssetUpdateManyMutationInputInputObject =
  | Extract<keyof AssetUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'dateOfAquisition', alias?: string  } 
  | { name: 'aquisitionPrice', alias?: string  } 
  | { name: 'netBookValue', alias?: string  } 
  | { name: 'depreciation', alias?: string  } 
  | { name: 'salvageValue', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PurchaseOrderCreateInput {
  id?: string | null
  pbsOrganisation?: string | null
  date?: string | null
  orderer?: UserCreateOneInput | null
  status?: prisma.PoStatus | null
  supplier?: SupplierCreateOneInput | null
  isPbsPO?: boolean | null
  poNumber?: number
  preview?: AttachmentCreateOneInput | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PurchaseOrderCreateInputInputObject =
  | Extract<keyof PurchaseOrderCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'pbsOrganisation', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'orderer', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'supplier', alias?: string  } 
  | { name: 'isPbsPO', alias?: string  } 
  | { name: 'poNumber', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SupplierCreateOneInput {
  create?: SupplierCreateInput | null
  connect?: SupplierWhereUniqueInput | null
}
export type SupplierCreateOneInputInputObject =
  | Extract<keyof SupplierCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PurchaseOrderUpdateInput {
  pbsOrganisation?: string | null
  date?: string | null
  orderer?: UserUpdateOneInput | null
  status?: prisma.PoStatus | null
  supplier?: SupplierUpdateOneInput | null
  isPbsPO?: boolean | null
  poNumber?: number | null
  preview?: AttachmentUpdateOneInput | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PurchaseOrderUpdateInputInputObject =
  | Extract<keyof PurchaseOrderUpdateInput, string>
  | { name: 'pbsOrganisation', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'orderer', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'supplier', alias?: string  } 
  | { name: 'isPbsPO', alias?: string  } 
  | { name: 'poNumber', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SupplierUpdateOneInput {
  create?: SupplierCreateInput | null
  update?: SupplierUpdateDataInput | null
  upsert?: SupplierUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: SupplierWhereUniqueInput | null
}
export type SupplierUpdateOneInputInputObject =
  | Extract<keyof SupplierUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SupplierUpdateDataInput {
  name?: string | null
  address?: AddressUpdateManyInput | null
  termsOfPayment?: prisma.SupplierTermsOfPayment | null
  bankAccount?: undefined | null
  emailAddressForRemittance?: string | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type SupplierUpdateDataInputInputObject =
  | Extract<keyof SupplierUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'termsOfPayment', alias?: string  } 
  | { name: 'bankAccount', alias?: string  } 
  | { name: 'emailAddressForRemittance', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SupplierUpsertNestedInput {
  update?: SupplierUpdateDataInput
  create?: SupplierCreateInput
}
export type SupplierUpsertNestedInputInputObject =
  | Extract<keyof SupplierUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PurchaseOrderUpdateManyMutationInput {
  pbsOrganisation?: string | null
  date?: string | null
  status?: prisma.PoStatus | null
  isPbsPO?: boolean | null
  poNumber?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PurchaseOrderUpdateManyMutationInputInputObject =
  | Extract<keyof PurchaseOrderUpdateManyMutationInput, string>
  | { name: 'pbsOrganisation', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'isPbsPO', alias?: string  } 
  | { name: 'poNumber', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PoReceiptCreateInput {
  id?: string | null
  receiptNumber?: string | null
  purchaseOrder?: PurchaseOrderCreateOneInput | null
  receiptDate?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PoReceiptCreateInputInputObject =
  | Extract<keyof PoReceiptCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'receiptNumber', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'receiptDate', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PurchaseOrderCreateOneInput {
  create?: PurchaseOrderCreateInput | null
  connect?: PurchaseOrderWhereUniqueInput | null
}
export type PurchaseOrderCreateOneInputInputObject =
  | Extract<keyof PurchaseOrderCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PoReceiptUpdateInput {
  receiptNumber?: string | null
  purchaseOrder?: PurchaseOrderUpdateOneInput | null
  receiptDate?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PoReceiptUpdateInputInputObject =
  | Extract<keyof PoReceiptUpdateInput, string>
  | { name: 'receiptNumber', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'receiptDate', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PurchaseOrderUpdateOneInput {
  create?: PurchaseOrderCreateInput | null
  update?: PurchaseOrderUpdateDataInput | null
  upsert?: PurchaseOrderUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: PurchaseOrderWhereUniqueInput | null
}
export type PurchaseOrderUpdateOneInputInputObject =
  | Extract<keyof PurchaseOrderUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PurchaseOrderUpdateDataInput {
  pbsOrganisation?: string | null
  date?: string | null
  orderer?: UserUpdateOneInput | null
  status?: prisma.PoStatus | null
  supplier?: SupplierUpdateOneInput | null
  isPbsPO?: boolean | null
  poNumber?: number | null
  preview?: AttachmentUpdateOneInput | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PurchaseOrderUpdateDataInputInputObject =
  | Extract<keyof PurchaseOrderUpdateDataInput, string>
  | { name: 'pbsOrganisation', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'orderer', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'supplier', alias?: string  } 
  | { name: 'isPbsPO', alias?: string  } 
  | { name: 'poNumber', alias?: string  } 
  | { name: 'preview', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PurchaseOrderUpsertNestedInput {
  update?: PurchaseOrderUpdateDataInput
  create?: PurchaseOrderCreateInput
}
export type PurchaseOrderUpsertNestedInputInputObject =
  | Extract<keyof PurchaseOrderUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PoReceiptUpdateManyMutationInput {
  receiptNumber?: string | null
  receiptDate?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PoReceiptUpdateManyMutationInputInputObject =
  | Extract<keyof PoReceiptUpdateManyMutationInput, string>
  | { name: 'receiptNumber', alias?: string  } 
  | { name: 'receiptDate', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface InventoryOnHandCreateInput {
  id?: string | null
  date?: string | null
  item?: InventoryCreateOneInput | null
  pbsDrug?: string | null
  onHandQty?: number | null
  purchaseOrder?: PurchaseOrderCreateOneInput | null
  warehouse?: WareHouseCreateOneInput | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type InventoryOnHandCreateInputInputObject =
  | Extract<keyof InventoryOnHandCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'date', alias?: string  } 
  | { name: 'item', alias?: string  } 
  | { name: 'pbsDrug', alias?: string  } 
  | { name: 'onHandQty', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'warehouse', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface InventoryCreateOneInput {
  create?: InventoryCreateInput | null
  connect?: InventoryWhereUniqueInput | null
}
export type InventoryCreateOneInputInputObject =
  | Extract<keyof InventoryCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WareHouseCreateOneInput {
  create?: WareHouseCreateInput | null
  connect?: WareHouseWhereUniqueInput | null
}
export type WareHouseCreateOneInputInputObject =
  | Extract<keyof WareHouseCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InventoryOnHandUpdateInput {
  date?: string | null
  item?: InventoryUpdateOneInput | null
  pbsDrug?: string | null
  onHandQty?: number | null
  purchaseOrder?: PurchaseOrderUpdateOneInput | null
  warehouse?: WareHouseUpdateOneInput | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type InventoryOnHandUpdateInputInputObject =
  | Extract<keyof InventoryOnHandUpdateInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'item', alias?: string  } 
  | { name: 'pbsDrug', alias?: string  } 
  | { name: 'onHandQty', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'warehouse', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface InventoryUpdateOneInput {
  create?: InventoryCreateInput | null
  update?: InventoryUpdateDataInput | null
  upsert?: InventoryUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: InventoryWhereUniqueInput | null
}
export type InventoryUpdateOneInputInputObject =
  | Extract<keyof InventoryUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface InventoryUpdateDataInput {
  name?: string | null
  inventoryModel?: prisma.InventoryModel | null
  uom?: prisma.UOM | null
  price?: number | null
  SellingPrice?: number | null
  Barcode?: string | null
  Taxable?: boolean | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type InventoryUpdateDataInputInputObject =
  | Extract<keyof InventoryUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'inventoryModel', alias?: string  } 
  | { name: 'uom', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'SellingPrice', alias?: string  } 
  | { name: 'Barcode', alias?: string  } 
  | { name: 'Taxable', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface InventoryUpsertNestedInput {
  update?: InventoryUpdateDataInput
  create?: InventoryCreateInput
}
export type InventoryUpsertNestedInputInputObject =
  | Extract<keyof InventoryUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface WareHouseUpdateOneInput {
  create?: WareHouseCreateInput | null
  update?: WareHouseUpdateDataInput | null
  upsert?: WareHouseUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: WareHouseWhereUniqueInput | null
}
export type WareHouseUpdateOneInputInputObject =
  | Extract<keyof WareHouseUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface WareHouseUpdateDataInput {
  name?: string | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type WareHouseUpdateDataInputInputObject =
  | Extract<keyof WareHouseUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface WareHouseUpsertNestedInput {
  update?: WareHouseUpdateDataInput
  create?: WareHouseCreateInput
}
export type WareHouseUpsertNestedInputInputObject =
  | Extract<keyof WareHouseUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface InventoryOnHandUpdateManyMutationInput {
  date?: string | null
  pbsDrug?: string | null
  onHandQty?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type InventoryOnHandUpdateManyMutationInputInputObject =
  | Extract<keyof InventoryOnHandUpdateManyMutationInput, string>
  | { name: 'date', alias?: string  } 
  | { name: 'pbsDrug', alias?: string  } 
  | { name: 'onHandQty', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PurchaseOrderLineCreateInput {
  id?: string | null
  item?: InventoryCreateOneInput | null
  pbsDrug?: string | null
  qty?: number | null
  unit?: prisma.UOM | null
  unitPrice?: number | null
  site?: WareHouseCreateOneInput | null
  purchaseOrder?: PurchaseOrderCreateOneInput | null
  poReceipt?: PoReceiptCreateOneInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PurchaseOrderLineCreateInputInputObject =
  | Extract<keyof PurchaseOrderLineCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'item', alias?: string  } 
  | { name: 'pbsDrug', alias?: string  } 
  | { name: 'qty', alias?: string  } 
  | { name: 'unit', alias?: string  } 
  | { name: 'unitPrice', alias?: string  } 
  | { name: 'site', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'poReceipt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PoReceiptCreateOneInput {
  create?: PoReceiptCreateInput | null
  connect?: PoReceiptWhereUniqueInput | null
}
export type PoReceiptCreateOneInputInputObject =
  | Extract<keyof PoReceiptCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PurchaseOrderLineUpdateInput {
  item?: InventoryUpdateOneInput | null
  pbsDrug?: string | null
  qty?: number | null
  unit?: prisma.UOM | null
  unitPrice?: number | null
  site?: WareHouseUpdateOneInput | null
  purchaseOrder?: PurchaseOrderUpdateOneInput | null
  poReceipt?: PoReceiptUpdateOneInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PurchaseOrderLineUpdateInputInputObject =
  | Extract<keyof PurchaseOrderLineUpdateInput, string>
  | { name: 'item', alias?: string  } 
  | { name: 'pbsDrug', alias?: string  } 
  | { name: 'qty', alias?: string  } 
  | { name: 'unit', alias?: string  } 
  | { name: 'unitPrice', alias?: string  } 
  | { name: 'site', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'poReceipt', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PoReceiptUpdateOneInput {
  create?: PoReceiptCreateInput | null
  update?: PoReceiptUpdateDataInput | null
  upsert?: PoReceiptUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: PoReceiptWhereUniqueInput | null
}
export type PoReceiptUpdateOneInputInputObject =
  | Extract<keyof PoReceiptUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PoReceiptUpdateDataInput {
  receiptNumber?: string | null
  purchaseOrder?: PurchaseOrderUpdateOneInput | null
  receiptDate?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PoReceiptUpdateDataInputInputObject =
  | Extract<keyof PoReceiptUpdateDataInput, string>
  | { name: 'receiptNumber', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'receiptDate', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PoReceiptUpsertNestedInput {
  update?: PoReceiptUpdateDataInput
  create?: PoReceiptCreateInput
}
export type PoReceiptUpsertNestedInputInputObject =
  | Extract<keyof PoReceiptUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PurchaseOrderLineUpdateManyMutationInput {
  pbsDrug?: string | null
  qty?: number | null
  unit?: prisma.UOM | null
  unitPrice?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PurchaseOrderLineUpdateManyMutationInputInputObject =
  | Extract<keyof PurchaseOrderLineUpdateManyMutationInput, string>
  | { name: 'pbsDrug', alias?: string  } 
  | { name: 'qty', alias?: string  } 
  | { name: 'unit', alias?: string  } 
  | { name: 'unitPrice', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface ApInvoiceCreateInput {
  id?: string | null
  status?: prisma.ApInvoiceStatus | null
  invoiceNumber?: string | null
  purchaseOrder?: PurchaseOrderCreateOneInput | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type ApInvoiceCreateInputInputObject =
  | Extract<keyof ApInvoiceCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'invoiceNumber', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface ApInvoiceUpdateInput {
  status?: prisma.ApInvoiceStatus | null
  invoiceNumber?: string | null
  purchaseOrder?: PurchaseOrderUpdateOneInput | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type ApInvoiceUpdateInputInputObject =
  | Extract<keyof ApInvoiceUpdateInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'invoiceNumber', alias?: string  } 
  | { name: 'purchaseOrder', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface ApInvoiceUpdateManyMutationInput {
  status?: prisma.ApInvoiceStatus | null
  invoiceNumber?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type ApInvoiceUpdateManyMutationInputInputObject =
  | Extract<keyof ApInvoiceUpdateManyMutationInput, string>
  | { name: 'status', alias?: string  } 
  | { name: 'invoiceNumber', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SalesOrderCreateInput {
  id?: string | null
  customer?: CustomerCreateOneInput | null
  transactionDate?: string | null
  currency?: prisma.Currency | null
  company?: CompanyCreateOneInput
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type SalesOrderCreateInputInputObject =
  | Extract<keyof SalesOrderCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'transactionDate', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SalesOrderUpdateInput {
  customer?: CustomerUpdateOneInput | null
  transactionDate?: string | null
  currency?: prisma.Currency | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type SalesOrderUpdateInputInputObject =
  | Extract<keyof SalesOrderUpdateInput, string>
  | { name: 'customer', alias?: string  } 
  | { name: 'transactionDate', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SalesOrderUpdateManyMutationInput {
  transactionDate?: string | null
  currency?: prisma.Currency | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type SalesOrderUpdateManyMutationInputInputObject =
  | Extract<keyof SalesOrderUpdateManyMutationInput, string>
  | { name: 'transactionDate', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SalesOrderLineCreateInput {
  id?: string | null
  salesOrder?: SalesOrderCreateOneInput | null
  inventory?: InventoryCreateOneInput | null
  qty?: number | null
  price?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type SalesOrderLineCreateInputInputObject =
  | Extract<keyof SalesOrderLineCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'salesOrder', alias?: string  } 
  | { name: 'inventory', alias?: string  } 
  | { name: 'qty', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SalesOrderCreateOneInput {
  create?: SalesOrderCreateInput | null
  connect?: SalesOrderWhereUniqueInput | null
}
export type SalesOrderCreateOneInputInputObject =
  | Extract<keyof SalesOrderCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SalesOrderLineUpdateInput {
  salesOrder?: SalesOrderUpdateOneInput | null
  inventory?: InventoryUpdateOneInput | null
  qty?: number | null
  price?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type SalesOrderLineUpdateInputInputObject =
  | Extract<keyof SalesOrderLineUpdateInput, string>
  | { name: 'salesOrder', alias?: string  } 
  | { name: 'inventory', alias?: string  } 
  | { name: 'qty', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SalesOrderUpdateOneInput {
  create?: SalesOrderCreateInput | null
  update?: SalesOrderUpdateDataInput | null
  upsert?: SalesOrderUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: SalesOrderWhereUniqueInput | null
}
export type SalesOrderUpdateOneInputInputObject =
  | Extract<keyof SalesOrderUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SalesOrderUpdateDataInput {
  customer?: CustomerUpdateOneInput | null
  transactionDate?: string | null
  currency?: prisma.Currency | null
  company?: CompanyUpdateOneRequiredInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type SalesOrderUpdateDataInputInputObject =
  | Extract<keyof SalesOrderUpdateDataInput, string>
  | { name: 'customer', alias?: string  } 
  | { name: 'transactionDate', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface SalesOrderUpsertNestedInput {
  update?: SalesOrderUpdateDataInput
  create?: SalesOrderCreateInput
}
export type SalesOrderUpsertNestedInputInputObject =
  | Extract<keyof SalesOrderUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SalesOrderLineUpdateManyMutationInput {
  qty?: number | null
  price?: number | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type SalesOrderLineUpdateManyMutationInputInputObject =
  | Extract<keyof SalesOrderLineUpdateManyMutationInput, string>
  | { name: 'qty', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PredictedSalesValueByCompanyCreateInput {
  id?: string | null
  datePredictionRun?: string | null
  company?: CompanyCreateOneInput
  predictedSalesValue?: number | null
  predictedDate?: string | null
}
export type PredictedSalesValueByCompanyCreateInputInputObject =
  | Extract<keyof PredictedSalesValueByCompanyCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'datePredictionRun', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'predictedSalesValue', alias?: string  } 
  | { name: 'predictedDate', alias?: string  } 
  
export interface PredictedSalesValueByCompanyUpdateInput {
  datePredictionRun?: string | null
  company?: CompanyUpdateOneRequiredInput | null
  predictedSalesValue?: number | null
  predictedDate?: string | null
}
export type PredictedSalesValueByCompanyUpdateInputInputObject =
  | Extract<keyof PredictedSalesValueByCompanyUpdateInput, string>
  | { name: 'datePredictionRun', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'predictedSalesValue', alias?: string  } 
  | { name: 'predictedDate', alias?: string  } 
  
export interface PredictedSalesValueByCompanyUpdateManyMutationInput {
  datePredictionRun?: string | null
  predictedSalesValue?: number | null
  predictedDate?: string | null
}
export type PredictedSalesValueByCompanyUpdateManyMutationInputInputObject =
  | Extract<keyof PredictedSalesValueByCompanyUpdateManyMutationInput, string>
  | { name: 'datePredictionRun', alias?: string  } 
  | { name: 'predictedSalesValue', alias?: string  } 
  | { name: 'predictedDate', alias?: string  } 
  
export interface PredictedSalesQuantityOfItemsByCompanyCreateInput {
  id?: string | null
  datePredictionRun?: string | null
  company?: CompanyCreateOneInput
  inventory?: InventoryCreateOneInput | null
  predictedSalesValue?: number | null
  predictedDate?: string | null
}
export type PredictedSalesQuantityOfItemsByCompanyCreateInputInputObject =
  | Extract<keyof PredictedSalesQuantityOfItemsByCompanyCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'datePredictionRun', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'inventory', alias?: string  } 
  | { name: 'predictedSalesValue', alias?: string  } 
  | { name: 'predictedDate', alias?: string  } 
  
export interface PredictedSalesQuantityOfItemsByCompanyUpdateInput {
  datePredictionRun?: string | null
  company?: CompanyUpdateOneRequiredInput | null
  inventory?: InventoryUpdateOneInput | null
  predictedSalesValue?: number | null
  predictedDate?: string | null
}
export type PredictedSalesQuantityOfItemsByCompanyUpdateInputInputObject =
  | Extract<keyof PredictedSalesQuantityOfItemsByCompanyUpdateInput, string>
  | { name: 'datePredictionRun', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'inventory', alias?: string  } 
  | { name: 'predictedSalesValue', alias?: string  } 
  | { name: 'predictedDate', alias?: string  } 
  
export interface PredictedSalesQuantityOfItemsByCompanyUpdateManyMutationInput {
  datePredictionRun?: string | null
  predictedSalesValue?: number | null
  predictedDate?: string | null
}
export type PredictedSalesQuantityOfItemsByCompanyUpdateManyMutationInputInputObject =
  | Extract<keyof PredictedSalesQuantityOfItemsByCompanyUpdateManyMutationInput, string>
  | { name: 'datePredictionRun', alias?: string  } 
  | { name: 'predictedSalesValue', alias?: string  } 
  | { name: 'predictedDate', alias?: string  } 
  
export interface MedicareServiceCreateInput {
  id?: string | null
  MBSScheduleFee?: number | null
  description?: string | null
  isActive?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type MedicareServiceCreateInputInputObject =
  | Extract<keyof MedicareServiceCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'MBSScheduleFee', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface MedicareServiceUpdateInput {
  MBSScheduleFee?: number | null
  description?: string | null
  isActive?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type MedicareServiceUpdateInputInputObject =
  | Extract<keyof MedicareServiceUpdateInput, string>
  | { name: 'MBSScheduleFee', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface MedicareServiceUpdateManyMutationInput {
  MBSScheduleFee?: number | null
  description?: string | null
  isActive?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type MedicareServiceUpdateManyMutationInputInputObject =
  | Extract<keyof MedicareServiceUpdateManyMutationInput, string>
  | { name: 'MBSScheduleFee', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PatientCreateInput {
  id?: string | null
  title?: string | null
  firstName?: string | null
  lastName?: string | null
  names?: NameCreateManyInput | null
  address?: AddressCreateOneInput | null
  birthAddress?: AddressCreateOneInput | null
  dateOfBirth?: string | null
  customer?: CustomerCreateOneInput | null
  gender?: prisma.Gender | null
  dvaCardType?: prisma.DVACardType | null
  aboriginalStatus?: prisma.AboriginalStatus | null
  pensionerConcession?: string | null
  commonwealthSeniors?: string | null
  healthcareConcession?: string | null
  safetyNetConcession?: number | null
  medicareNumber?: string | null
  DVA?: string | null
  potentialDuplicate?: boolean | null
  oneName?: boolean | null
  ihi?: string | null
  ihiValidatedDate?: string | null
  noOfBirths?: number | null
  deceasedDate?: string | null
  basicDailyFee?: BasicDailyFeeCreateManyInput | null
  levelOfCare?: prisma.LevelOfCare | null
  dateEnteredAgedCare?: string | null
  company?: CompanyCreateOneInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PatientCreateInputInputObject =
  | Extract<keyof PatientCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'names', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'birthAddress', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'dvaCardType', alias?: string  } 
  | { name: 'aboriginalStatus', alias?: string  } 
  | { name: 'pensionerConcession', alias?: string  } 
  | { name: 'commonwealthSeniors', alias?: string  } 
  | { name: 'healthcareConcession', alias?: string  } 
  | { name: 'safetyNetConcession', alias?: string  } 
  | { name: 'medicareNumber', alias?: string  } 
  | { name: 'DVA', alias?: string  } 
  | { name: 'potentialDuplicate', alias?: string  } 
  | { name: 'oneName', alias?: string  } 
  | { name: 'ihi', alias?: string  } 
  | { name: 'ihiValidatedDate', alias?: string  } 
  | { name: 'noOfBirths', alias?: string  } 
  | { name: 'deceasedDate', alias?: string  } 
  | { name: 'basicDailyFee', alias?: string  } 
  | { name: 'levelOfCare', alias?: string  } 
  | { name: 'dateEnteredAgedCare', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface NameCreateManyInput {
  create?: NameCreateInput[]
  connect?: NameWhereUniqueInput[]
}
export type NameCreateManyInputInputObject =
  | Extract<keyof NameCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface NameCreateInput {
  id?: string | null
  name?: string | null
  isPrimary?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type NameCreateInputInputObject =
  | Extract<keyof NameCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface AddressCreateOneInput {
  create?: AddressCreateInput | null
  connect?: AddressWhereUniqueInput | null
}
export type AddressCreateOneInputInputObject =
  | Extract<keyof AddressCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BasicDailyFeeCreateManyInput {
  create?: BasicDailyFeeCreateInput[]
  connect?: BasicDailyFeeWhereUniqueInput[]
}
export type BasicDailyFeeCreateManyInputInputObject =
  | Extract<keyof BasicDailyFeeCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PatientUpdateInput {
  title?: string | null
  firstName?: string | null
  lastName?: string | null
  names?: NameUpdateManyInput | null
  address?: AddressUpdateOneInput | null
  birthAddress?: AddressUpdateOneInput | null
  dateOfBirth?: string | null
  customer?: CustomerUpdateOneInput | null
  gender?: prisma.Gender | null
  dvaCardType?: prisma.DVACardType | null
  aboriginalStatus?: prisma.AboriginalStatus | null
  pensionerConcession?: string | null
  commonwealthSeniors?: string | null
  healthcareConcession?: string | null
  safetyNetConcession?: number | null
  medicareNumber?: string | null
  DVA?: string | null
  potentialDuplicate?: boolean | null
  oneName?: boolean | null
  ihi?: string | null
  ihiValidatedDate?: string | null
  noOfBirths?: number | null
  deceasedDate?: string | null
  basicDailyFee?: BasicDailyFeeUpdateManyInput | null
  levelOfCare?: prisma.LevelOfCare | null
  dateEnteredAgedCare?: string | null
  company?: CompanyUpdateOneInput | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PatientUpdateInputInputObject =
  | Extract<keyof PatientUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'names', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'birthAddress', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'customer', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'dvaCardType', alias?: string  } 
  | { name: 'aboriginalStatus', alias?: string  } 
  | { name: 'pensionerConcession', alias?: string  } 
  | { name: 'commonwealthSeniors', alias?: string  } 
  | { name: 'healthcareConcession', alias?: string  } 
  | { name: 'safetyNetConcession', alias?: string  } 
  | { name: 'medicareNumber', alias?: string  } 
  | { name: 'DVA', alias?: string  } 
  | { name: 'potentialDuplicate', alias?: string  } 
  | { name: 'oneName', alias?: string  } 
  | { name: 'ihi', alias?: string  } 
  | { name: 'ihiValidatedDate', alias?: string  } 
  | { name: 'noOfBirths', alias?: string  } 
  | { name: 'deceasedDate', alias?: string  } 
  | { name: 'basicDailyFee', alias?: string  } 
  | { name: 'levelOfCare', alias?: string  } 
  | { name: 'dateEnteredAgedCare', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface NameUpdateManyInput {
  create?: NameCreateInput[]
  update?: NameUpdateWithWhereUniqueNestedInput[]
  upsert?: NameUpsertWithWhereUniqueNestedInput[]
  delete?: NameWhereUniqueInput[]
  connect?: NameWhereUniqueInput[]
  set?: NameWhereUniqueInput[]
  disconnect?: NameWhereUniqueInput[]
  deleteMany?: NameScalarWhereInput[]
  updateMany?: NameUpdateManyWithWhereNestedInput[]
}
export type NameUpdateManyInputInputObject =
  | Extract<keyof NameUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface NameUpdateWithWhereUniqueNestedInput {
  where?: NameWhereUniqueInput
  data?: NameUpdateDataInput
}
export type NameUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof NameUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface NameUpdateDataInput {
  name?: string | null
  isPrimary?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type NameUpdateDataInputInputObject =
  | Extract<keyof NameUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface NameUpsertWithWhereUniqueNestedInput {
  where?: NameWhereUniqueInput
  update?: NameUpdateDataInput
  create?: NameCreateInput
}
export type NameUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof NameUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface NameScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  isPrimary?: boolean | null
  isPrimary_not?: boolean | null
  isArchived?: boolean | null
  isArchived_not?: boolean | null
  isDeleted?: boolean | null
  isDeleted_not?: boolean | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: NameScalarWhereInput[]
  OR?: NameScalarWhereInput[]
  NOT?: NameScalarWhereInput[]
}
export type NameScalarWhereInputInputObject =
  | Extract<keyof NameScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isPrimary_not', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isArchived_not', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  | { name: 'isDeleted_not', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NameUpdateManyWithWhereNestedInput {
  where?: NameScalarWhereInput
  data?: NameUpdateManyDataInput
}
export type NameUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof NameUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface NameUpdateManyDataInput {
  name?: string | null
  isPrimary?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type NameUpdateManyDataInputInputObject =
  | Extract<keyof NameUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface AddressUpdateOneInput {
  create?: AddressCreateInput | null
  update?: AddressUpdateDataInput | null
  upsert?: AddressUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: AddressWhereUniqueInput | null
}
export type AddressUpdateOneInputInputObject =
  | Extract<keyof AddressUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AddressUpsertNestedInput {
  update?: AddressUpdateDataInput
  create?: AddressCreateInput
}
export type AddressUpsertNestedInputInputObject =
  | Extract<keyof AddressUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BasicDailyFeeUpdateManyInput {
  create?: BasicDailyFeeCreateInput[]
  update?: BasicDailyFeeUpdateWithWhereUniqueNestedInput[]
  upsert?: BasicDailyFeeUpsertWithWhereUniqueNestedInput[]
  delete?: BasicDailyFeeWhereUniqueInput[]
  connect?: BasicDailyFeeWhereUniqueInput[]
  set?: BasicDailyFeeWhereUniqueInput[]
  disconnect?: BasicDailyFeeWhereUniqueInput[]
  deleteMany?: BasicDailyFeeScalarWhereInput[]
  updateMany?: BasicDailyFeeUpdateManyWithWhereNestedInput[]
}
export type BasicDailyFeeUpdateManyInputInputObject =
  | Extract<keyof BasicDailyFeeUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface BasicDailyFeeUpdateWithWhereUniqueNestedInput {
  where?: BasicDailyFeeWhereUniqueInput
  data?: BasicDailyFeeUpdateDataInput
}
export type BasicDailyFeeUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof BasicDailyFeeUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface BasicDailyFeeUpsertWithWhereUniqueNestedInput {
  where?: BasicDailyFeeWhereUniqueInput
  update?: BasicDailyFeeUpdateDataInput
  create?: BasicDailyFeeCreateInput
}
export type BasicDailyFeeUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof BasicDailyFeeUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BasicDailyFeeScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  level?: prisma.LevelOfCare | null
  level_not?: prisma.LevelOfCare | null
  level_in?: prisma.LevelOfCare[]
  level_not_in?: prisma.LevelOfCare[]
  rate?: number | null
  rate_not?: number | null
  rate_in?: number[]
  rate_not_in?: number[]
  rate_lt?: number | null
  rate_lte?: number | null
  rate_gt?: number | null
  rate_gte?: number | null
  dateFrom?: string | null
  dateFrom_not?: string | null
  dateFrom_in?: string[]
  dateFrom_not_in?: string[]
  dateFrom_lt?: string | null
  dateFrom_lte?: string | null
  dateFrom_gt?: string | null
  dateFrom_gte?: string | null
  dateTo?: string | null
  dateTo_not?: string | null
  dateTo_in?: string[]
  dateTo_not_in?: string[]
  dateTo_lt?: string | null
  dateTo_lte?: string | null
  dateTo_gt?: string | null
  dateTo_gte?: string | null
  rechargeable?: number | null
  rechargeable_not?: number | null
  rechargeable_in?: number[]
  rechargeable_not_in?: number[]
  rechargeable_lt?: number | null
  rechargeable_lte?: number | null
  rechargeable_gt?: number | null
  rechargeable_gte?: number | null
  AND?: BasicDailyFeeScalarWhereInput[]
  OR?: BasicDailyFeeScalarWhereInput[]
  NOT?: BasicDailyFeeScalarWhereInput[]
}
export type BasicDailyFeeScalarWhereInputInputObject =
  | Extract<keyof BasicDailyFeeScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'level', alias?: string  } 
  | { name: 'level_not', alias?: string  } 
  | { name: 'level_in', alias?: string  } 
  | { name: 'level_not_in', alias?: string  } 
  | { name: 'rate', alias?: string  } 
  | { name: 'rate_not', alias?: string  } 
  | { name: 'rate_in', alias?: string  } 
  | { name: 'rate_not_in', alias?: string  } 
  | { name: 'rate_lt', alias?: string  } 
  | { name: 'rate_lte', alias?: string  } 
  | { name: 'rate_gt', alias?: string  } 
  | { name: 'rate_gte', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateFrom_not', alias?: string  } 
  | { name: 'dateFrom_in', alias?: string  } 
  | { name: 'dateFrom_not_in', alias?: string  } 
  | { name: 'dateFrom_lt', alias?: string  } 
  | { name: 'dateFrom_lte', alias?: string  } 
  | { name: 'dateFrom_gt', alias?: string  } 
  | { name: 'dateFrom_gte', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  | { name: 'dateTo_not', alias?: string  } 
  | { name: 'dateTo_in', alias?: string  } 
  | { name: 'dateTo_not_in', alias?: string  } 
  | { name: 'dateTo_lt', alias?: string  } 
  | { name: 'dateTo_lte', alias?: string  } 
  | { name: 'dateTo_gt', alias?: string  } 
  | { name: 'dateTo_gte', alias?: string  } 
  | { name: 'rechargeable', alias?: string  } 
  | { name: 'rechargeable_not', alias?: string  } 
  | { name: 'rechargeable_in', alias?: string  } 
  | { name: 'rechargeable_not_in', alias?: string  } 
  | { name: 'rechargeable_lt', alias?: string  } 
  | { name: 'rechargeable_lte', alias?: string  } 
  | { name: 'rechargeable_gt', alias?: string  } 
  | { name: 'rechargeable_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BasicDailyFeeUpdateManyWithWhereNestedInput {
  where?: BasicDailyFeeScalarWhereInput
  data?: BasicDailyFeeUpdateManyDataInput
}
export type BasicDailyFeeUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof BasicDailyFeeUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface BasicDailyFeeUpdateManyDataInput {
  level?: prisma.LevelOfCare | null
  rate?: number | null
  dateFrom?: string | null
  dateTo?: string | null
  rechargeable?: number | null
}
export type BasicDailyFeeUpdateManyDataInputInputObject =
  | Extract<keyof BasicDailyFeeUpdateManyDataInput, string>
  | { name: 'level', alias?: string  } 
  | { name: 'rate', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  | { name: 'rechargeable', alias?: string  } 
  
export interface PatientUpdateManyMutationInput {
  title?: string | null
  firstName?: string | null
  lastName?: string | null
  dateOfBirth?: string | null
  gender?: prisma.Gender | null
  dvaCardType?: prisma.DVACardType | null
  aboriginalStatus?: prisma.AboriginalStatus | null
  pensionerConcession?: string | null
  commonwealthSeniors?: string | null
  healthcareConcession?: string | null
  safetyNetConcession?: number | null
  medicareNumber?: string | null
  DVA?: string | null
  potentialDuplicate?: boolean | null
  oneName?: boolean | null
  ihi?: string | null
  ihiValidatedDate?: string | null
  noOfBirths?: number | null
  deceasedDate?: string | null
  levelOfCare?: prisma.LevelOfCare | null
  dateEnteredAgedCare?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PatientUpdateManyMutationInputInputObject =
  | Extract<keyof PatientUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'dvaCardType', alias?: string  } 
  | { name: 'aboriginalStatus', alias?: string  } 
  | { name: 'pensionerConcession', alias?: string  } 
  | { name: 'commonwealthSeniors', alias?: string  } 
  | { name: 'healthcareConcession', alias?: string  } 
  | { name: 'safetyNetConcession', alias?: string  } 
  | { name: 'medicareNumber', alias?: string  } 
  | { name: 'DVA', alias?: string  } 
  | { name: 'potentialDuplicate', alias?: string  } 
  | { name: 'oneName', alias?: string  } 
  | { name: 'ihi', alias?: string  } 
  | { name: 'ihiValidatedDate', alias?: string  } 
  | { name: 'noOfBirths', alias?: string  } 
  | { name: 'deceasedDate', alias?: string  } 
  | { name: 'levelOfCare', alias?: string  } 
  | { name: 'dateEnteredAgedCare', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface NameUpdateInput {
  name?: string | null
  isPrimary?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type NameUpdateInputInputObject =
  | Extract<keyof NameUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface NameUpdateManyMutationInput {
  name?: string | null
  isPrimary?: boolean | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type NameUpdateManyMutationInputInputObject =
  | Extract<keyof NameUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'isPrimary', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface HealthcareProviderCreateInput {
  id?: string | null
  occupation?: string | null
  hpii?: string | null
  firstName?: string | null
  lastName?: string | null
  dateOfBirth?: string | null
  emailAddress?: string | null
  gender?: prisma.Gender | null
  address?: AddressCreateOneInput | null
  company?: CompanyCreateOneInput | null
  ahpraNumber?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type HealthcareProviderCreateInputInputObject =
  | Extract<keyof HealthcareProviderCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'occupation', alias?: string  } 
  | { name: 'hpii', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'emailAddress', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'ahpraNumber', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface HealthcareProviderUpdateInput {
  occupation?: string | null
  hpii?: string | null
  firstName?: string | null
  lastName?: string | null
  dateOfBirth?: string | null
  emailAddress?: string | null
  gender?: prisma.Gender | null
  address?: AddressUpdateOneInput | null
  company?: CompanyUpdateOneInput | null
  ahpraNumber?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type HealthcareProviderUpdateInputInputObject =
  | Extract<keyof HealthcareProviderUpdateInput, string>
  | { name: 'occupation', alias?: string  } 
  | { name: 'hpii', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'emailAddress', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'company', alias?: string  } 
  | { name: 'ahpraNumber', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface HealthcareProviderUpdateManyMutationInput {
  occupation?: string | null
  hpii?: string | null
  firstName?: string | null
  lastName?: string | null
  dateOfBirth?: string | null
  emailAddress?: string | null
  gender?: prisma.Gender | null
  ahpraNumber?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type HealthcareProviderUpdateManyMutationInputInputObject =
  | Extract<keyof HealthcareProviderUpdateManyMutationInput, string>
  | { name: 'occupation', alias?: string  } 
  | { name: 'hpii', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'dateOfBirth', alias?: string  } 
  | { name: 'emailAddress', alias?: string  } 
  | { name: 'gender', alias?: string  } 
  | { name: 'ahpraNumber', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface ImmunisationScheduleCreateInput {
  id?: string | null
  ageNumber?: number | null
  agePeriod?: prisma.PeriodUnit | null
  disease?: DiseaseCreateOneInput | null
  vaccineBrand?: VaccineBrandCreateOneInput | null
}
export type ImmunisationScheduleCreateInputInputObject =
  | Extract<keyof ImmunisationScheduleCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'ageNumber', alias?: string  } 
  | { name: 'agePeriod', alias?: string  } 
  | { name: 'disease', alias?: string  } 
  | { name: 'vaccineBrand', alias?: string  } 
  
export interface DiseaseCreateOneInput {
  create?: DiseaseCreateInput | null
  connect?: DiseaseWhereUniqueInput | null
}
export type DiseaseCreateOneInputInputObject =
  | Extract<keyof DiseaseCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DiseaseCreateInput {
  id?: string | null
  name?: string | null
}
export type DiseaseCreateInputInputObject =
  | Extract<keyof DiseaseCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface VaccineBrandCreateOneInput {
  create?: VaccineBrandCreateInput | null
  connect?: VaccineBrandWhereUniqueInput | null
}
export type VaccineBrandCreateOneInputInputObject =
  | Extract<keyof VaccineBrandCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VaccineBrandCreateInput {
  id?: string | null
  name?: string | null
}
export type VaccineBrandCreateInputInputObject =
  | Extract<keyof VaccineBrandCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface ImmunisationScheduleUpdateInput {
  ageNumber?: number | null
  agePeriod?: prisma.PeriodUnit | null
  disease?: DiseaseUpdateOneInput | null
  vaccineBrand?: VaccineBrandUpdateOneInput | null
}
export type ImmunisationScheduleUpdateInputInputObject =
  | Extract<keyof ImmunisationScheduleUpdateInput, string>
  | { name: 'ageNumber', alias?: string  } 
  | { name: 'agePeriod', alias?: string  } 
  | { name: 'disease', alias?: string  } 
  | { name: 'vaccineBrand', alias?: string  } 
  
export interface DiseaseUpdateOneInput {
  create?: DiseaseCreateInput | null
  update?: DiseaseUpdateDataInput | null
  upsert?: DiseaseUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: DiseaseWhereUniqueInput | null
}
export type DiseaseUpdateOneInputInputObject =
  | Extract<keyof DiseaseUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DiseaseUpdateDataInput {
  name?: string | null
}
export type DiseaseUpdateDataInputInputObject =
  | Extract<keyof DiseaseUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface DiseaseUpsertNestedInput {
  update?: DiseaseUpdateDataInput
  create?: DiseaseCreateInput
}
export type DiseaseUpsertNestedInputInputObject =
  | Extract<keyof DiseaseUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VaccineBrandUpdateOneInput {
  create?: VaccineBrandCreateInput | null
  update?: VaccineBrandUpdateDataInput | null
  upsert?: VaccineBrandUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: VaccineBrandWhereUniqueInput | null
}
export type VaccineBrandUpdateOneInputInputObject =
  | Extract<keyof VaccineBrandUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VaccineBrandUpdateDataInput {
  name?: string | null
}
export type VaccineBrandUpdateDataInputInputObject =
  | Extract<keyof VaccineBrandUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface VaccineBrandUpsertNestedInput {
  update?: VaccineBrandUpdateDataInput
  create?: VaccineBrandCreateInput
}
export type VaccineBrandUpsertNestedInputInputObject =
  | Extract<keyof VaccineBrandUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ImmunisationScheduleUpdateManyMutationInput {
  ageNumber?: number | null
  agePeriod?: prisma.PeriodUnit | null
}
export type ImmunisationScheduleUpdateManyMutationInputInputObject =
  | Extract<keyof ImmunisationScheduleUpdateManyMutationInput, string>
  | { name: 'ageNumber', alias?: string  } 
  | { name: 'agePeriod', alias?: string  } 
  
export interface VaccineBrandUpdateInput {
  name?: string | null
}
export type VaccineBrandUpdateInputInputObject =
  | Extract<keyof VaccineBrandUpdateInput, string>
  | { name: 'name', alias?: string  } 
  
export interface VaccineBrandUpdateManyMutationInput {
  name?: string | null
}
export type VaccineBrandUpdateManyMutationInputInputObject =
  | Extract<keyof VaccineBrandUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface DiseaseUpdateInput {
  name?: string | null
}
export type DiseaseUpdateInputInputObject =
  | Extract<keyof DiseaseUpdateInput, string>
  | { name: 'name', alias?: string  } 
  
export interface DiseaseUpdateManyMutationInput {
  name?: string | null
}
export type DiseaseUpdateManyMutationInputInputObject =
  | Extract<keyof DiseaseUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface HILogCreateInput {
  id?: string | null
  hpio?: string | null
  hpii?: string | null
  ihi?: string | null
  timeWaitedForSalus?: number | null
  csp?: string | null
  hiWebServiceUsed?: string | null
  hiWebServiceVersion?: string | null
  hiNumberStatus?: prisma.HINumberStatus | null
  recordStatus?: string | null
  salusResponse?: prisma.SalusResponse | null
  failureMessage?: string | null
}
export type HILogCreateInputInputObject =
  | Extract<keyof HILogCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'hpio', alias?: string  } 
  | { name: 'hpii', alias?: string  } 
  | { name: 'ihi', alias?: string  } 
  | { name: 'timeWaitedForSalus', alias?: string  } 
  | { name: 'csp', alias?: string  } 
  | { name: 'hiWebServiceUsed', alias?: string  } 
  | { name: 'hiWebServiceVersion', alias?: string  } 
  | { name: 'hiNumberStatus', alias?: string  } 
  | { name: 'recordStatus', alias?: string  } 
  | { name: 'salusResponse', alias?: string  } 
  | { name: 'failureMessage', alias?: string  } 
  
export interface HILogUpdateInput {
  hpio?: string | null
  hpii?: string | null
  ihi?: string | null
  timeWaitedForSalus?: number | null
  csp?: string | null
  hiWebServiceUsed?: string | null
  hiWebServiceVersion?: string | null
  hiNumberStatus?: prisma.HINumberStatus | null
  recordStatus?: string | null
  salusResponse?: prisma.SalusResponse | null
  failureMessage?: string | null
}
export type HILogUpdateInputInputObject =
  | Extract<keyof HILogUpdateInput, string>
  | { name: 'hpio', alias?: string  } 
  | { name: 'hpii', alias?: string  } 
  | { name: 'ihi', alias?: string  } 
  | { name: 'timeWaitedForSalus', alias?: string  } 
  | { name: 'csp', alias?: string  } 
  | { name: 'hiWebServiceUsed', alias?: string  } 
  | { name: 'hiWebServiceVersion', alias?: string  } 
  | { name: 'hiNumberStatus', alias?: string  } 
  | { name: 'recordStatus', alias?: string  } 
  | { name: 'salusResponse', alias?: string  } 
  | { name: 'failureMessage', alias?: string  } 
  
export interface HILogUpdateManyMutationInput {
  hpio?: string | null
  hpii?: string | null
  ihi?: string | null
  timeWaitedForSalus?: number | null
  csp?: string | null
  hiWebServiceUsed?: string | null
  hiWebServiceVersion?: string | null
  hiNumberStatus?: prisma.HINumberStatus | null
  recordStatus?: string | null
  salusResponse?: prisma.SalusResponse | null
  failureMessage?: string | null
}
export type HILogUpdateManyMutationInputInputObject =
  | Extract<keyof HILogUpdateManyMutationInput, string>
  | { name: 'hpio', alias?: string  } 
  | { name: 'hpii', alias?: string  } 
  | { name: 'ihi', alias?: string  } 
  | { name: 'timeWaitedForSalus', alias?: string  } 
  | { name: 'csp', alias?: string  } 
  | { name: 'hiWebServiceUsed', alias?: string  } 
  | { name: 'hiWebServiceVersion', alias?: string  } 
  | { name: 'hiNumberStatus', alias?: string  } 
  | { name: 'recordStatus', alias?: string  } 
  | { name: 'salusResponse', alias?: string  } 
  | { name: 'failureMessage', alias?: string  } 
  
export interface PbsOrganisationCreateInput {
  id?: string | null
  code?: string | null
  title?: string | null
  street?: string | null
  city?: string | null
  stateAddress?: string | null
  postcode?: string | null
  phone?: string | null
  effectiveFrom?: string | null
  effectiveTo?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PbsOrganisationCreateInputInputObject =
  | Extract<keyof PbsOrganisationCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'stateAddress', alias?: string  } 
  | { name: 'postcode', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'effectiveFrom', alias?: string  } 
  | { name: 'effectiveTo', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PbsOrganisationUpdateInput {
  code?: string | null
  title?: string | null
  street?: string | null
  city?: string | null
  stateAddress?: string | null
  postcode?: string | null
  phone?: string | null
  effectiveFrom?: string | null
  effectiveTo?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PbsOrganisationUpdateInputInputObject =
  | Extract<keyof PbsOrganisationUpdateInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'stateAddress', alias?: string  } 
  | { name: 'postcode', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'effectiveFrom', alias?: string  } 
  | { name: 'effectiveTo', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PbsOrganisationUpdateManyMutationInput {
  code?: string | null
  title?: string | null
  street?: string | null
  city?: string | null
  stateAddress?: string | null
  postcode?: string | null
  phone?: string | null
  effectiveFrom?: string | null
  effectiveTo?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PbsOrganisationUpdateManyMutationInputInputObject =
  | Extract<keyof PbsOrganisationUpdateManyMutationInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'stateAddress', alias?: string  } 
  | { name: 'postcode', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'effectiveFrom', alias?: string  } 
  | { name: 'effectiveTo', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PbsTPPCreateInput {
  id?: string | null
  snomedCode?: string | null
  clinicalPreferredTerm?: string | null
  packSize?: number | null
  brandName?: string | null
  exManufacturerPrice?: number | null
  pricingModel?: prisma.PBSPricingModel | null
  mpp_id?: string | null
  organisation_id?: PbsOrganisationCreateOneInput | null
  effectiveFrom?: string | null
  effectiveTo?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PbsTPPCreateInputInputObject =
  | Extract<keyof PbsTPPCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'snomedCode', alias?: string  } 
  | { name: 'clinicalPreferredTerm', alias?: string  } 
  | { name: 'packSize', alias?: string  } 
  | { name: 'brandName', alias?: string  } 
  | { name: 'exManufacturerPrice', alias?: string  } 
  | { name: 'pricingModel', alias?: string  } 
  | { name: 'mpp_id', alias?: string  } 
  | { name: 'organisation_id', alias?: string  } 
  | { name: 'effectiveFrom', alias?: string  } 
  | { name: 'effectiveTo', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PbsOrganisationCreateOneInput {
  create?: PbsOrganisationCreateInput | null
  connect?: PbsOrganisationWhereUniqueInput | null
}
export type PbsOrganisationCreateOneInputInputObject =
  | Extract<keyof PbsOrganisationCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PbsTPPUpdateInput {
  snomedCode?: string | null
  clinicalPreferredTerm?: string | null
  packSize?: number | null
  brandName?: string | null
  exManufacturerPrice?: number | null
  pricingModel?: prisma.PBSPricingModel | null
  mpp_id?: string | null
  organisation_id?: PbsOrganisationUpdateOneInput | null
  effectiveFrom?: string | null
  effectiveTo?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PbsTPPUpdateInputInputObject =
  | Extract<keyof PbsTPPUpdateInput, string>
  | { name: 'snomedCode', alias?: string  } 
  | { name: 'clinicalPreferredTerm', alias?: string  } 
  | { name: 'packSize', alias?: string  } 
  | { name: 'brandName', alias?: string  } 
  | { name: 'exManufacturerPrice', alias?: string  } 
  | { name: 'pricingModel', alias?: string  } 
  | { name: 'mpp_id', alias?: string  } 
  | { name: 'organisation_id', alias?: string  } 
  | { name: 'effectiveFrom', alias?: string  } 
  | { name: 'effectiveTo', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PbsOrganisationUpdateOneInput {
  create?: PbsOrganisationCreateInput | null
  update?: PbsOrganisationUpdateDataInput | null
  upsert?: PbsOrganisationUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: PbsOrganisationWhereUniqueInput | null
}
export type PbsOrganisationUpdateOneInputInputObject =
  | Extract<keyof PbsOrganisationUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PbsOrganisationUpdateDataInput {
  code?: string | null
  title?: string | null
  street?: string | null
  city?: string | null
  stateAddress?: string | null
  postcode?: string | null
  phone?: string | null
  effectiveFrom?: string | null
  effectiveTo?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PbsOrganisationUpdateDataInputInputObject =
  | Extract<keyof PbsOrganisationUpdateDataInput, string>
  | { name: 'code', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'street', alias?: string  } 
  | { name: 'city', alias?: string  } 
  | { name: 'stateAddress', alias?: string  } 
  | { name: 'postcode', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'effectiveFrom', alias?: string  } 
  | { name: 'effectiveTo', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface PbsOrganisationUpsertNestedInput {
  update?: PbsOrganisationUpdateDataInput
  create?: PbsOrganisationCreateInput
}
export type PbsOrganisationUpsertNestedInputInputObject =
  | Extract<keyof PbsOrganisationUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PbsTPPUpdateManyMutationInput {
  snomedCode?: string | null
  clinicalPreferredTerm?: string | null
  packSize?: number | null
  brandName?: string | null
  exManufacturerPrice?: number | null
  pricingModel?: prisma.PBSPricingModel | null
  mpp_id?: string | null
  effectiveFrom?: string | null
  effectiveTo?: string | null
  isArchived?: boolean | null
  isDeleted?: boolean | null
}
export type PbsTPPUpdateManyMutationInputInputObject =
  | Extract<keyof PbsTPPUpdateManyMutationInput, string>
  | { name: 'snomedCode', alias?: string  } 
  | { name: 'clinicalPreferredTerm', alias?: string  } 
  | { name: 'packSize', alias?: string  } 
  | { name: 'brandName', alias?: string  } 
  | { name: 'exManufacturerPrice', alias?: string  } 
  | { name: 'pricingModel', alias?: string  } 
  | { name: 'mpp_id', alias?: string  } 
  | { name: 'effectiveFrom', alias?: string  } 
  | { name: 'effectiveTo', alias?: string  } 
  | { name: 'isArchived', alias?: string  } 
  | { name: 'isDeleted', alias?: string  } 
  
export interface MeansTestedFeeUpdateInput {
  amount?: number | null
  currency?: prisma.Currency | null
  dateFrom?: string | null
  dateTo?: string | null
  company?: CompanyUpdateOneInput | null
}
export type MeansTestedFeeUpdateInputInputObject =
  | Extract<keyof MeansTestedFeeUpdateInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  | { name: 'company', alias?: string  } 
  
export interface MeansTestedFeeUpdateManyMutationInput {
  amount?: number | null
  currency?: prisma.Currency | null
  dateFrom?: string | null
  dateTo?: string | null
}
export type MeansTestedFeeUpdateManyMutationInputInputObject =
  | Extract<keyof MeansTestedFeeUpdateManyMutationInput, string>
  | { name: 'amount', alias?: string  } 
  | { name: 'currency', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  
export interface MeansTestLimitsCreateInput {
  id?: string | null
  annual?: number | null
  lifetime?: number | null
  dateFrom?: string | null
  dateTo?: string | null
}
export type MeansTestLimitsCreateInputInputObject =
  | Extract<keyof MeansTestLimitsCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'annual', alias?: string  } 
  | { name: 'lifetime', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  
export interface MeansTestLimitsUpdateInput {
  annual?: number | null
  lifetime?: number | null
  dateFrom?: string | null
  dateTo?: string | null
}
export type MeansTestLimitsUpdateInputInputObject =
  | Extract<keyof MeansTestLimitsUpdateInput, string>
  | { name: 'annual', alias?: string  } 
  | { name: 'lifetime', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  
export interface MeansTestLimitsUpdateManyMutationInput {
  annual?: number | null
  lifetime?: number | null
  dateFrom?: string | null
  dateTo?: string | null
}
export type MeansTestLimitsUpdateManyMutationInputInputObject =
  | Extract<keyof MeansTestLimitsUpdateManyMutationInput, string>
  | { name: 'annual', alias?: string  } 
  | { name: 'lifetime', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  
export interface BasicDailyFeeUpdateInput {
  level?: prisma.LevelOfCare | null
  rate?: number | null
  dateFrom?: string | null
  dateTo?: string | null
  rechargeable?: number | null
  company?: CompanyUpdateOneInput | null
}
export type BasicDailyFeeUpdateInputInputObject =
  | Extract<keyof BasicDailyFeeUpdateInput, string>
  | { name: 'level', alias?: string  } 
  | { name: 'rate', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  | { name: 'rechargeable', alias?: string  } 
  | { name: 'company', alias?: string  } 
  
export interface BasicDailyFeeUpdateManyMutationInput {
  level?: prisma.LevelOfCare | null
  rate?: number | null
  dateFrom?: string | null
  dateTo?: string | null
  rechargeable?: number | null
}
export type BasicDailyFeeUpdateManyMutationInputInputObject =
  | Extract<keyof BasicDailyFeeUpdateManyMutationInput, string>
  | { name: 'level', alias?: string  } 
  | { name: 'rate', alias?: string  } 
  | { name: 'dateFrom', alias?: string  } 
  | { name: 'dateTo', alias?: string  } 
  | { name: 'rechargeable', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AddressSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AddressWhereInput | null
  AND?: AddressSubscriptionWhereInput[]
  OR?: AddressSubscriptionWhereInput[]
  NOT?: AddressSubscriptionWhereInput[]
}
export type AddressSubscriptionWhereInputInputObject =
  | Extract<keyof AddressSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ContactSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ContactWhereInput | null
  AND?: ContactSubscriptionWhereInput[]
  OR?: ContactSubscriptionWhereInput[]
  NOT?: ContactSubscriptionWhereInput[]
}
export type ContactSubscriptionWhereInputInputObject =
  | Extract<keyof ContactSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CompanySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CompanyWhereInput | null
  AND?: CompanySubscriptionWhereInput[]
  OR?: CompanySubscriptionWhereInput[]
  NOT?: CompanySubscriptionWhereInput[]
}
export type CompanySubscriptionWhereInputInputObject =
  | Extract<keyof CompanySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CompanyMemberSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CompanyMemberWhereInput | null
  AND?: CompanyMemberSubscriptionWhereInput[]
  OR?: CompanyMemberSubscriptionWhereInput[]
  NOT?: CompanyMemberSubscriptionWhereInput[]
}
export type CompanyMemberSubscriptionWhereInputInputObject =
  | Extract<keyof CompanyMemberSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CustomerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CustomerWhereInput | null
  AND?: CustomerSubscriptionWhereInput[]
  OR?: CustomerSubscriptionWhereInput[]
  NOT?: CustomerSubscriptionWhereInput[]
}
export type CustomerSubscriptionWhereInputInputObject =
  | Extract<keyof CustomerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface IntegrationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: IntegrationWhereInput | null
  AND?: IntegrationSubscriptionWhereInput[]
  OR?: IntegrationSubscriptionWhereInput[]
  NOT?: IntegrationSubscriptionWhereInput[]
}
export type IntegrationSubscriptionWhereInputInputObject =
  | Extract<keyof IntegrationSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ServiceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ServiceWhereInput | null
  AND?: ServiceSubscriptionWhereInput[]
  OR?: ServiceSubscriptionWhereInput[]
  NOT?: ServiceSubscriptionWhereInput[]
}
export type ServiceSubscriptionWhereInputInputObject =
  | Extract<keyof ServiceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectWhereInput | null
  AND?: ProjectSubscriptionWhereInput[]
  OR?: ProjectSubscriptionWhereInput[]
  NOT?: ProjectSubscriptionWhereInput[]
}
export type ProjectSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectServiceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectServiceWhereInput | null
  AND?: ProjectServiceSubscriptionWhereInput[]
  OR?: ProjectServiceSubscriptionWhereInput[]
  NOT?: ProjectServiceSubscriptionWhereInput[]
}
export type ProjectServiceSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectServiceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ProjectServiceRuleSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ProjectServiceRuleWhereInput | null
  AND?: ProjectServiceRuleSubscriptionWhereInput[]
  OR?: ProjectServiceRuleSubscriptionWhereInput[]
  NOT?: ProjectServiceRuleSubscriptionWhereInput[]
}
export type ProjectServiceRuleSubscriptionWhereInputInputObject =
  | Extract<keyof ProjectServiceRuleSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PlanSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PlanWhereInput | null
  AND?: PlanSubscriptionWhereInput[]
  OR?: PlanSubscriptionWhereInput[]
  NOT?: PlanSubscriptionWhereInput[]
}
export type PlanSubscriptionWhereInputInputObject =
  | Extract<keyof PlanSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SessionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SessionWhereInput | null
  AND?: SessionSubscriptionWhereInput[]
  OR?: SessionSubscriptionWhereInput[]
  NOT?: SessionSubscriptionWhereInput[]
}
export type SessionSubscriptionWhereInputInputObject =
  | Extract<keyof SessionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TimeSheetSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TimeSheetWhereInput | null
  AND?: TimeSheetSubscriptionWhereInput[]
  OR?: TimeSheetSubscriptionWhereInput[]
  NOT?: TimeSheetSubscriptionWhereInput[]
}
export type TimeSheetSubscriptionWhereInputInputObject =
  | Extract<keyof TimeSheetSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AttachmentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AttachmentWhereInput | null
  AND?: AttachmentSubscriptionWhereInput[]
  OR?: AttachmentSubscriptionWhereInput[]
  NOT?: AttachmentSubscriptionWhereInput[]
}
export type AttachmentSubscriptionWhereInputInputObject =
  | Extract<keyof AttachmentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TimeSheetEntrySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TimeSheetEntryWhereInput | null
  AND?: TimeSheetEntrySubscriptionWhereInput[]
  OR?: TimeSheetEntrySubscriptionWhereInput[]
  NOT?: TimeSheetEntrySubscriptionWhereInput[]
}
export type TimeSheetEntrySubscriptionWhereInputInputObject =
  | Extract<keyof TimeSheetEntrySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InvoiceItemEntrySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: InvoiceItemEntryWhereInput | null
  AND?: InvoiceItemEntrySubscriptionWhereInput[]
  OR?: InvoiceItemEntrySubscriptionWhereInput[]
  NOT?: InvoiceItemEntrySubscriptionWhereInput[]
}
export type InvoiceItemEntrySubscriptionWhereInputInputObject =
  | Extract<keyof InvoiceItemEntrySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InvoiceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: InvoiceWhereInput | null
  AND?: InvoiceSubscriptionWhereInput[]
  OR?: InvoiceSubscriptionWhereInput[]
  NOT?: InvoiceSubscriptionWhereInput[]
}
export type InvoiceSubscriptionWhereInputInputObject =
  | Extract<keyof InvoiceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MainAccountSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MainAccountWhereInput | null
  AND?: MainAccountSubscriptionWhereInput[]
  OR?: MainAccountSubscriptionWhereInput[]
  NOT?: MainAccountSubscriptionWhereInput[]
}
export type MainAccountSubscriptionWhereInputInputObject =
  | Extract<keyof MainAccountSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LedgerJournalSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: LedgerJournalWhereInput | null
  AND?: LedgerJournalSubscriptionWhereInput[]
  OR?: LedgerJournalSubscriptionWhereInput[]
  NOT?: LedgerJournalSubscriptionWhereInput[]
}
export type LedgerJournalSubscriptionWhereInputInputObject =
  | Extract<keyof LedgerJournalSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LedgerTransactionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: LedgerTransactionWhereInput | null
  AND?: LedgerTransactionSubscriptionWhereInput[]
  OR?: LedgerTransactionSubscriptionWhereInput[]
  NOT?: LedgerTransactionSubscriptionWhereInput[]
}
export type LedgerTransactionSubscriptionWhereInputInputObject =
  | Extract<keyof LedgerTransactionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LedgerPostingSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: LedgerPostingWhereInput | null
  AND?: LedgerPostingSubscriptionWhereInput[]
  OR?: LedgerPostingSubscriptionWhereInput[]
  NOT?: LedgerPostingSubscriptionWhereInput[]
}
export type LedgerPostingSubscriptionWhereInputInputObject =
  | Extract<keyof LedgerPostingSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BankSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: BankWhereInput | null
  AND?: BankSubscriptionWhereInput[]
  OR?: BankSubscriptionWhereInput[]
  NOT?: BankSubscriptionWhereInput[]
}
export type BankSubscriptionWhereInputInputObject =
  | Extract<keyof BankSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BankTransactionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: BankTransactionWhereInput | null
  AND?: BankTransactionSubscriptionWhereInput[]
  OR?: BankTransactionSubscriptionWhereInput[]
  NOT?: BankTransactionSubscriptionWhereInput[]
}
export type BankTransactionSubscriptionWhereInputInputObject =
  | Extract<keyof BankTransactionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface WareHouseSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: WareHouseWhereInput | null
  AND?: WareHouseSubscriptionWhereInput[]
  OR?: WareHouseSubscriptionWhereInput[]
  NOT?: WareHouseSubscriptionWhereInput[]
}
export type WareHouseSubscriptionWhereInputInputObject =
  | Extract<keyof WareHouseSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InventorySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: InventoryWhereInput | null
  AND?: InventorySubscriptionWhereInput[]
  OR?: InventorySubscriptionWhereInput[]
  NOT?: InventorySubscriptionWhereInput[]
}
export type InventorySubscriptionWhereInputInputObject =
  | Extract<keyof InventorySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SupplierSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SupplierWhereInput | null
  AND?: SupplierSubscriptionWhereInput[]
  OR?: SupplierSubscriptionWhereInput[]
  NOT?: SupplierSubscriptionWhereInput[]
}
export type SupplierSubscriptionWhereInputInputObject =
  | Extract<keyof SupplierSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AssetGroupSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AssetGroupWhereInput | null
  AND?: AssetGroupSubscriptionWhereInput[]
  OR?: AssetGroupSubscriptionWhereInput[]
  NOT?: AssetGroupSubscriptionWhereInput[]
}
export type AssetGroupSubscriptionWhereInputInputObject =
  | Extract<keyof AssetGroupSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AssetSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AssetWhereInput | null
  AND?: AssetSubscriptionWhereInput[]
  OR?: AssetSubscriptionWhereInput[]
  NOT?: AssetSubscriptionWhereInput[]
}
export type AssetSubscriptionWhereInputInputObject =
  | Extract<keyof AssetSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PurchaseOrderSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PurchaseOrderWhereInput | null
  AND?: PurchaseOrderSubscriptionWhereInput[]
  OR?: PurchaseOrderSubscriptionWhereInput[]
  NOT?: PurchaseOrderSubscriptionWhereInput[]
}
export type PurchaseOrderSubscriptionWhereInputInputObject =
  | Extract<keyof PurchaseOrderSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PoReceiptSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PoReceiptWhereInput | null
  AND?: PoReceiptSubscriptionWhereInput[]
  OR?: PoReceiptSubscriptionWhereInput[]
  NOT?: PoReceiptSubscriptionWhereInput[]
}
export type PoReceiptSubscriptionWhereInputInputObject =
  | Extract<keyof PoReceiptSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface InventoryOnHandSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: InventoryOnHandWhereInput | null
  AND?: InventoryOnHandSubscriptionWhereInput[]
  OR?: InventoryOnHandSubscriptionWhereInput[]
  NOT?: InventoryOnHandSubscriptionWhereInput[]
}
export type InventoryOnHandSubscriptionWhereInputInputObject =
  | Extract<keyof InventoryOnHandSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PurchaseOrderLineSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PurchaseOrderLineWhereInput | null
  AND?: PurchaseOrderLineSubscriptionWhereInput[]
  OR?: PurchaseOrderLineSubscriptionWhereInput[]
  NOT?: PurchaseOrderLineSubscriptionWhereInput[]
}
export type PurchaseOrderLineSubscriptionWhereInputInputObject =
  | Extract<keyof PurchaseOrderLineSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ApInvoiceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ApInvoiceWhereInput | null
  AND?: ApInvoiceSubscriptionWhereInput[]
  OR?: ApInvoiceSubscriptionWhereInput[]
  NOT?: ApInvoiceSubscriptionWhereInput[]
}
export type ApInvoiceSubscriptionWhereInputInputObject =
  | Extract<keyof ApInvoiceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SalesOrderSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SalesOrderWhereInput | null
  AND?: SalesOrderSubscriptionWhereInput[]
  OR?: SalesOrderSubscriptionWhereInput[]
  NOT?: SalesOrderSubscriptionWhereInput[]
}
export type SalesOrderSubscriptionWhereInputInputObject =
  | Extract<keyof SalesOrderSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SalesOrderLineSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SalesOrderLineWhereInput | null
  AND?: SalesOrderLineSubscriptionWhereInput[]
  OR?: SalesOrderLineSubscriptionWhereInput[]
  NOT?: SalesOrderLineSubscriptionWhereInput[]
}
export type SalesOrderLineSubscriptionWhereInputInputObject =
  | Extract<keyof SalesOrderLineSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PredictedSalesValueByCompanySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PredictedSalesValueByCompanyWhereInput | null
  AND?: PredictedSalesValueByCompanySubscriptionWhereInput[]
  OR?: PredictedSalesValueByCompanySubscriptionWhereInput[]
  NOT?: PredictedSalesValueByCompanySubscriptionWhereInput[]
}
export type PredictedSalesValueByCompanySubscriptionWhereInputInputObject =
  | Extract<keyof PredictedSalesValueByCompanySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PredictedSalesQuantityOfItemsByCompanyWhereInput | null
  AND?: PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInput[]
  OR?: PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInput[]
  NOT?: PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInput[]
}
export type PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInputInputObject =
  | Extract<keyof PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MedicareServiceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MedicareServiceWhereInput | null
  AND?: MedicareServiceSubscriptionWhereInput[]
  OR?: MedicareServiceSubscriptionWhereInput[]
  NOT?: MedicareServiceSubscriptionWhereInput[]
}
export type MedicareServiceSubscriptionWhereInputInputObject =
  | Extract<keyof MedicareServiceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PatientSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PatientWhereInput | null
  AND?: PatientSubscriptionWhereInput[]
  OR?: PatientSubscriptionWhereInput[]
  NOT?: PatientSubscriptionWhereInput[]
}
export type PatientSubscriptionWhereInputInputObject =
  | Extract<keyof PatientSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NameSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: NameWhereInput | null
  AND?: NameSubscriptionWhereInput[]
  OR?: NameSubscriptionWhereInput[]
  NOT?: NameSubscriptionWhereInput[]
}
export type NameSubscriptionWhereInputInputObject =
  | Extract<keyof NameSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface HealthcareProviderSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: HealthcareProviderWhereInput | null
  AND?: HealthcareProviderSubscriptionWhereInput[]
  OR?: HealthcareProviderSubscriptionWhereInput[]
  NOT?: HealthcareProviderSubscriptionWhereInput[]
}
export type HealthcareProviderSubscriptionWhereInputInputObject =
  | Extract<keyof HealthcareProviderSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ImmunisationScheduleSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ImmunisationScheduleWhereInput | null
  AND?: ImmunisationScheduleSubscriptionWhereInput[]
  OR?: ImmunisationScheduleSubscriptionWhereInput[]
  NOT?: ImmunisationScheduleSubscriptionWhereInput[]
}
export type ImmunisationScheduleSubscriptionWhereInputInputObject =
  | Extract<keyof ImmunisationScheduleSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VaccineBrandSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: VaccineBrandWhereInput | null
  AND?: VaccineBrandSubscriptionWhereInput[]
  OR?: VaccineBrandSubscriptionWhereInput[]
  NOT?: VaccineBrandSubscriptionWhereInput[]
}
export type VaccineBrandSubscriptionWhereInputInputObject =
  | Extract<keyof VaccineBrandSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DiseaseSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DiseaseWhereInput | null
  AND?: DiseaseSubscriptionWhereInput[]
  OR?: DiseaseSubscriptionWhereInput[]
  NOT?: DiseaseSubscriptionWhereInput[]
}
export type DiseaseSubscriptionWhereInputInputObject =
  | Extract<keyof DiseaseSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface HILogSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: HILogWhereInput | null
  AND?: HILogSubscriptionWhereInput[]
  OR?: HILogSubscriptionWhereInput[]
  NOT?: HILogSubscriptionWhereInput[]
}
export type HILogSubscriptionWhereInputInputObject =
  | Extract<keyof HILogSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PbsOrganisationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PbsOrganisationWhereInput | null
  AND?: PbsOrganisationSubscriptionWhereInput[]
  OR?: PbsOrganisationSubscriptionWhereInput[]
  NOT?: PbsOrganisationSubscriptionWhereInput[]
}
export type PbsOrganisationSubscriptionWhereInputInputObject =
  | Extract<keyof PbsOrganisationSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PbsTPPSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PbsTPPWhereInput | null
  AND?: PbsTPPSubscriptionWhereInput[]
  OR?: PbsTPPSubscriptionWhereInput[]
  NOT?: PbsTPPSubscriptionWhereInput[]
}
export type PbsTPPSubscriptionWhereInputInputObject =
  | Extract<keyof PbsTPPSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MeansTestedFeeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MeansTestedFeeWhereInput | null
  AND?: MeansTestedFeeSubscriptionWhereInput[]
  OR?: MeansTestedFeeSubscriptionWhereInput[]
  NOT?: MeansTestedFeeSubscriptionWhereInput[]
}
export type MeansTestedFeeSubscriptionWhereInputInputObject =
  | Extract<keyof MeansTestedFeeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MeansTestLimitsSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MeansTestLimitsWhereInput | null
  AND?: MeansTestLimitsSubscriptionWhereInput[]
  OR?: MeansTestLimitsSubscriptionWhereInput[]
  NOT?: MeansTestLimitsSubscriptionWhereInput[]
}
export type MeansTestLimitsSubscriptionWhereInputInputObject =
  | Extract<keyof MeansTestLimitsSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BasicDailyFeeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: BasicDailyFeeWhereInput | null
  AND?: BasicDailyFeeSubscriptionWhereInput[]
  OR?: BasicDailyFeeSubscriptionWhereInput[]
  NOT?: BasicDailyFeeSubscriptionWhereInput[]
}
export type BasicDailyFeeSubscriptionWhereInputInputObject =
  | Extract<keyof BasicDailyFeeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'contactNumber_ASC'
  | 'contactNumber_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'isActive_ASC'
  | 'isActive_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'isRoot_ASC'
  | 'isRoot_DESC'
  | 'jobTitle_ASC'
  | 'jobTitle_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'secondAuthEnabled_ASC'
  | 'secondAuthEnabled_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type AddressOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'street_ASC'
  | 'street_DESC'
  | 'city_ASC'
  | 'city_DESC'
  | 'state_ASC'
  | 'state_DESC'
  | 'country_ASC'
  | 'country_DESC'
  | 'postCode_ASC'
  | 'postCode_DESC'
  | 'latitude_ASC'
  | 'latitude_DESC'
  | 'longitude_ASC'
  | 'longitude_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ContactOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'surname_ASC'
  | 'surname_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'mobileCode_ASC'
  | 'mobileCode_DESC'
  | 'mobileNumber_ASC'
  | 'mobileNumber_DESC'
  | 'landlineCode_ASC'
  | 'landlineCode_DESC'
  | 'landlineNumber_ASC'
  | 'landlineNumber_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type BusinessTypeValues =
  | 'HEALTH'
  | 'OTHER'
  
export type CountryValues =
  | 'AD'
  | 'AE'
  | 'AF'
  | 'AG'
  | 'AI'
  | 'AL'
  | 'AM'
  | 'AO'
  | 'AR'
  | 'AS'
  | 'AT'
  | 'AU'
  | 'AW'
  | 'AX'
  | 'AZ'
  | 'BA'
  | 'BB'
  | 'BD'
  | 'BE'
  | 'BF'
  | 'BG'
  | 'BH'
  | 'BI'
  | 'BJ'
  | 'BL'
  | 'BM'
  | 'BN'
  | 'BO'
  | 'BQ'
  | 'BR'
  | 'BS'
  | 'BT'
  | 'BV'
  | 'BW'
  | 'BY'
  | 'BZ'
  | 'CA'
  | 'CC'
  | 'CD'
  | 'CF'
  | 'CG'
  | 'CH'
  | 'CI'
  | 'CK'
  | 'CL'
  | 'CM'
  | 'CN'
  | 'CO'
  | 'CR'
  | 'CU'
  | 'CV'
  | 'CW'
  | 'CX'
  | 'CY'
  | 'CZ'
  | 'DE'
  | 'DJ'
  | 'DK'
  | 'DM'
  | 'DO'
  | 'DZ'
  | 'EA'
  | 'EC'
  | 'EE'
  | 'EG'
  | 'EH'
  | 'ER'
  | 'ES'
  | 'ET'
  | 'FI'
  | 'FJ'
  | 'FK'
  | 'FM'
  | 'FO'
  | 'FR'
  | 'GA'
  | 'GB'
  | 'GD'
  | 'GE'
  | 'GF'
  | 'GG'
  | 'GH'
  | 'GI'
  | 'GL'
  | 'GM'
  | 'GN'
  | 'GP'
  | 'GQ'
  | 'GR'
  | 'GS'
  | 'GT'
  | 'GU'
  | 'GW'
  | 'GY'
  | 'HK'
  | 'HM'
  | 'HN'
  | 'HR'
  | 'HT'
  | 'HU'
  | 'IC'
  | 'ID'
  | 'IE'
  | 'IL'
  | 'IM'
  | 'IN'
  | 'IO'
  | 'IQ'
  | 'IR'
  | 'IS'
  | 'IT'
  | 'JE'
  | 'JM'
  | 'JO'
  | 'JP'
  | 'KE'
  | 'KG'
  | 'KH'
  | 'KI'
  | 'KM'
  | 'KN'
  | 'KP'
  | 'KR'
  | 'KW'
  | 'KY'
  | 'KZ'
  | 'LA'
  | 'LB'
  | 'LC'
  | 'LI'
  | 'LK'
  | 'LR'
  | 'LS'
  | 'LT'
  | 'LU'
  | 'LV'
  | 'LY'
  | 'MA'
  | 'MC'
  | 'MD'
  | 'ME'
  | 'MF'
  | 'MG'
  | 'MH'
  | 'MK'
  | 'ML'
  | 'MM'
  | 'MN'
  | 'MO'
  | 'MP'
  | 'MQ'
  | 'MR'
  | 'MS'
  | 'MT'
  | 'MU'
  | 'MV'
  | 'MW'
  | 'MX'
  | 'MY'
  | 'MZ'
  | 'NA'
  | 'NC'
  | 'NE'
  | 'NF'
  | 'NG'
  | 'NI'
  | 'NL'
  | 'NO'
  | 'NP'
  | 'NR'
  | 'NU'
  | 'NZ'
  | 'OM'
  | 'PA'
  | 'PE'
  | 'PF'
  | 'PG'
  | 'PH'
  | 'PK'
  | 'PL'
  | 'PM'
  | 'PN'
  | 'PR'
  | 'PS'
  | 'PT'
  | 'PW'
  | 'PY'
  | 'QA'
  | 'RE'
  | 'RO'
  | 'RS'
  | 'RU'
  | 'RW'
  | 'SA'
  | 'SB'
  | 'SC'
  | 'SD'
  | 'SE'
  | 'SG'
  | 'SH'
  | 'SI'
  | 'SJ'
  | 'SK'
  | 'SL'
  | 'SM'
  | 'SN'
  | 'SO'
  | 'SR'
  | 'SS'
  | 'ST'
  | 'SV'
  | 'SX'
  | 'SY'
  | 'SZ'
  | 'TC'
  | 'TD'
  | 'TF'
  | 'TG'
  | 'TH'
  | 'TJ'
  | 'TK'
  | 'TL'
  | 'TM'
  | 'TN'
  | 'TO'
  | 'TR'
  | 'TT'
  | 'TV'
  | 'TW'
  | 'TZ'
  | 'UA'
  | 'UG'
  | 'UM'
  | 'US'
  | 'UY'
  | 'UZ'
  | 'VA'
  | 'VC'
  | 'VE'
  | 'VG'
  | 'VI'
  | 'VN'
  | 'VU'
  | 'WF'
  | 'WS'
  | 'XK'
  | 'YE'
  | 'YT'
  | 'ZA'
  | 'ZM'
  | 'ZW'
  
export type CurrencyValues =
  | 'AED'
  | 'AFN'
  | 'ALL'
  | 'AMD'
  | 'ANG'
  | 'AOA'
  | 'ARS'
  | 'AUD'
  | 'AWG'
  | 'AZN'
  | 'BAM'
  | 'BBD'
  | 'BDT'
  | 'BGN'
  | 'BHD'
  | 'BIF'
  | 'BMD'
  | 'BND'
  | 'BOB'
  | 'BRL'
  | 'BSD'
  | 'BTN'
  | 'BWP'
  | 'BYR'
  | 'BZD'
  | 'CAD'
  | 'CDF'
  | 'CHF'
  | 'CLP'
  | 'CNY'
  | 'COP'
  | 'CRC'
  | 'CUC'
  | 'CUP'
  | 'CVE'
  | 'CZK'
  | 'DJF'
  | 'DKK'
  | 'DOP'
  | 'DZD'
  | 'EGP'
  | 'ERN'
  | 'ETB'
  | 'EUR'
  | 'FJD'
  | 'FKP'
  | 'GBP'
  | 'GEL'
  | 'GGP'
  | 'GHS'
  | 'GIP'
  | 'GMD'
  | 'GNF'
  | 'GTQ'
  | 'GYD'
  | 'HKD'
  | 'HNL'
  | 'HRK'
  | 'HTG'
  | 'HUF'
  | 'IDR'
  | 'ILS'
  | 'IMP'
  | 'INR'
  | 'IQD'
  | 'IRR'
  | 'ISK'
  | 'JEP'
  | 'JMD'
  | 'JOD'
  | 'JPY'
  | 'KES'
  | 'KGS'
  | 'KHR'
  | 'KMF'
  | 'KPW'
  | 'KRW'
  | 'KWD'
  | 'KYD'
  | 'KZT'
  | 'LAK'
  | 'LBP'
  | 'LKR'
  | 'LRD'
  | 'LSL'
  | 'LYD'
  | 'MAD'
  | 'MDL'
  | 'MGA'
  | 'MKD'
  | 'MMK'
  | 'MNT'
  | 'MOP'
  | 'MRO'
  | 'MUR'
  | 'MVR'
  | 'MWK'
  | 'MXN'
  | 'MYR'
  | 'MZN'
  | 'NAD'
  | 'NGN'
  | 'NIO'
  | 'NOK'
  | 'NPR'
  | 'NZD'
  | 'OMR'
  | 'PAB'
  | 'PEN'
  | 'PGK'
  | 'PHP'
  | 'PKR'
  | 'PLN'
  | 'PYG'
  | 'QAR'
  | 'RON'
  | 'RSD'
  | 'RUB'
  | 'RWF'
  | 'SAR'
  | 'SBD'
  | 'SCR'
  | 'SDG'
  | 'SEK'
  | 'SGD'
  | 'SHP'
  | 'SLL'
  | 'SOS'
  | 'SPL'
  | 'SRD'
  | 'STD'
  | 'SVC'
  | 'SYP'
  | 'SZL'
  | 'THB'
  | 'TJS'
  | 'TMT'
  | 'TND'
  | 'TOP'
  | 'TRY'
  | 'TTD'
  | 'TVD'
  | 'TWD'
  | 'TZS'
  | 'UAH'
  | 'UGX'
  | 'USD'
  | 'UYU'
  | 'UZS'
  | 'VEF'
  | 'VND'
  | 'VUV'
  | 'WST'
  | 'XAF'
  | 'XCD'
  | 'XDR'
  | 'XOF'
  | 'XPF'
  | 'YER'
  | 'ZAR'
  | 'ZMW'
  
export type PlanTypeValues =
  | 'FREE'
  | 'PRO'
  | 'ENTERPRISE'
  
export type CompanyMemberRoleValues =
  | 'ADMIN'
  | 'OWNER'
  | 'USER'
  
export type CompanyMemberStatusValues =
  | 'ACTIVE'
  | 'PENDING'
  
export type CompanyMemberOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'role_ASC'
  | 'role_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CompanyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'bankAccount_ASC'
  | 'bankAccount_DESC'
  | 'businessType_ASC'
  | 'businessType_DESC'
  | 'country_ASC'
  | 'country_DESC'
  | 'govNumber_ASC'
  | 'govNumber_DESC'
  | 'currency_ASC'
  | 'currency_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'HPIO_ASC'
  | 'HPIO_DESC'
  | 'legalName_ASC'
  | 'legalName_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'salesTax_ASC'
  | 'salesTax_DESC'
  | 'timeSheetSettings_ASC'
  | 'timeSheetSettings_DESC'
  | 'websiteURL_ASC'
  | 'websiteURL_DESC'
  | 'stripeCustomerId_ASC'
  | 'stripeCustomerId_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SupplierTermsOfPaymentValues =
  | 'COD'
  | 'DAYS_14'
  | 'DAYS_30'
  | 'DAYS_60'
  
export type LevelOfCareValues =
  | 'Level1'
  | 'Level2'
  | 'Level3'
  | 'Level4'
  
export type CustomerOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'govNumber_ASC'
  | 'govNumber_DESC'
  | 'salesTax_ASC'
  | 'salesTax_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'billingFrequency_ASC'
  | 'billingFrequency_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type IntegrationTypeValues =
  | 'SLACK'
  
export type IntegrationOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'data_ASC'
  | 'data_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ServiceBillingTypeValues =
  | 'FIXED'
  | 'TIME_BASED'
  
export type TimeBasedTypeValues =
  | 'QUARTERHOUR'
  | 'HALFHOUR'
  | 'HOUR'
  
export type ServiceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'billingType_ASC'
  | 'billingType_DESC'
  | 'includeConsTax_ASC'
  | 'includeConsTax_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'isTemplate_ASC'
  | 'isTemplate_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'timeBasedType_ASC'
  | 'timeBasedType_DESC'
  | 'totalAmount_ASC'
  | 'totalAmount_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProjectStatusValues =
  | 'CLOSED'
  | 'STARTED'
  
export type ProjectServiceRuleTypeValues =
  | 'PROJECT_ENDS'
  | 'PROJECT_STARTS'
  
export type ProjectServiceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'amount_ASC'
  | 'amount_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProjectServiceRuleOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'amount_ASC'
  | 'amount_DESC'
  | 'percent_ASC'
  | 'percent_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'isPercent_ASC'
  | 'isPercent_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ProjectOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'endsAt_ASC'
  | 'endsAt_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'startsAt_ASC'
  | 'startsAt_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PlanOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'isActive_ASC'
  | 'isActive_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'currency_ASC'
  | 'currency_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SessionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'expires_at_ASC'
  | 'expires_at_DESC'
  | 'is_active_ASC'
  | 'is_active_DESC'
  | 'is_archived_ASC'
  | 'is_archived_DESC'
  | 'is_deleted_ASC'
  | 'is_deleted_DESC'
  | 'signed_at_ASC'
  | 'signed_at_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type AttachmentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'fileName_ASC'
  | 'fileName_DESC'
  | 'label_ASC'
  | 'label_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 's3Bucket_ASC'
  | 's3Bucket_DESC'
  | 's3Key_ASC'
  | 's3Key_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TimeSheetStatusValues =
  | 'APPROVED'
  | 'DRAFT'
  | 'FINALISED'
  
export type TimeSheetEntryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'duration_ASC'
  | 'duration_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'isInvoiced_ASC'
  | 'isInvoiced_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TimeSheetOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'endsAt_ASC'
  | 'endsAt_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'number_ASC'
  | 'number_DESC'
  | 'startsAt_ASC'
  | 'startsAt_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type InvoiceStatusValues =
  | 'APPROVED'
  | 'ARCHIVED'
  | 'DRAFT'
  | 'FULLY_PAID'
  | 'PARTIALLY_PAID'
  | 'UNPAID'
  | 'PROPOSED'
  | 'REJECTED'
  
export type InvoiceTypeValues =
  | 'PROJECT'
  | 'TIMESHEET'
  | 'TIMESHEET_WITH_DETAILS'
  | 'FREE_TEXT'
  
export type InvoiceItemEntryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'order_ASC'
  | 'order_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'quantity_ASC'
  | 'quantity_DESC'
  | 'tax_ASC'
  | 'tax_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type InvoiceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'number_ASC'
  | 'number_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'invoiceDate_ASC'
  | 'invoiceDate_DESC'
  | 'dueDate_ASC'
  | 'dueDate_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'total_ASC'
  | 'total_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MainAccountTypeValues =
  | 'ASSET'
  | 'LIABILITY'
  | 'EQUITY'
  | 'REVENUE'
  | 'EXPENSE'
  
export type MainAccountOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'code_ASC'
  | 'code_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'ConsTaxFree_ASC'
  | 'ConsTaxFree_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type LedgerJournalOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'total_ASC'
  | 'total_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'currency_ASC'
  | 'currency_DESC'
  | 'includeConsTax_ASC'
  | 'includeConsTax_DESC'
  | 'posted_ASC'
  | 'posted_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type DrCrValues =
  | 'DEBIT'
  | 'CREDIT'
  
export type LedgerTransactionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'drcr_ASC'
  | 'drcr_DESC'
  | 'amount_ASC'
  | 'amount_DESC'
  | 'currency_ASC'
  | 'currency_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PostingTypeValues =
  | 'DRCONTROL'
  | 'BANK'
  | 'REVENUE'
  | 'TAXPAYABLE'
  | 'TAXRECEIVABLE'
  
export type LedgerPostingOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'postingType_ASC'
  | 'postingType_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type BankOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'institution_ASC'
  | 'institution_DESC'
  | 'bsb_ASC'
  | 'bsb_DESC'
  | 'accountNumber_ASC'
  | 'accountNumber_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type BankTransactionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'transactionDate_ASC'
  | 'transactionDate_DESC'
  | 'amount_ASC'
  | 'amount_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'posted_ASC'
  | 'posted_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type WareHouseOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type InventoryModelValues =
  | 'FIFO'
  | 'LIFO'
  | 'WEIGHTED_AVERAGE'
  
export type UOMValues =
  | 'EA'
  
export type InventoryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'inventoryModel_ASC'
  | 'inventoryModel_DESC'
  | 'uom_ASC'
  | 'uom_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'SellingPrice_ASC'
  | 'SellingPrice_DESC'
  | 'Barcode_ASC'
  | 'Barcode_DESC'
  | 'Taxable_ASC'
  | 'Taxable_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SupplierOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'termsOfPayment_ASC'
  | 'termsOfPayment_DESC'
  | 'bankAccount_ASC'
  | 'bankAccount_DESC'
  | 'emailAddressForRemittance_ASC'
  | 'emailAddressForRemittance_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type AssetGroupDepreciationTypeValues =
  | 'STRAIGHT_LINE'
  | 'REDUCING_BALANCE'
  
export type AssetGroupOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'depreciationType_ASC'
  | 'depreciationType_DESC'
  | 'usefulLife_ASC'
  | 'usefulLife_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type AssetOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'dateOfAquisition_ASC'
  | 'dateOfAquisition_DESC'
  | 'aquisitionPrice_ASC'
  | 'aquisitionPrice_DESC'
  | 'netBookValue_ASC'
  | 'netBookValue_DESC'
  | 'depreciation_ASC'
  | 'depreciation_DESC'
  | 'salvageValue_ASC'
  | 'salvageValue_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PoStatusValues =
  | 'OPEN'
  | 'CONFIRMED'
  | 'DELIVERED'
  | 'PARTIALLY_DELIVERED'
  | 'PACKED'
  | 'PARTIALLY_PACKED'
  | 'INVOICED'
  | 'RECEIPTED'
  
export type PurchaseOrderOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'pbsOrganisation_ASC'
  | 'pbsOrganisation_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'isPbsPO_ASC'
  | 'isPbsPO_DESC'
  | 'poNumber_ASC'
  | 'poNumber_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PoReceiptOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'receiptNumber_ASC'
  | 'receiptNumber_DESC'
  | 'receiptDate_ASC'
  | 'receiptDate_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type InventoryOnHandOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'pbsDrug_ASC'
  | 'pbsDrug_DESC'
  | 'onHandQty_ASC'
  | 'onHandQty_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PurchaseOrderLineOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'pbsDrug_ASC'
  | 'pbsDrug_DESC'
  | 'qty_ASC'
  | 'qty_DESC'
  | 'unit_ASC'
  | 'unit_DESC'
  | 'unitPrice_ASC'
  | 'unitPrice_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ApInvoiceStatusValues =
  | 'OPEN'
  | 'PAID'
  
export type ApInvoiceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'invoiceNumber_ASC'
  | 'invoiceNumber_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SalesOrderOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'transactionDate_ASC'
  | 'transactionDate_DESC'
  | 'currency_ASC'
  | 'currency_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SalesOrderLineOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'qty_ASC'
  | 'qty_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PredictedSalesValueByCompanyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'datePredictionRun_ASC'
  | 'datePredictionRun_DESC'
  | 'predictedSalesValue_ASC'
  | 'predictedSalesValue_DESC'
  | 'predictedDate_ASC'
  | 'predictedDate_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PredictedSalesQuantityOfItemsByCompanyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'datePredictionRun_ASC'
  | 'datePredictionRun_DESC'
  | 'predictedSalesValue_ASC'
  | 'predictedSalesValue_DESC'
  | 'predictedDate_ASC'
  | 'predictedDate_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MedicareServiceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'MBSScheduleFee_ASC'
  | 'MBSScheduleFee_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'isActive_ASC'
  | 'isActive_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type NameOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'isPrimary_ASC'
  | 'isPrimary_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GenderValues =
  | 'MALE'
  | 'FEMALE'
  | 'INTERSEX'
  | 'UNSPECIFIED'
  
export type DVACardTypeValues =
  | 'GOLD'
  | 'WHITE'
  | 'ORANGE'
  
export type AboriginalStatusValues =
  | 'ABORIGINAL_NOT_TORRES'
  | 'TORRES_NOT_ABORIGINAL'
  | 'BOTH'
  | 'NEITHER'
  | 'NOT_STATED'
  
export type BasicDailyFeeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'level_ASC'
  | 'level_DESC'
  | 'rate_ASC'
  | 'rate_DESC'
  | 'dateFrom_ASC'
  | 'dateFrom_DESC'
  | 'dateTo_ASC'
  | 'dateTo_DESC'
  | 'rechargeable_ASC'
  | 'rechargeable_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PatientOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'dateOfBirth_ASC'
  | 'dateOfBirth_DESC'
  | 'gender_ASC'
  | 'gender_DESC'
  | 'dvaCardType_ASC'
  | 'dvaCardType_DESC'
  | 'aboriginalStatus_ASC'
  | 'aboriginalStatus_DESC'
  | 'pensionerConcession_ASC'
  | 'pensionerConcession_DESC'
  | 'commonwealthSeniors_ASC'
  | 'commonwealthSeniors_DESC'
  | 'healthcareConcession_ASC'
  | 'healthcareConcession_DESC'
  | 'safetyNetConcession_ASC'
  | 'safetyNetConcession_DESC'
  | 'medicareNumber_ASC'
  | 'medicareNumber_DESC'
  | 'DVA_ASC'
  | 'DVA_DESC'
  | 'potentialDuplicate_ASC'
  | 'potentialDuplicate_DESC'
  | 'oneName_ASC'
  | 'oneName_DESC'
  | 'ihi_ASC'
  | 'ihi_DESC'
  | 'ihiValidatedDate_ASC'
  | 'ihiValidatedDate_DESC'
  | 'noOfBirths_ASC'
  | 'noOfBirths_DESC'
  | 'deceasedDate_ASC'
  | 'deceasedDate_DESC'
  | 'levelOfCare_ASC'
  | 'levelOfCare_DESC'
  | 'dateEnteredAgedCare_ASC'
  | 'dateEnteredAgedCare_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type HealthcareProviderOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'occupation_ASC'
  | 'occupation_DESC'
  | 'hpii_ASC'
  | 'hpii_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'dateOfBirth_ASC'
  | 'dateOfBirth_DESC'
  | 'emailAddress_ASC'
  | 'emailAddress_DESC'
  | 'gender_ASC'
  | 'gender_DESC'
  | 'ahpraNumber_ASC'
  | 'ahpraNumber_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PeriodUnitValues =
  | 'WEEKS'
  | 'MONTHS'
  | 'YEARS'
  
export type ImmunisationScheduleOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'ageNumber_ASC'
  | 'ageNumber_DESC'
  | 'agePeriod_ASC'
  | 'agePeriod_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type VaccineBrandOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type DiseaseOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type HINumberStatusValues =
  | 'ACTIVE'
  | 'RETIRED'
  | 'RESOLVED'
  | 'DEACTIVATED'
  
export type SalusResponseValues =
  | 'SUCCESS'
  | 'FAIL'
  
export type HILogOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'hpio_ASC'
  | 'hpio_DESC'
  | 'hpii_ASC'
  | 'hpii_DESC'
  | 'ihi_ASC'
  | 'ihi_DESC'
  | 'timeWaitedForSalus_ASC'
  | 'timeWaitedForSalus_DESC'
  | 'csp_ASC'
  | 'csp_DESC'
  | 'hiWebServiceUsed_ASC'
  | 'hiWebServiceUsed_DESC'
  | 'hiWebServiceVersion_ASC'
  | 'hiWebServiceVersion_DESC'
  | 'hiNumberStatus_ASC'
  | 'hiNumberStatus_DESC'
  | 'recordStatus_ASC'
  | 'recordStatus_DESC'
  | 'salusResponse_ASC'
  | 'salusResponse_DESC'
  | 'failureMessage_ASC'
  | 'failureMessage_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PbsOrganisationOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'code_ASC'
  | 'code_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'street_ASC'
  | 'street_DESC'
  | 'city_ASC'
  | 'city_DESC'
  | 'stateAddress_ASC'
  | 'stateAddress_DESC'
  | 'postcode_ASC'
  | 'postcode_DESC'
  | 'phone_ASC'
  | 'phone_DESC'
  | 'effectiveFrom_ASC'
  | 'effectiveFrom_DESC'
  | 'effectiveTo_ASC'
  | 'effectiveTo_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PBSPricingModelValues =
  | 'EX_MANUFACTURER'
  | 'AEMP'
  | 'PEMP'
  | 'PUEMP'
  | 'PREMP'
  | 'READY_PREPARED'
  | 'READY_PREPARED_NO_PREMIUM'
  | 'READY_PREPARED_NO_PREMIUM_NO_CHARGE'
  | 'INFUSIBLE'
  | 'EXTEMPORANEOUS'
  
export type PbsTPPOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'snomedCode_ASC'
  | 'snomedCode_DESC'
  | 'clinicalPreferredTerm_ASC'
  | 'clinicalPreferredTerm_DESC'
  | 'packSize_ASC'
  | 'packSize_DESC'
  | 'brandName_ASC'
  | 'brandName_DESC'
  | 'exManufacturerPrice_ASC'
  | 'exManufacturerPrice_DESC'
  | 'pricingModel_ASC'
  | 'pricingModel_DESC'
  | 'mpp_id_ASC'
  | 'mpp_id_DESC'
  | 'effectiveFrom_ASC'
  | 'effectiveFrom_DESC'
  | 'effectiveTo_ASC'
  | 'effectiveTo_DESC'
  | 'isArchived_ASC'
  | 'isArchived_DESC'
  | 'isDeleted_ASC'
  | 'isDeleted_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MeansTestedFeeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'amount_ASC'
  | 'amount_DESC'
  | 'currency_ASC'
  | 'currency_DESC'
  | 'dateFrom_ASC'
  | 'dateFrom_DESC'
  | 'dateTo_ASC'
  | 'dateTo_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MeansTestLimitsOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'annual_ASC'
  | 'annual_DESC'
  | 'lifetime_ASC'
  | 'lifetime_DESC'
  | 'dateFrom_ASC'
  | 'dateFrom_DESC'
  | 'dateTo_ASC'
  | 'dateTo_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  
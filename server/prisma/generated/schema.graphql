# source: http://localhost:4466
# timestamp: Mon Feb 10 2020 12:23:28 GMT+1100 (Australian Eastern Daylight Time)

enum AboriginalStatus {
  ABORIGINAL_NOT_TORRES
  TORRES_NOT_ABORIGINAL
  BOTH
  NEITHER
  NOT_STATED
}

type Address implements Node {
  id: ID!
  street: String
  city: String
  state: String
  country: String
  postCode: String
  latitude: String
  longitude: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AddressConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: ID
  street: String
  city: String
  state: String
  country: String
  postCode: String
  latitude: String
  longitude: String
}

input AddressCreateManyInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input AddressCreateOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

"""An edge in a connection."""
type AddressEdge {
  """The item at the end of the edge."""
  node: Address!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  street_ASC
  street_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  country_ASC
  country_DESC
  postCode_ASC
  postCode_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AddressPreviousValues {
  id: ID!
  street: String
  city: String
  state: String
  country: String
  postCode: String
  latitude: String
  longitude: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AddressScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  street: String

  """All values that are not equal to given value."""
  street_not: String

  """All values that are contained in given list."""
  street_in: [String!]

  """All values that are not contained in given list."""
  street_not_in: [String!]

  """All values less than the given value."""
  street_lt: String

  """All values less than or equal the given value."""
  street_lte: String

  """All values greater than the given value."""
  street_gt: String

  """All values greater than or equal the given value."""
  street_gte: String

  """All values containing the given string."""
  street_contains: String

  """All values not containing the given string."""
  street_not_contains: String

  """All values starting with the given string."""
  street_starts_with: String

  """All values not starting with the given string."""
  street_not_starts_with: String

  """All values ending with the given string."""
  street_ends_with: String

  """All values not ending with the given string."""
  street_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  postCode: String

  """All values that are not equal to given value."""
  postCode_not: String

  """All values that are contained in given list."""
  postCode_in: [String!]

  """All values that are not contained in given list."""
  postCode_not_in: [String!]

  """All values less than the given value."""
  postCode_lt: String

  """All values less than or equal the given value."""
  postCode_lte: String

  """All values greater than the given value."""
  postCode_gt: String

  """All values greater than or equal the given value."""
  postCode_gte: String

  """All values containing the given string."""
  postCode_contains: String

  """All values not containing the given string."""
  postCode_not_contains: String

  """All values starting with the given string."""
  postCode_starts_with: String

  """All values not starting with the given string."""
  postCode_not_starts_with: String

  """All values ending with the given string."""
  postCode_ends_with: String

  """All values not ending with the given string."""
  postCode_not_ends_with: String
  latitude: String

  """All values that are not equal to given value."""
  latitude_not: String

  """All values that are contained in given list."""
  latitude_in: [String!]

  """All values that are not contained in given list."""
  latitude_not_in: [String!]

  """All values less than the given value."""
  latitude_lt: String

  """All values less than or equal the given value."""
  latitude_lte: String

  """All values greater than the given value."""
  latitude_gt: String

  """All values greater than or equal the given value."""
  latitude_gte: String

  """All values containing the given string."""
  latitude_contains: String

  """All values not containing the given string."""
  latitude_not_contains: String

  """All values starting with the given string."""
  latitude_starts_with: String

  """All values not starting with the given string."""
  latitude_not_starts_with: String

  """All values ending with the given string."""
  latitude_ends_with: String

  """All values not ending with the given string."""
  latitude_not_ends_with: String
  longitude: String

  """All values that are not equal to given value."""
  longitude_not: String

  """All values that are contained in given list."""
  longitude_in: [String!]

  """All values that are not contained in given list."""
  longitude_not_in: [String!]

  """All values less than the given value."""
  longitude_lt: String

  """All values less than or equal the given value."""
  longitude_lte: String

  """All values greater than the given value."""
  longitude_gt: String

  """All values greater than or equal the given value."""
  longitude_gte: String

  """All values containing the given string."""
  longitude_contains: String

  """All values not containing the given string."""
  longitude_not_contains: String

  """All values starting with the given string."""
  longitude_starts_with: String

  """All values not starting with the given string."""
  longitude_not_starts_with: String

  """All values ending with the given string."""
  longitude_ends_with: String

  """All values not ending with the given string."""
  longitude_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
}

input AddressUpdateDataInput {
  street: String
  city: String
  state: String
  country: String
  postCode: String
  latitude: String
  longitude: String
}

input AddressUpdateInput {
  street: String
  city: String
  state: String
  country: String
  postCode: String
  latitude: String
  longitude: String
}

input AddressUpdateManyDataInput {
  street: String
  city: String
  state: String
  country: String
  postCode: String
  latitude: String
  longitude: String
}

input AddressUpdateManyInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  disconnect: [AddressWhereUniqueInput!]
  delete: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueNestedInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  deleteMany: [AddressScalarWhereInput!]
  upsert: [AddressUpsertWithWhereUniqueNestedInput!]
}

input AddressUpdateManyMutationInput {
  street: String
  city: String
  state: String
  country: String
  postCode: String
  latitude: String
  longitude: String
}

input AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput!
  data: AddressUpdateManyDataInput!
}

input AddressUpdateOneInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AddressUpdateDataInput
  upsert: AddressUpsertNestedInput
}

input AddressUpdateWithWhereUniqueNestedInput {
  where: AddressWhereUniqueInput!
  data: AddressUpdateDataInput!
}

input AddressUpsertNestedInput {
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}

input AddressUpsertWithWhereUniqueNestedInput {
  where: AddressWhereUniqueInput!
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}

input AddressWhereInput {
  """Logical AND on all given filters."""
  AND: [AddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [AddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AddressWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  street: String

  """All values that are not equal to given value."""
  street_not: String

  """All values that are contained in given list."""
  street_in: [String!]

  """All values that are not contained in given list."""
  street_not_in: [String!]

  """All values less than the given value."""
  street_lt: String

  """All values less than or equal the given value."""
  street_lte: String

  """All values greater than the given value."""
  street_gt: String

  """All values greater than or equal the given value."""
  street_gte: String

  """All values containing the given string."""
  street_contains: String

  """All values not containing the given string."""
  street_not_contains: String

  """All values starting with the given string."""
  street_starts_with: String

  """All values not starting with the given string."""
  street_not_starts_with: String

  """All values ending with the given string."""
  street_ends_with: String

  """All values not ending with the given string."""
  street_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  postCode: String

  """All values that are not equal to given value."""
  postCode_not: String

  """All values that are contained in given list."""
  postCode_in: [String!]

  """All values that are not contained in given list."""
  postCode_not_in: [String!]

  """All values less than the given value."""
  postCode_lt: String

  """All values less than or equal the given value."""
  postCode_lte: String

  """All values greater than the given value."""
  postCode_gt: String

  """All values greater than or equal the given value."""
  postCode_gte: String

  """All values containing the given string."""
  postCode_contains: String

  """All values not containing the given string."""
  postCode_not_contains: String

  """All values starting with the given string."""
  postCode_starts_with: String

  """All values not starting with the given string."""
  postCode_not_starts_with: String

  """All values ending with the given string."""
  postCode_ends_with: String

  """All values not ending with the given string."""
  postCode_not_ends_with: String
  latitude: String

  """All values that are not equal to given value."""
  latitude_not: String

  """All values that are contained in given list."""
  latitude_in: [String!]

  """All values that are not contained in given list."""
  latitude_not_in: [String!]

  """All values less than the given value."""
  latitude_lt: String

  """All values less than or equal the given value."""
  latitude_lte: String

  """All values greater than the given value."""
  latitude_gt: String

  """All values greater than or equal the given value."""
  latitude_gte: String

  """All values containing the given string."""
  latitude_contains: String

  """All values not containing the given string."""
  latitude_not_contains: String

  """All values starting with the given string."""
  latitude_starts_with: String

  """All values not starting with the given string."""
  latitude_not_starts_with: String

  """All values ending with the given string."""
  latitude_ends_with: String

  """All values not ending with the given string."""
  latitude_not_ends_with: String
  longitude: String

  """All values that are not equal to given value."""
  longitude_not: String

  """All values that are contained in given list."""
  longitude_in: [String!]

  """All values that are not contained in given list."""
  longitude_not_in: [String!]

  """All values less than the given value."""
  longitude_lt: String

  """All values less than or equal the given value."""
  longitude_lte: String

  """All values greater than the given value."""
  longitude_gt: String

  """All values greater than or equal the given value."""
  longitude_gte: String

  """All values containing the given string."""
  longitude_contains: String

  """All values not containing the given string."""
  longitude_not_contains: String

  """All values starting with the given string."""
  longitude_starts_with: String

  """All values not starting with the given string."""
  longitude_not_starts_with: String

  """All values ending with the given string."""
  longitude_ends_with: String

  """All values not ending with the given string."""
  longitude_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateApInvoice {
  count: Int!
}

type AggregateAsset {
  count: Int!
}

type AggregateAssetGroup {
  count: Int!
}

type AggregateAttachment {
  count: Int!
}

type AggregateBank {
  count: Int!
}

type AggregateBankTransaction {
  count: Int!
}

type AggregateBasicDailyFee {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateCompanyMember {
  count: Int!
}

type AggregateContact {
  count: Int!
}

type AggregateCustomer {
  count: Int!
}

type AggregateDisease {
  count: Int!
}

type AggregateHealthcareProvider {
  count: Int!
}

type AggregateHILog {
  count: Int!
}

type AggregateImmunisationSchedule {
  count: Int!
}

type AggregateIntegration {
  count: Int!
}

type AggregateInventory {
  count: Int!
}

type AggregateInventoryOnHand {
  count: Int!
}

type AggregateInvoice {
  count: Int!
}

type AggregateInvoiceItemEntry {
  count: Int!
}

type AggregateLedgerJournal {
  count: Int!
}

type AggregateLedgerPosting {
  count: Int!
}

type AggregateLedgerTransaction {
  count: Int!
}

type AggregateMainAccount {
  count: Int!
}

type AggregateMeansTestedFee {
  count: Int!
}

type AggregateMeansTestLimits {
  count: Int!
}

type AggregateMedicareService {
  count: Int!
}

type AggregateName {
  count: Int!
}

type AggregatePatient {
  count: Int!
}

type AggregatePbsOrganisation {
  count: Int!
}

type AggregatePbsTPP {
  count: Int!
}

type AggregatePlan {
  count: Int!
}

type AggregatePoReceipt {
  count: Int!
}

type AggregatePredictedSalesQuantityOfItemsByCompany {
  count: Int!
}

type AggregatePredictedSalesValueByCompany {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateProjectService {
  count: Int!
}

type AggregateProjectServiceRule {
  count: Int!
}

type AggregatePurchaseOrder {
  count: Int!
}

type AggregatePurchaseOrderLine {
  count: Int!
}

type AggregateSalesOrder {
  count: Int!
}

type AggregateSalesOrderLine {
  count: Int!
}

type AggregateService {
  count: Int!
}

type AggregateSession {
  count: Int!
}

type AggregateSupplier {
  count: Int!
}

type AggregateTimeSheet {
  count: Int!
}

type AggregateTimeSheetEntry {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVaccineBrand {
  count: Int!
}

type AggregateWareHouse {
  count: Int!
}

type ApInvoice implements Node {
  id: ID!
  status: ApInvoiceStatus
  invoiceNumber: String
  purchaseOrder: PurchaseOrder
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ApInvoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ApInvoiceEdge]!
  aggregate: AggregateApInvoice!
}

input ApInvoiceCreateInput {
  id: ID
  status: ApInvoiceStatus
  invoiceNumber: String
  isArchived: Boolean
  isDeleted: Boolean
  purchaseOrder: PurchaseOrderCreateOneInput
  company: CompanyCreateOneInput!
}

"""An edge in a connection."""
type ApInvoiceEdge {
  """The item at the end of the edge."""
  node: ApInvoice!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ApInvoiceOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  invoiceNumber_ASC
  invoiceNumber_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ApInvoicePreviousValues {
  id: ID!
  status: ApInvoiceStatus
  invoiceNumber: String
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ApInvoiceStatus {
  OPEN
  PAID
}

type ApInvoiceSubscriptionPayload {
  mutation: MutationType!
  node: ApInvoice
  updatedFields: [String!]
  previousValues: ApInvoicePreviousValues
}

input ApInvoiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ApInvoiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApInvoiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApInvoiceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ApInvoiceWhereInput
}

input ApInvoiceUpdateInput {
  status: ApInvoiceStatus
  invoiceNumber: String
  isArchived: Boolean
  isDeleted: Boolean
  purchaseOrder: PurchaseOrderUpdateOneInput
  company: CompanyUpdateOneRequiredInput
}

input ApInvoiceUpdateManyMutationInput {
  status: ApInvoiceStatus
  invoiceNumber: String
  isArchived: Boolean
  isDeleted: Boolean
}

input ApInvoiceWhereInput {
  """Logical AND on all given filters."""
  AND: [ApInvoiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApInvoiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApInvoiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: ApInvoiceStatus

  """All values that are not equal to given value."""
  status_not: ApInvoiceStatus

  """All values that are contained in given list."""
  status_in: [ApInvoiceStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ApInvoiceStatus!]
  invoiceNumber: String

  """All values that are not equal to given value."""
  invoiceNumber_not: String

  """All values that are contained in given list."""
  invoiceNumber_in: [String!]

  """All values that are not contained in given list."""
  invoiceNumber_not_in: [String!]

  """All values less than the given value."""
  invoiceNumber_lt: String

  """All values less than or equal the given value."""
  invoiceNumber_lte: String

  """All values greater than the given value."""
  invoiceNumber_gt: String

  """All values greater than or equal the given value."""
  invoiceNumber_gte: String

  """All values containing the given string."""
  invoiceNumber_contains: String

  """All values not containing the given string."""
  invoiceNumber_not_contains: String

  """All values starting with the given string."""
  invoiceNumber_starts_with: String

  """All values not starting with the given string."""
  invoiceNumber_not_starts_with: String

  """All values ending with the given string."""
  invoiceNumber_ends_with: String

  """All values not ending with the given string."""
  invoiceNumber_not_ends_with: String
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  purchaseOrder: PurchaseOrderWhereInput
  company: CompanyWhereInput
}

input ApInvoiceWhereUniqueInput {
  id: ID
}

type Asset implements Node {
  id: ID!
  name: String
  assetGroup: AssetGroup
  dateOfAquisition: DateTime
  aquisitionPrice: Float
  netBookValue: Float
  depreciation: Float
  salvageValue: Float
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AssetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetEdge]!
  aggregate: AggregateAsset!
}

input AssetCreateInput {
  id: ID
  name: String
  dateOfAquisition: DateTime
  aquisitionPrice: Float
  netBookValue: Float
  depreciation: Float
  salvageValue: Float
  isArchived: Boolean
  isDeleted: Boolean
  assetGroup: AssetGroupCreateOneInput
  company: CompanyCreateOneInput!
}

"""An edge in a connection."""
type AssetEdge {
  """The item at the end of the edge."""
  node: Asset!

  """A cursor for use in pagination."""
  cursor: String!
}

type AssetGroup implements Node {
  id: ID!
  name: String
  depreciationType: AssetGroupDepreciationType
  usefulLife: Int
  deprMainAccount: MainAccount
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AssetGroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetGroupEdge]!
  aggregate: AggregateAssetGroup!
}

input AssetGroupCreateInput {
  id: ID
  name: String
  depreciationType: AssetGroupDepreciationType
  usefulLife: Int
  isArchived: Boolean
  isDeleted: Boolean
  deprMainAccount: MainAccountCreateOneInput
  company: CompanyCreateOneInput!
}

input AssetGroupCreateOneInput {
  create: AssetGroupCreateInput
  connect: AssetGroupWhereUniqueInput
}

enum AssetGroupDepreciationType {
  STRAIGHT_LINE
  REDUCING_BALANCE
}

"""An edge in a connection."""
type AssetGroupEdge {
  """The item at the end of the edge."""
  node: AssetGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AssetGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  depreciationType_ASC
  depreciationType_DESC
  usefulLife_ASC
  usefulLife_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AssetGroupPreviousValues {
  id: ID!
  name: String
  depreciationType: AssetGroupDepreciationType
  usefulLife: Int
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AssetGroupSubscriptionPayload {
  mutation: MutationType!
  node: AssetGroup
  updatedFields: [String!]
  previousValues: AssetGroupPreviousValues
}

input AssetGroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AssetGroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetGroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetGroupSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AssetGroupWhereInput
}

input AssetGroupUpdateDataInput {
  name: String
  depreciationType: AssetGroupDepreciationType
  usefulLife: Int
  isArchived: Boolean
  isDeleted: Boolean
  deprMainAccount: MainAccountUpdateOneInput
  company: CompanyUpdateOneRequiredInput
}

input AssetGroupUpdateInput {
  name: String
  depreciationType: AssetGroupDepreciationType
  usefulLife: Int
  isArchived: Boolean
  isDeleted: Boolean
  deprMainAccount: MainAccountUpdateOneInput
  company: CompanyUpdateOneRequiredInput
}

input AssetGroupUpdateManyMutationInput {
  name: String
  depreciationType: AssetGroupDepreciationType
  usefulLife: Int
  isArchived: Boolean
  isDeleted: Boolean
}

input AssetGroupUpdateOneInput {
  create: AssetGroupCreateInput
  connect: AssetGroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssetGroupUpdateDataInput
  upsert: AssetGroupUpsertNestedInput
}

input AssetGroupUpsertNestedInput {
  update: AssetGroupUpdateDataInput!
  create: AssetGroupCreateInput!
}

input AssetGroupWhereInput {
  """Logical AND on all given filters."""
  AND: [AssetGroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetGroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetGroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  depreciationType: AssetGroupDepreciationType

  """All values that are not equal to given value."""
  depreciationType_not: AssetGroupDepreciationType

  """All values that are contained in given list."""
  depreciationType_in: [AssetGroupDepreciationType!]

  """All values that are not contained in given list."""
  depreciationType_not_in: [AssetGroupDepreciationType!]
  usefulLife: Int

  """All values that are not equal to given value."""
  usefulLife_not: Int

  """All values that are contained in given list."""
  usefulLife_in: [Int!]

  """All values that are not contained in given list."""
  usefulLife_not_in: [Int!]

  """All values less than the given value."""
  usefulLife_lt: Int

  """All values less than or equal the given value."""
  usefulLife_lte: Int

  """All values greater than the given value."""
  usefulLife_gt: Int

  """All values greater than or equal the given value."""
  usefulLife_gte: Int
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deprMainAccount: MainAccountWhereInput
  company: CompanyWhereInput
}

input AssetGroupWhereUniqueInput {
  id: ID
}

enum AssetOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  dateOfAquisition_ASC
  dateOfAquisition_DESC
  aquisitionPrice_ASC
  aquisitionPrice_DESC
  netBookValue_ASC
  netBookValue_DESC
  depreciation_ASC
  depreciation_DESC
  salvageValue_ASC
  salvageValue_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AssetPreviousValues {
  id: ID!
  name: String
  dateOfAquisition: DateTime
  aquisitionPrice: Float
  netBookValue: Float
  depreciation: Float
  salvageValue: Float
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AssetSubscriptionPayload {
  mutation: MutationType!
  node: Asset
  updatedFields: [String!]
  previousValues: AssetPreviousValues
}

input AssetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AssetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AssetWhereInput
}

input AssetUpdateInput {
  name: String
  dateOfAquisition: DateTime
  aquisitionPrice: Float
  netBookValue: Float
  depreciation: Float
  salvageValue: Float
  isArchived: Boolean
  isDeleted: Boolean
  assetGroup: AssetGroupUpdateOneInput
  company: CompanyUpdateOneRequiredInput
}

input AssetUpdateManyMutationInput {
  name: String
  dateOfAquisition: DateTime
  aquisitionPrice: Float
  netBookValue: Float
  depreciation: Float
  salvageValue: Float
  isArchived: Boolean
  isDeleted: Boolean
}

input AssetWhereInput {
  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  dateOfAquisition: DateTime

  """All values that are not equal to given value."""
  dateOfAquisition_not: DateTime

  """All values that are contained in given list."""
  dateOfAquisition_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfAquisition_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfAquisition_lt: DateTime

  """All values less than or equal the given value."""
  dateOfAquisition_lte: DateTime

  """All values greater than the given value."""
  dateOfAquisition_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfAquisition_gte: DateTime
  aquisitionPrice: Float

  """All values that are not equal to given value."""
  aquisitionPrice_not: Float

  """All values that are contained in given list."""
  aquisitionPrice_in: [Float!]

  """All values that are not contained in given list."""
  aquisitionPrice_not_in: [Float!]

  """All values less than the given value."""
  aquisitionPrice_lt: Float

  """All values less than or equal the given value."""
  aquisitionPrice_lte: Float

  """All values greater than the given value."""
  aquisitionPrice_gt: Float

  """All values greater than or equal the given value."""
  aquisitionPrice_gte: Float
  netBookValue: Float

  """All values that are not equal to given value."""
  netBookValue_not: Float

  """All values that are contained in given list."""
  netBookValue_in: [Float!]

  """All values that are not contained in given list."""
  netBookValue_not_in: [Float!]

  """All values less than the given value."""
  netBookValue_lt: Float

  """All values less than or equal the given value."""
  netBookValue_lte: Float

  """All values greater than the given value."""
  netBookValue_gt: Float

  """All values greater than or equal the given value."""
  netBookValue_gte: Float
  depreciation: Float

  """All values that are not equal to given value."""
  depreciation_not: Float

  """All values that are contained in given list."""
  depreciation_in: [Float!]

  """All values that are not contained in given list."""
  depreciation_not_in: [Float!]

  """All values less than the given value."""
  depreciation_lt: Float

  """All values less than or equal the given value."""
  depreciation_lte: Float

  """All values greater than the given value."""
  depreciation_gt: Float

  """All values greater than or equal the given value."""
  depreciation_gte: Float
  salvageValue: Float

  """All values that are not equal to given value."""
  salvageValue_not: Float

  """All values that are contained in given list."""
  salvageValue_in: [Float!]

  """All values that are not contained in given list."""
  salvageValue_not_in: [Float!]

  """All values less than the given value."""
  salvageValue_lt: Float

  """All values less than or equal the given value."""
  salvageValue_lte: Float

  """All values greater than the given value."""
  salvageValue_gt: Float

  """All values greater than or equal the given value."""
  salvageValue_gte: Float
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  assetGroup: AssetGroupWhereInput
  company: CompanyWhereInput
}

input AssetWhereUniqueInput {
  id: ID
}

type Attachment implements Node {
  id: ID!
  description: String
  fileName: String
  label: String
  url: String
  s3Bucket: String
  s3Key: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AttachmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttachmentEdge]!
  aggregate: AggregateAttachment!
}

input AttachmentCreateInput {
  id: ID
  description: String
  fileName: String
  label: String
  url: String
  s3Bucket: String
  s3Key: String
}

input AttachmentCreateManyInput {
  create: [AttachmentCreateInput!]
  connect: [AttachmentWhereUniqueInput!]
}

input AttachmentCreateOneInput {
  create: AttachmentCreateInput
  connect: AttachmentWhereUniqueInput
}

"""An edge in a connection."""
type AttachmentEdge {
  """The item at the end of the edge."""
  node: Attachment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AttachmentOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  fileName_ASC
  fileName_DESC
  label_ASC
  label_DESC
  url_ASC
  url_DESC
  s3Bucket_ASC
  s3Bucket_DESC
  s3Key_ASC
  s3Key_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AttachmentPreviousValues {
  id: ID!
  description: String
  fileName: String
  label: String
  url: String
  s3Bucket: String
  s3Key: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AttachmentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AttachmentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttachmentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttachmentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  fileName: String

  """All values that are not equal to given value."""
  fileName_not: String

  """All values that are contained in given list."""
  fileName_in: [String!]

  """All values that are not contained in given list."""
  fileName_not_in: [String!]

  """All values less than the given value."""
  fileName_lt: String

  """All values less than or equal the given value."""
  fileName_lte: String

  """All values greater than the given value."""
  fileName_gt: String

  """All values greater than or equal the given value."""
  fileName_gte: String

  """All values containing the given string."""
  fileName_contains: String

  """All values not containing the given string."""
  fileName_not_contains: String

  """All values starting with the given string."""
  fileName_starts_with: String

  """All values not starting with the given string."""
  fileName_not_starts_with: String

  """All values ending with the given string."""
  fileName_ends_with: String

  """All values not ending with the given string."""
  fileName_not_ends_with: String
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  s3Bucket: String

  """All values that are not equal to given value."""
  s3Bucket_not: String

  """All values that are contained in given list."""
  s3Bucket_in: [String!]

  """All values that are not contained in given list."""
  s3Bucket_not_in: [String!]

  """All values less than the given value."""
  s3Bucket_lt: String

  """All values less than or equal the given value."""
  s3Bucket_lte: String

  """All values greater than the given value."""
  s3Bucket_gt: String

  """All values greater than or equal the given value."""
  s3Bucket_gte: String

  """All values containing the given string."""
  s3Bucket_contains: String

  """All values not containing the given string."""
  s3Bucket_not_contains: String

  """All values starting with the given string."""
  s3Bucket_starts_with: String

  """All values not starting with the given string."""
  s3Bucket_not_starts_with: String

  """All values ending with the given string."""
  s3Bucket_ends_with: String

  """All values not ending with the given string."""
  s3Bucket_not_ends_with: String
  s3Key: String

  """All values that are not equal to given value."""
  s3Key_not: String

  """All values that are contained in given list."""
  s3Key_in: [String!]

  """All values that are not contained in given list."""
  s3Key_not_in: [String!]

  """All values less than the given value."""
  s3Key_lt: String

  """All values less than or equal the given value."""
  s3Key_lte: String

  """All values greater than the given value."""
  s3Key_gt: String

  """All values greater than or equal the given value."""
  s3Key_gte: String

  """All values containing the given string."""
  s3Key_contains: String

  """All values not containing the given string."""
  s3Key_not_contains: String

  """All values starting with the given string."""
  s3Key_starts_with: String

  """All values not starting with the given string."""
  s3Key_not_starts_with: String

  """All values ending with the given string."""
  s3Key_ends_with: String

  """All values not ending with the given string."""
  s3Key_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type AttachmentSubscriptionPayload {
  mutation: MutationType!
  node: Attachment
  updatedFields: [String!]
  previousValues: AttachmentPreviousValues
}

input AttachmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AttachmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttachmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttachmentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AttachmentWhereInput
}

input AttachmentUpdateDataInput {
  description: String
  fileName: String
  label: String
  url: String
  s3Bucket: String
  s3Key: String
}

input AttachmentUpdateInput {
  description: String
  fileName: String
  label: String
  url: String
  s3Bucket: String
  s3Key: String
}

input AttachmentUpdateManyDataInput {
  description: String
  fileName: String
  label: String
  url: String
  s3Bucket: String
  s3Key: String
}

input AttachmentUpdateManyInput {
  create: [AttachmentCreateInput!]
  connect: [AttachmentWhereUniqueInput!]
  set: [AttachmentWhereUniqueInput!]
  disconnect: [AttachmentWhereUniqueInput!]
  delete: [AttachmentWhereUniqueInput!]
  update: [AttachmentUpdateWithWhereUniqueNestedInput!]
  updateMany: [AttachmentUpdateManyWithWhereNestedInput!]
  deleteMany: [AttachmentScalarWhereInput!]
  upsert: [AttachmentUpsertWithWhereUniqueNestedInput!]
}

input AttachmentUpdateManyMutationInput {
  description: String
  fileName: String
  label: String
  url: String
  s3Bucket: String
  s3Key: String
}

input AttachmentUpdateManyWithWhereNestedInput {
  where: AttachmentScalarWhereInput!
  data: AttachmentUpdateManyDataInput!
}

input AttachmentUpdateOneInput {
  create: AttachmentCreateInput
  connect: AttachmentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AttachmentUpdateDataInput
  upsert: AttachmentUpsertNestedInput
}

input AttachmentUpdateWithWhereUniqueNestedInput {
  where: AttachmentWhereUniqueInput!
  data: AttachmentUpdateDataInput!
}

input AttachmentUpsertNestedInput {
  update: AttachmentUpdateDataInput!
  create: AttachmentCreateInput!
}

input AttachmentUpsertWithWhereUniqueNestedInput {
  where: AttachmentWhereUniqueInput!
  update: AttachmentUpdateDataInput!
  create: AttachmentCreateInput!
}

input AttachmentWhereInput {
  """Logical AND on all given filters."""
  AND: [AttachmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttachmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttachmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  fileName: String

  """All values that are not equal to given value."""
  fileName_not: String

  """All values that are contained in given list."""
  fileName_in: [String!]

  """All values that are not contained in given list."""
  fileName_not_in: [String!]

  """All values less than the given value."""
  fileName_lt: String

  """All values less than or equal the given value."""
  fileName_lte: String

  """All values greater than the given value."""
  fileName_gt: String

  """All values greater than or equal the given value."""
  fileName_gte: String

  """All values containing the given string."""
  fileName_contains: String

  """All values not containing the given string."""
  fileName_not_contains: String

  """All values starting with the given string."""
  fileName_starts_with: String

  """All values not starting with the given string."""
  fileName_not_starts_with: String

  """All values ending with the given string."""
  fileName_ends_with: String

  """All values not ending with the given string."""
  fileName_not_ends_with: String
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  s3Bucket: String

  """All values that are not equal to given value."""
  s3Bucket_not: String

  """All values that are contained in given list."""
  s3Bucket_in: [String!]

  """All values that are not contained in given list."""
  s3Bucket_not_in: [String!]

  """All values less than the given value."""
  s3Bucket_lt: String

  """All values less than or equal the given value."""
  s3Bucket_lte: String

  """All values greater than the given value."""
  s3Bucket_gt: String

  """All values greater than or equal the given value."""
  s3Bucket_gte: String

  """All values containing the given string."""
  s3Bucket_contains: String

  """All values not containing the given string."""
  s3Bucket_not_contains: String

  """All values starting with the given string."""
  s3Bucket_starts_with: String

  """All values not starting with the given string."""
  s3Bucket_not_starts_with: String

  """All values ending with the given string."""
  s3Bucket_ends_with: String

  """All values not ending with the given string."""
  s3Bucket_not_ends_with: String
  s3Key: String

  """All values that are not equal to given value."""
  s3Key_not: String

  """All values that are contained in given list."""
  s3Key_in: [String!]

  """All values that are not contained in given list."""
  s3Key_not_in: [String!]

  """All values less than the given value."""
  s3Key_lt: String

  """All values less than or equal the given value."""
  s3Key_lte: String

  """All values greater than the given value."""
  s3Key_gt: String

  """All values greater than or equal the given value."""
  s3Key_gte: String

  """All values containing the given string."""
  s3Key_contains: String

  """All values not containing the given string."""
  s3Key_not_contains: String

  """All values starting with the given string."""
  s3Key_starts_with: String

  """All values not starting with the given string."""
  s3Key_not_starts_with: String

  """All values ending with the given string."""
  s3Key_ends_with: String

  """All values not ending with the given string."""
  s3Key_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input AttachmentWhereUniqueInput {
  id: ID
}

type Bank implements Node {
  id: ID!
  name: String
  institution: String
  bsb: String
  accountNumber: String
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BankConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BankEdge]!
  aggregate: AggregateBank!
}

input BankCreateInput {
  id: ID
  name: String
  institution: String
  bsb: String
  accountNumber: String
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyCreateOneInput!
}

"""An edge in a connection."""
type BankEdge {
  """The item at the end of the edge."""
  node: Bank!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BankOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  institution_ASC
  institution_DESC
  bsb_ASC
  bsb_DESC
  accountNumber_ASC
  accountNumber_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BankPreviousValues {
  id: ID!
  name: String
  institution: String
  bsb: String
  accountNumber: String
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BankSubscriptionPayload {
  mutation: MutationType!
  node: Bank
  updatedFields: [String!]
  previousValues: BankPreviousValues
}

input BankSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BankSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BankSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BankSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BankWhereInput
}

type BankTransaction implements Node {
  id: ID!
  transactionDate: DateTime!
  amount: Float!
  description: String
  posted: Boolean!
  ledgerJournal: LedgerJournal
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type BankTransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BankTransactionEdge]!
  aggregate: AggregateBankTransaction!
}

input BankTransactionCreateInput {
  id: ID
  transactionDate: DateTime!
  amount: Float!
  description: String
  posted: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  ledgerJournal: LedgerJournalCreateOneInput
  company: CompanyCreateOneInput!
}

"""An edge in a connection."""
type BankTransactionEdge {
  """The item at the end of the edge."""
  node: BankTransaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BankTransactionOrderByInput {
  id_ASC
  id_DESC
  transactionDate_ASC
  transactionDate_DESC
  amount_ASC
  amount_DESC
  description_ASC
  description_DESC
  posted_ASC
  posted_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BankTransactionPreviousValues {
  id: ID!
  transactionDate: DateTime!
  amount: Float!
  description: String
  posted: Boolean!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BankTransactionSubscriptionPayload {
  mutation: MutationType!
  node: BankTransaction
  updatedFields: [String!]
  previousValues: BankTransactionPreviousValues
}

input BankTransactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BankTransactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BankTransactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BankTransactionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BankTransactionWhereInput
}

input BankTransactionUpdateInput {
  transactionDate: DateTime
  amount: Float
  description: String
  posted: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  ledgerJournal: LedgerJournalUpdateOneInput
  company: CompanyUpdateOneRequiredInput
}

input BankTransactionUpdateManyMutationInput {
  transactionDate: DateTime
  amount: Float
  description: String
  posted: Boolean
  isArchived: Boolean
  isDeleted: Boolean
}

input BankTransactionWhereInput {
  """Logical AND on all given filters."""
  AND: [BankTransactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BankTransactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BankTransactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  transactionDate: DateTime

  """All values that are not equal to given value."""
  transactionDate_not: DateTime

  """All values that are contained in given list."""
  transactionDate_in: [DateTime!]

  """All values that are not contained in given list."""
  transactionDate_not_in: [DateTime!]

  """All values less than the given value."""
  transactionDate_lt: DateTime

  """All values less than or equal the given value."""
  transactionDate_lte: DateTime

  """All values greater than the given value."""
  transactionDate_gt: DateTime

  """All values greater than or equal the given value."""
  transactionDate_gte: DateTime
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  posted: Boolean

  """All values that are not equal to given value."""
  posted_not: Boolean
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  ledgerJournal: LedgerJournalWhereInput
  company: CompanyWhereInput
}

input BankTransactionWhereUniqueInput {
  id: ID
}

input BankUpdateInput {
  name: String
  institution: String
  bsb: String
  accountNumber: String
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyUpdateOneRequiredInput
}

input BankUpdateManyMutationInput {
  name: String
  institution: String
  bsb: String
  accountNumber: String
  isArchived: Boolean
  isDeleted: Boolean
}

input BankWhereInput {
  """Logical AND on all given filters."""
  AND: [BankWhereInput!]

  """Logical OR on all given filters."""
  OR: [BankWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BankWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  institution: String

  """All values that are not equal to given value."""
  institution_not: String

  """All values that are contained in given list."""
  institution_in: [String!]

  """All values that are not contained in given list."""
  institution_not_in: [String!]

  """All values less than the given value."""
  institution_lt: String

  """All values less than or equal the given value."""
  institution_lte: String

  """All values greater than the given value."""
  institution_gt: String

  """All values greater than or equal the given value."""
  institution_gte: String

  """All values containing the given string."""
  institution_contains: String

  """All values not containing the given string."""
  institution_not_contains: String

  """All values starting with the given string."""
  institution_starts_with: String

  """All values not starting with the given string."""
  institution_not_starts_with: String

  """All values ending with the given string."""
  institution_ends_with: String

  """All values not ending with the given string."""
  institution_not_ends_with: String
  bsb: String

  """All values that are not equal to given value."""
  bsb_not: String

  """All values that are contained in given list."""
  bsb_in: [String!]

  """All values that are not contained in given list."""
  bsb_not_in: [String!]

  """All values less than the given value."""
  bsb_lt: String

  """All values less than or equal the given value."""
  bsb_lte: String

  """All values greater than the given value."""
  bsb_gt: String

  """All values greater than or equal the given value."""
  bsb_gte: String

  """All values containing the given string."""
  bsb_contains: String

  """All values not containing the given string."""
  bsb_not_contains: String

  """All values starting with the given string."""
  bsb_starts_with: String

  """All values not starting with the given string."""
  bsb_not_starts_with: String

  """All values ending with the given string."""
  bsb_ends_with: String

  """All values not ending with the given string."""
  bsb_not_ends_with: String
  accountNumber: String

  """All values that are not equal to given value."""
  accountNumber_not: String

  """All values that are contained in given list."""
  accountNumber_in: [String!]

  """All values that are not contained in given list."""
  accountNumber_not_in: [String!]

  """All values less than the given value."""
  accountNumber_lt: String

  """All values less than or equal the given value."""
  accountNumber_lte: String

  """All values greater than the given value."""
  accountNumber_gt: String

  """All values greater than or equal the given value."""
  accountNumber_gte: String

  """All values containing the given string."""
  accountNumber_contains: String

  """All values not containing the given string."""
  accountNumber_not_contains: String

  """All values starting with the given string."""
  accountNumber_starts_with: String

  """All values not starting with the given string."""
  accountNumber_not_starts_with: String

  """All values ending with the given string."""
  accountNumber_ends_with: String

  """All values not ending with the given string."""
  accountNumber_not_ends_with: String
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
}

input BankWhereUniqueInput {
  id: ID
}

type BasicDailyFee implements Node {
  id: ID!
  level: LevelOfCare
  rate: Float
  dateFrom: DateTime
  dateTo: DateTime
  rechargeable: Float
  company: Company
}

"""A connection to a list of items."""
type BasicDailyFeeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BasicDailyFeeEdge]!
  aggregate: AggregateBasicDailyFee!
}

input BasicDailyFeeCreateInput {
  id: ID
  level: LevelOfCare
  rate: Float
  dateFrom: DateTime
  dateTo: DateTime
  rechargeable: Float
  company: CompanyCreateOneInput
}

input BasicDailyFeeCreateManyInput {
  create: [BasicDailyFeeCreateInput!]
  connect: [BasicDailyFeeWhereUniqueInput!]
}

input BasicDailyFeeCreateOneInput {
  create: BasicDailyFeeCreateInput
  connect: BasicDailyFeeWhereUniqueInput
}

"""An edge in a connection."""
type BasicDailyFeeEdge {
  """The item at the end of the edge."""
  node: BasicDailyFee!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BasicDailyFeeOrderByInput {
  id_ASC
  id_DESC
  level_ASC
  level_DESC
  rate_ASC
  rate_DESC
  dateFrom_ASC
  dateFrom_DESC
  dateTo_ASC
  dateTo_DESC
  rechargeable_ASC
  rechargeable_DESC
}

type BasicDailyFeePreviousValues {
  id: ID!
  level: LevelOfCare
  rate: Float
  dateFrom: DateTime
  dateTo: DateTime
  rechargeable: Float
}

input BasicDailyFeeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BasicDailyFeeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BasicDailyFeeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BasicDailyFeeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  level: LevelOfCare

  """All values that are not equal to given value."""
  level_not: LevelOfCare

  """All values that are contained in given list."""
  level_in: [LevelOfCare!]

  """All values that are not contained in given list."""
  level_not_in: [LevelOfCare!]
  rate: Float

  """All values that are not equal to given value."""
  rate_not: Float

  """All values that are contained in given list."""
  rate_in: [Float!]

  """All values that are not contained in given list."""
  rate_not_in: [Float!]

  """All values less than the given value."""
  rate_lt: Float

  """All values less than or equal the given value."""
  rate_lte: Float

  """All values greater than the given value."""
  rate_gt: Float

  """All values greater than or equal the given value."""
  rate_gte: Float
  dateFrom: DateTime

  """All values that are not equal to given value."""
  dateFrom_not: DateTime

  """All values that are contained in given list."""
  dateFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  dateFrom_not_in: [DateTime!]

  """All values less than the given value."""
  dateFrom_lt: DateTime

  """All values less than or equal the given value."""
  dateFrom_lte: DateTime

  """All values greater than the given value."""
  dateFrom_gt: DateTime

  """All values greater than or equal the given value."""
  dateFrom_gte: DateTime
  dateTo: DateTime

  """All values that are not equal to given value."""
  dateTo_not: DateTime

  """All values that are contained in given list."""
  dateTo_in: [DateTime!]

  """All values that are not contained in given list."""
  dateTo_not_in: [DateTime!]

  """All values less than the given value."""
  dateTo_lt: DateTime

  """All values less than or equal the given value."""
  dateTo_lte: DateTime

  """All values greater than the given value."""
  dateTo_gt: DateTime

  """All values greater than or equal the given value."""
  dateTo_gte: DateTime
  rechargeable: Float

  """All values that are not equal to given value."""
  rechargeable_not: Float

  """All values that are contained in given list."""
  rechargeable_in: [Float!]

  """All values that are not contained in given list."""
  rechargeable_not_in: [Float!]

  """All values less than the given value."""
  rechargeable_lt: Float

  """All values less than or equal the given value."""
  rechargeable_lte: Float

  """All values greater than the given value."""
  rechargeable_gt: Float

  """All values greater than or equal the given value."""
  rechargeable_gte: Float
}

type BasicDailyFeeSubscriptionPayload {
  mutation: MutationType!
  node: BasicDailyFee
  updatedFields: [String!]
  previousValues: BasicDailyFeePreviousValues
}

input BasicDailyFeeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BasicDailyFeeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BasicDailyFeeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BasicDailyFeeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BasicDailyFeeWhereInput
}

input BasicDailyFeeUpdateDataInput {
  level: LevelOfCare
  rate: Float
  dateFrom: DateTime
  dateTo: DateTime
  rechargeable: Float
  company: CompanyUpdateOneInput
}

input BasicDailyFeeUpdateInput {
  level: LevelOfCare
  rate: Float
  dateFrom: DateTime
  dateTo: DateTime
  rechargeable: Float
  company: CompanyUpdateOneInput
}

input BasicDailyFeeUpdateManyDataInput {
  level: LevelOfCare
  rate: Float
  dateFrom: DateTime
  dateTo: DateTime
  rechargeable: Float
}

input BasicDailyFeeUpdateManyInput {
  create: [BasicDailyFeeCreateInput!]
  connect: [BasicDailyFeeWhereUniqueInput!]
  set: [BasicDailyFeeWhereUniqueInput!]
  disconnect: [BasicDailyFeeWhereUniqueInput!]
  delete: [BasicDailyFeeWhereUniqueInput!]
  update: [BasicDailyFeeUpdateWithWhereUniqueNestedInput!]
  updateMany: [BasicDailyFeeUpdateManyWithWhereNestedInput!]
  deleteMany: [BasicDailyFeeScalarWhereInput!]
  upsert: [BasicDailyFeeUpsertWithWhereUniqueNestedInput!]
}

input BasicDailyFeeUpdateManyMutationInput {
  level: LevelOfCare
  rate: Float
  dateFrom: DateTime
  dateTo: DateTime
  rechargeable: Float
}

input BasicDailyFeeUpdateManyWithWhereNestedInput {
  where: BasicDailyFeeScalarWhereInput!
  data: BasicDailyFeeUpdateManyDataInput!
}

input BasicDailyFeeUpdateOneInput {
  create: BasicDailyFeeCreateInput
  connect: BasicDailyFeeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BasicDailyFeeUpdateDataInput
  upsert: BasicDailyFeeUpsertNestedInput
}

input BasicDailyFeeUpdateWithWhereUniqueNestedInput {
  where: BasicDailyFeeWhereUniqueInput!
  data: BasicDailyFeeUpdateDataInput!
}

input BasicDailyFeeUpsertNestedInput {
  update: BasicDailyFeeUpdateDataInput!
  create: BasicDailyFeeCreateInput!
}

input BasicDailyFeeUpsertWithWhereUniqueNestedInput {
  where: BasicDailyFeeWhereUniqueInput!
  update: BasicDailyFeeUpdateDataInput!
  create: BasicDailyFeeCreateInput!
}

input BasicDailyFeeWhereInput {
  """Logical AND on all given filters."""
  AND: [BasicDailyFeeWhereInput!]

  """Logical OR on all given filters."""
  OR: [BasicDailyFeeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BasicDailyFeeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  level: LevelOfCare

  """All values that are not equal to given value."""
  level_not: LevelOfCare

  """All values that are contained in given list."""
  level_in: [LevelOfCare!]

  """All values that are not contained in given list."""
  level_not_in: [LevelOfCare!]
  rate: Float

  """All values that are not equal to given value."""
  rate_not: Float

  """All values that are contained in given list."""
  rate_in: [Float!]

  """All values that are not contained in given list."""
  rate_not_in: [Float!]

  """All values less than the given value."""
  rate_lt: Float

  """All values less than or equal the given value."""
  rate_lte: Float

  """All values greater than the given value."""
  rate_gt: Float

  """All values greater than or equal the given value."""
  rate_gte: Float
  dateFrom: DateTime

  """All values that are not equal to given value."""
  dateFrom_not: DateTime

  """All values that are contained in given list."""
  dateFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  dateFrom_not_in: [DateTime!]

  """All values less than the given value."""
  dateFrom_lt: DateTime

  """All values less than or equal the given value."""
  dateFrom_lte: DateTime

  """All values greater than the given value."""
  dateFrom_gt: DateTime

  """All values greater than or equal the given value."""
  dateFrom_gte: DateTime
  dateTo: DateTime

  """All values that are not equal to given value."""
  dateTo_not: DateTime

  """All values that are contained in given list."""
  dateTo_in: [DateTime!]

  """All values that are not contained in given list."""
  dateTo_not_in: [DateTime!]

  """All values less than the given value."""
  dateTo_lt: DateTime

  """All values less than or equal the given value."""
  dateTo_lte: DateTime

  """All values greater than the given value."""
  dateTo_gt: DateTime

  """All values greater than or equal the given value."""
  dateTo_gte: DateTime
  rechargeable: Float

  """All values that are not equal to given value."""
  rechargeable_not: Float

  """All values that are contained in given list."""
  rechargeable_in: [Float!]

  """All values that are not contained in given list."""
  rechargeable_not_in: [Float!]

  """All values less than the given value."""
  rechargeable_lt: Float

  """All values less than or equal the given value."""
  rechargeable_lte: Float

  """All values greater than the given value."""
  rechargeable_gt: Float

  """All values greater than or equal the given value."""
  rechargeable_gte: Float
  company: CompanyWhereInput
}

input BasicDailyFeeWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum BusinessType {
  HEALTH
  OTHER
}

type Company implements Node {
  id: ID!
  bankAccount: Json
  businessType: BusinessType
  country: Country!
  govNumber: String
  currency: Currency!
  isArchived: Boolean
  isDeleted: Boolean
  HPIO: String
  legalName: String!
  logo: Attachment
  name: String!
  salesTax: Boolean
  timeSheetSettings: Json
  websiteURL: String
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address!]
  contacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  companyMembers(where: CompanyMemberWhereInput, orderBy: CompanyMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompanyMember!]
  activePlan: Plan
  stripeCustomerId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CompanyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  bankAccount: Json
  businessType: BusinessType
  country: Country
  govNumber: String
  currency: Currency!
  isArchived: Boolean
  isDeleted: Boolean
  HPIO: String
  legalName: String!
  name: String!
  salesTax: Boolean
  timeSheetSettings: Json
  websiteURL: String
  stripeCustomerId: String
  logo: AttachmentCreateOneInput
  addresses: AddressCreateManyInput
  contacts: ContactCreateManyInput
  companyMembers: CompanyMemberCreateManyWithoutCompanyInput
  activePlan: PlanCreateOneWithoutCompanyInput
}

input CompanyCreateOneInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutActivePlanInput {
  create: CompanyCreateWithoutActivePlanInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutCompanyMembersInput {
  create: CompanyCreateWithoutCompanyMembersInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutActivePlanInput {
  id: ID
  bankAccount: Json
  businessType: BusinessType
  country: Country
  govNumber: String
  currency: Currency!
  isArchived: Boolean
  isDeleted: Boolean
  HPIO: String
  legalName: String!
  name: String!
  salesTax: Boolean
  timeSheetSettings: Json
  websiteURL: String
  stripeCustomerId: String
  logo: AttachmentCreateOneInput
  addresses: AddressCreateManyInput
  contacts: ContactCreateManyInput
  companyMembers: CompanyMemberCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutCompanyMembersInput {
  id: ID
  bankAccount: Json
  businessType: BusinessType
  country: Country
  govNumber: String
  currency: Currency!
  isArchived: Boolean
  isDeleted: Boolean
  HPIO: String
  legalName: String!
  name: String!
  salesTax: Boolean
  timeSheetSettings: Json
  websiteURL: String
  stripeCustomerId: String
  logo: AttachmentCreateOneInput
  addresses: AddressCreateManyInput
  contacts: ContactCreateManyInput
  activePlan: PlanCreateOneWithoutCompanyInput
}

"""An edge in a connection."""
type CompanyEdge {
  """The item at the end of the edge."""
  node: Company!

  """A cursor for use in pagination."""
  cursor: String!
}

type CompanyMember implements Node {
  id: ID!
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  role: CompanyMemberRole
  status: CompanyMemberStatus
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CompanyMemberConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CompanyMemberEdge]!
  aggregate: AggregateCompanyMember!
}

input CompanyMemberCreateInput {
  id: ID
  isArchived: Boolean
  isDeleted: Boolean
  role: CompanyMemberRole
  status: CompanyMemberStatus
  company: CompanyCreateOneWithoutCompanyMembersInput!
  user: UserCreateOneInput
}

input CompanyMemberCreateManyWithoutCompanyInput {
  create: [CompanyMemberCreateWithoutCompanyInput!]
  connect: [CompanyMemberWhereUniqueInput!]
}

input CompanyMemberCreateWithoutCompanyInput {
  id: ID
  isArchived: Boolean
  isDeleted: Boolean
  role: CompanyMemberRole
  status: CompanyMemberStatus
  user: UserCreateOneInput
}

"""An edge in a connection."""
type CompanyMemberEdge {
  """The item at the end of the edge."""
  node: CompanyMember!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CompanyMemberOrderByInput {
  id_ASC
  id_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  role_ASC
  role_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyMemberPreviousValues {
  id: ID!
  isArchived: Boolean
  isDeleted: Boolean
  role: CompanyMemberRole
  status: CompanyMemberStatus
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum CompanyMemberRole {
  ADMIN
  OWNER
  USER
}

input CompanyMemberScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyMemberScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyMemberScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyMemberScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  role: CompanyMemberRole

  """All values that are not equal to given value."""
  role_not: CompanyMemberRole

  """All values that are contained in given list."""
  role_in: [CompanyMemberRole!]

  """All values that are not contained in given list."""
  role_not_in: [CompanyMemberRole!]
  status: CompanyMemberStatus

  """All values that are not equal to given value."""
  status_not: CompanyMemberStatus

  """All values that are contained in given list."""
  status_in: [CompanyMemberStatus!]

  """All values that are not contained in given list."""
  status_not_in: [CompanyMemberStatus!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

enum CompanyMemberStatus {
  ACTIVE
  PENDING
}

type CompanyMemberSubscriptionPayload {
  mutation: MutationType!
  node: CompanyMember
  updatedFields: [String!]
  previousValues: CompanyMemberPreviousValues
}

input CompanyMemberSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyMemberSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyMemberSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyMemberSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CompanyMemberWhereInput
}

input CompanyMemberUpdateInput {
  isArchived: Boolean
  isDeleted: Boolean
  role: CompanyMemberRole
  status: CompanyMemberStatus
  company: CompanyUpdateOneRequiredWithoutCompanyMembersInput
  user: UserUpdateOneInput
}

input CompanyMemberUpdateManyDataInput {
  isArchived: Boolean
  isDeleted: Boolean
  role: CompanyMemberRole
  status: CompanyMemberStatus
}

input CompanyMemberUpdateManyMutationInput {
  isArchived: Boolean
  isDeleted: Boolean
  role: CompanyMemberRole
  status: CompanyMemberStatus
}

input CompanyMemberUpdateManyWithoutCompanyInput {
  create: [CompanyMemberCreateWithoutCompanyInput!]
  connect: [CompanyMemberWhereUniqueInput!]
  set: [CompanyMemberWhereUniqueInput!]
  disconnect: [CompanyMemberWhereUniqueInput!]
  delete: [CompanyMemberWhereUniqueInput!]
  update: [CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [CompanyMemberUpdateManyWithWhereNestedInput!]
  deleteMany: [CompanyMemberScalarWhereInput!]
  upsert: [CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput!]
}

input CompanyMemberUpdateManyWithWhereNestedInput {
  where: CompanyMemberScalarWhereInput!
  data: CompanyMemberUpdateManyDataInput!
}

input CompanyMemberUpdateWithoutCompanyDataInput {
  isArchived: Boolean
  isDeleted: Boolean
  role: CompanyMemberRole
  status: CompanyMemberStatus
  user: UserUpdateOneInput
}

input CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput {
  where: CompanyMemberWhereUniqueInput!
  data: CompanyMemberUpdateWithoutCompanyDataInput!
}

input CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput {
  where: CompanyMemberWhereUniqueInput!
  update: CompanyMemberUpdateWithoutCompanyDataInput!
  create: CompanyMemberCreateWithoutCompanyInput!
}

input CompanyMemberWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyMemberWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyMemberWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyMemberWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  role: CompanyMemberRole

  """All values that are not equal to given value."""
  role_not: CompanyMemberRole

  """All values that are contained in given list."""
  role_in: [CompanyMemberRole!]

  """All values that are not contained in given list."""
  role_not_in: [CompanyMemberRole!]
  status: CompanyMemberStatus

  """All values that are not equal to given value."""
  status_not: CompanyMemberStatus

  """All values that are contained in given list."""
  status_in: [CompanyMemberStatus!]

  """All values that are not contained in given list."""
  status_not_in: [CompanyMemberStatus!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
  user: UserWhereInput
}

input CompanyMemberWhereUniqueInput {
  id: ID
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  bankAccount_ASC
  bankAccount_DESC
  businessType_ASC
  businessType_DESC
  country_ASC
  country_DESC
  govNumber_ASC
  govNumber_DESC
  currency_ASC
  currency_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  HPIO_ASC
  HPIO_DESC
  legalName_ASC
  legalName_DESC
  name_ASC
  name_DESC
  salesTax_ASC
  salesTax_DESC
  timeSheetSettings_ASC
  timeSheetSettings_DESC
  websiteURL_ASC
  websiteURL_DESC
  stripeCustomerId_ASC
  stripeCustomerId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyPreviousValues {
  id: ID!
  bankAccount: Json
  businessType: BusinessType
  country: Country!
  govNumber: String
  currency: Currency!
  isArchived: Boolean
  isDeleted: Boolean
  HPIO: String
  legalName: String!
  name: String!
  salesTax: Boolean
  timeSheetSettings: Json
  websiteURL: String
  stripeCustomerId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
}

input CompanyUpdateDataInput {
  bankAccount: Json
  businessType: BusinessType
  country: Country
  govNumber: String
  currency: Currency
  isArchived: Boolean
  isDeleted: Boolean
  HPIO: String
  legalName: String
  name: String
  salesTax: Boolean
  timeSheetSettings: Json
  websiteURL: String
  stripeCustomerId: String
  logo: AttachmentUpdateOneInput
  addresses: AddressUpdateManyInput
  contacts: ContactUpdateManyInput
  companyMembers: CompanyMemberUpdateManyWithoutCompanyInput
  activePlan: PlanUpdateOneWithoutCompanyInput
}

input CompanyUpdateInput {
  bankAccount: Json
  businessType: BusinessType
  country: Country
  govNumber: String
  currency: Currency
  isArchived: Boolean
  isDeleted: Boolean
  HPIO: String
  legalName: String
  name: String
  salesTax: Boolean
  timeSheetSettings: Json
  websiteURL: String
  stripeCustomerId: String
  logo: AttachmentUpdateOneInput
  addresses: AddressUpdateManyInput
  contacts: ContactUpdateManyInput
  companyMembers: CompanyMemberUpdateManyWithoutCompanyInput
  activePlan: PlanUpdateOneWithoutCompanyInput
}

input CompanyUpdateManyMutationInput {
  bankAccount: Json
  businessType: BusinessType
  country: Country
  govNumber: String
  currency: Currency
  isArchived: Boolean
  isDeleted: Boolean
  HPIO: String
  legalName: String
  name: String
  salesTax: Boolean
  timeSheetSettings: Json
  websiteURL: String
  stripeCustomerId: String
}

input CompanyUpdateOneInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CompanyUpdateDataInput
  upsert: CompanyUpsertNestedInput
}

input CompanyUpdateOneRequiredInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateDataInput
  upsert: CompanyUpsertNestedInput
}

input CompanyUpdateOneRequiredWithoutActivePlanInput {
  create: CompanyCreateWithoutActivePlanInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutActivePlanDataInput
  upsert: CompanyUpsertWithoutActivePlanInput
}

input CompanyUpdateOneRequiredWithoutCompanyMembersInput {
  create: CompanyCreateWithoutCompanyMembersInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutCompanyMembersDataInput
  upsert: CompanyUpsertWithoutCompanyMembersInput
}

input CompanyUpdateWithoutActivePlanDataInput {
  bankAccount: Json
  businessType: BusinessType
  country: Country
  govNumber: String
  currency: Currency
  isArchived: Boolean
  isDeleted: Boolean
  HPIO: String
  legalName: String
  name: String
  salesTax: Boolean
  timeSheetSettings: Json
  websiteURL: String
  stripeCustomerId: String
  logo: AttachmentUpdateOneInput
  addresses: AddressUpdateManyInput
  contacts: ContactUpdateManyInput
  companyMembers: CompanyMemberUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutCompanyMembersDataInput {
  bankAccount: Json
  businessType: BusinessType
  country: Country
  govNumber: String
  currency: Currency
  isArchived: Boolean
  isDeleted: Boolean
  HPIO: String
  legalName: String
  name: String
  salesTax: Boolean
  timeSheetSettings: Json
  websiteURL: String
  stripeCustomerId: String
  logo: AttachmentUpdateOneInput
  addresses: AddressUpdateManyInput
  contacts: ContactUpdateManyInput
  activePlan: PlanUpdateOneWithoutCompanyInput
}

input CompanyUpsertNestedInput {
  update: CompanyUpdateDataInput!
  create: CompanyCreateInput!
}

input CompanyUpsertWithoutActivePlanInput {
  update: CompanyUpdateWithoutActivePlanDataInput!
  create: CompanyCreateWithoutActivePlanInput!
}

input CompanyUpsertWithoutCompanyMembersInput {
  update: CompanyUpdateWithoutCompanyMembersDataInput!
  create: CompanyCreateWithoutCompanyMembersInput!
}

input CompanyWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyWhereInput!]

  """Logical OR on all given filters."""
  OR: [CompanyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CompanyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  businessType: BusinessType

  """All values that are not equal to given value."""
  businessType_not: BusinessType

  """All values that are contained in given list."""
  businessType_in: [BusinessType!]

  """All values that are not contained in given list."""
  businessType_not_in: [BusinessType!]
  country: Country

  """All values that are not equal to given value."""
  country_not: Country

  """All values that are contained in given list."""
  country_in: [Country!]

  """All values that are not contained in given list."""
  country_not_in: [Country!]
  govNumber: String

  """All values that are not equal to given value."""
  govNumber_not: String

  """All values that are contained in given list."""
  govNumber_in: [String!]

  """All values that are not contained in given list."""
  govNumber_not_in: [String!]

  """All values less than the given value."""
  govNumber_lt: String

  """All values less than or equal the given value."""
  govNumber_lte: String

  """All values greater than the given value."""
  govNumber_gt: String

  """All values greater than or equal the given value."""
  govNumber_gte: String

  """All values containing the given string."""
  govNumber_contains: String

  """All values not containing the given string."""
  govNumber_not_contains: String

  """All values starting with the given string."""
  govNumber_starts_with: String

  """All values not starting with the given string."""
  govNumber_not_starts_with: String

  """All values ending with the given string."""
  govNumber_ends_with: String

  """All values not ending with the given string."""
  govNumber_not_ends_with: String
  currency: Currency

  """All values that are not equal to given value."""
  currency_not: Currency

  """All values that are contained in given list."""
  currency_in: [Currency!]

  """All values that are not contained in given list."""
  currency_not_in: [Currency!]
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  HPIO: String

  """All values that are not equal to given value."""
  HPIO_not: String

  """All values that are contained in given list."""
  HPIO_in: [String!]

  """All values that are not contained in given list."""
  HPIO_not_in: [String!]

  """All values less than the given value."""
  HPIO_lt: String

  """All values less than or equal the given value."""
  HPIO_lte: String

  """All values greater than the given value."""
  HPIO_gt: String

  """All values greater than or equal the given value."""
  HPIO_gte: String

  """All values containing the given string."""
  HPIO_contains: String

  """All values not containing the given string."""
  HPIO_not_contains: String

  """All values starting with the given string."""
  HPIO_starts_with: String

  """All values not starting with the given string."""
  HPIO_not_starts_with: String

  """All values ending with the given string."""
  HPIO_ends_with: String

  """All values not ending with the given string."""
  HPIO_not_ends_with: String
  legalName: String

  """All values that are not equal to given value."""
  legalName_not: String

  """All values that are contained in given list."""
  legalName_in: [String!]

  """All values that are not contained in given list."""
  legalName_not_in: [String!]

  """All values less than the given value."""
  legalName_lt: String

  """All values less than or equal the given value."""
  legalName_lte: String

  """All values greater than the given value."""
  legalName_gt: String

  """All values greater than or equal the given value."""
  legalName_gte: String

  """All values containing the given string."""
  legalName_contains: String

  """All values not containing the given string."""
  legalName_not_contains: String

  """All values starting with the given string."""
  legalName_starts_with: String

  """All values not starting with the given string."""
  legalName_not_starts_with: String

  """All values ending with the given string."""
  legalName_ends_with: String

  """All values not ending with the given string."""
  legalName_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  salesTax: Boolean

  """All values that are not equal to given value."""
  salesTax_not: Boolean
  websiteURL: String

  """All values that are not equal to given value."""
  websiteURL_not: String

  """All values that are contained in given list."""
  websiteURL_in: [String!]

  """All values that are not contained in given list."""
  websiteURL_not_in: [String!]

  """All values less than the given value."""
  websiteURL_lt: String

  """All values less than or equal the given value."""
  websiteURL_lte: String

  """All values greater than the given value."""
  websiteURL_gt: String

  """All values greater than or equal the given value."""
  websiteURL_gte: String

  """All values containing the given string."""
  websiteURL_contains: String

  """All values not containing the given string."""
  websiteURL_not_contains: String

  """All values starting with the given string."""
  websiteURL_starts_with: String

  """All values not starting with the given string."""
  websiteURL_not_starts_with: String

  """All values ending with the given string."""
  websiteURL_ends_with: String

  """All values not ending with the given string."""
  websiteURL_not_ends_with: String
  stripeCustomerId: String

  """All values that are not equal to given value."""
  stripeCustomerId_not: String

  """All values that are contained in given list."""
  stripeCustomerId_in: [String!]

  """All values that are not contained in given list."""
  stripeCustomerId_not_in: [String!]

  """All values less than the given value."""
  stripeCustomerId_lt: String

  """All values less than or equal the given value."""
  stripeCustomerId_lte: String

  """All values greater than the given value."""
  stripeCustomerId_gt: String

  """All values greater than or equal the given value."""
  stripeCustomerId_gte: String

  """All values containing the given string."""
  stripeCustomerId_contains: String

  """All values not containing the given string."""
  stripeCustomerId_not_contains: String

  """All values starting with the given string."""
  stripeCustomerId_starts_with: String

  """All values not starting with the given string."""
  stripeCustomerId_not_starts_with: String

  """All values ending with the given string."""
  stripeCustomerId_ends_with: String

  """All values not ending with the given string."""
  stripeCustomerId_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  logo: AttachmentWhereInput
  addresses_every: AddressWhereInput
  addresses_some: AddressWhereInput
  addresses_none: AddressWhereInput
  contacts_every: ContactWhereInput
  contacts_some: ContactWhereInput
  contacts_none: ContactWhereInput
  companyMembers_every: CompanyMemberWhereInput
  companyMembers_some: CompanyMemberWhereInput
  companyMembers_none: CompanyMemberWhereInput
  activePlan: PlanWhereInput
}

input CompanyWhereUniqueInput {
  id: ID
}

type Contact implements Node {
  id: ID!
  name: String
  surname: String
  email: String
  mobileCode: String
  mobileNumber: String
  landlineCode: String
  landlineNumber: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ContactConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContactEdge]!
  aggregate: AggregateContact!
}

input ContactCreateInput {
  id: ID
  name: String
  surname: String
  email: String
  mobileCode: String
  mobileNumber: String
  landlineCode: String
  landlineNumber: String
}

input ContactCreateManyInput {
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

"""An edge in a connection."""
type ContactEdge {
  """The item at the end of the edge."""
  node: Contact!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContactOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  surname_ASC
  surname_DESC
  email_ASC
  email_DESC
  mobileCode_ASC
  mobileCode_DESC
  mobileNumber_ASC
  mobileNumber_DESC
  landlineCode_ASC
  landlineCode_DESC
  landlineNumber_ASC
  landlineNumber_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContactPreviousValues {
  id: ID!
  name: String
  surname: String
  email: String
  mobileCode: String
  mobileNumber: String
  landlineCode: String
  landlineNumber: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ContactScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ContactScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContactScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContactScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  surname: String

  """All values that are not equal to given value."""
  surname_not: String

  """All values that are contained in given list."""
  surname_in: [String!]

  """All values that are not contained in given list."""
  surname_not_in: [String!]

  """All values less than the given value."""
  surname_lt: String

  """All values less than or equal the given value."""
  surname_lte: String

  """All values greater than the given value."""
  surname_gt: String

  """All values greater than or equal the given value."""
  surname_gte: String

  """All values containing the given string."""
  surname_contains: String

  """All values not containing the given string."""
  surname_not_contains: String

  """All values starting with the given string."""
  surname_starts_with: String

  """All values not starting with the given string."""
  surname_not_starts_with: String

  """All values ending with the given string."""
  surname_ends_with: String

  """All values not ending with the given string."""
  surname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  mobileCode: String

  """All values that are not equal to given value."""
  mobileCode_not: String

  """All values that are contained in given list."""
  mobileCode_in: [String!]

  """All values that are not contained in given list."""
  mobileCode_not_in: [String!]

  """All values less than the given value."""
  mobileCode_lt: String

  """All values less than or equal the given value."""
  mobileCode_lte: String

  """All values greater than the given value."""
  mobileCode_gt: String

  """All values greater than or equal the given value."""
  mobileCode_gte: String

  """All values containing the given string."""
  mobileCode_contains: String

  """All values not containing the given string."""
  mobileCode_not_contains: String

  """All values starting with the given string."""
  mobileCode_starts_with: String

  """All values not starting with the given string."""
  mobileCode_not_starts_with: String

  """All values ending with the given string."""
  mobileCode_ends_with: String

  """All values not ending with the given string."""
  mobileCode_not_ends_with: String
  mobileNumber: String

  """All values that are not equal to given value."""
  mobileNumber_not: String

  """All values that are contained in given list."""
  mobileNumber_in: [String!]

  """All values that are not contained in given list."""
  mobileNumber_not_in: [String!]

  """All values less than the given value."""
  mobileNumber_lt: String

  """All values less than or equal the given value."""
  mobileNumber_lte: String

  """All values greater than the given value."""
  mobileNumber_gt: String

  """All values greater than or equal the given value."""
  mobileNumber_gte: String

  """All values containing the given string."""
  mobileNumber_contains: String

  """All values not containing the given string."""
  mobileNumber_not_contains: String

  """All values starting with the given string."""
  mobileNumber_starts_with: String

  """All values not starting with the given string."""
  mobileNumber_not_starts_with: String

  """All values ending with the given string."""
  mobileNumber_ends_with: String

  """All values not ending with the given string."""
  mobileNumber_not_ends_with: String
  landlineCode: String

  """All values that are not equal to given value."""
  landlineCode_not: String

  """All values that are contained in given list."""
  landlineCode_in: [String!]

  """All values that are not contained in given list."""
  landlineCode_not_in: [String!]

  """All values less than the given value."""
  landlineCode_lt: String

  """All values less than or equal the given value."""
  landlineCode_lte: String

  """All values greater than the given value."""
  landlineCode_gt: String

  """All values greater than or equal the given value."""
  landlineCode_gte: String

  """All values containing the given string."""
  landlineCode_contains: String

  """All values not containing the given string."""
  landlineCode_not_contains: String

  """All values starting with the given string."""
  landlineCode_starts_with: String

  """All values not starting with the given string."""
  landlineCode_not_starts_with: String

  """All values ending with the given string."""
  landlineCode_ends_with: String

  """All values not ending with the given string."""
  landlineCode_not_ends_with: String
  landlineNumber: String

  """All values that are not equal to given value."""
  landlineNumber_not: String

  """All values that are contained in given list."""
  landlineNumber_in: [String!]

  """All values that are not contained in given list."""
  landlineNumber_not_in: [String!]

  """All values less than the given value."""
  landlineNumber_lt: String

  """All values less than or equal the given value."""
  landlineNumber_lte: String

  """All values greater than the given value."""
  landlineNumber_gt: String

  """All values greater than or equal the given value."""
  landlineNumber_gte: String

  """All values containing the given string."""
  landlineNumber_contains: String

  """All values not containing the given string."""
  landlineNumber_not_contains: String

  """All values starting with the given string."""
  landlineNumber_starts_with: String

  """All values not starting with the given string."""
  landlineNumber_not_starts_with: String

  """All values ending with the given string."""
  landlineNumber_ends_with: String

  """All values not ending with the given string."""
  landlineNumber_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ContactSubscriptionPayload {
  mutation: MutationType!
  node: Contact
  updatedFields: [String!]
  previousValues: ContactPreviousValues
}

input ContactSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContactSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContactSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContactSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContactWhereInput
}

input ContactUpdateDataInput {
  name: String
  surname: String
  email: String
  mobileCode: String
  mobileNumber: String
  landlineCode: String
  landlineNumber: String
}

input ContactUpdateInput {
  name: String
  surname: String
  email: String
  mobileCode: String
  mobileNumber: String
  landlineCode: String
  landlineNumber: String
}

input ContactUpdateManyDataInput {
  name: String
  surname: String
  email: String
  mobileCode: String
  mobileNumber: String
  landlineCode: String
  landlineNumber: String
}

input ContactUpdateManyInput {
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  disconnect: [ContactWhereUniqueInput!]
  delete: [ContactWhereUniqueInput!]
  update: [ContactUpdateWithWhereUniqueNestedInput!]
  updateMany: [ContactUpdateManyWithWhereNestedInput!]
  deleteMany: [ContactScalarWhereInput!]
  upsert: [ContactUpsertWithWhereUniqueNestedInput!]
}

input ContactUpdateManyMutationInput {
  name: String
  surname: String
  email: String
  mobileCode: String
  mobileNumber: String
  landlineCode: String
  landlineNumber: String
}

input ContactUpdateManyWithWhereNestedInput {
  where: ContactScalarWhereInput!
  data: ContactUpdateManyDataInput!
}

input ContactUpdateWithWhereUniqueNestedInput {
  where: ContactWhereUniqueInput!
  data: ContactUpdateDataInput!
}

input ContactUpsertWithWhereUniqueNestedInput {
  where: ContactWhereUniqueInput!
  update: ContactUpdateDataInput!
  create: ContactCreateInput!
}

input ContactWhereInput {
  """Logical AND on all given filters."""
  AND: [ContactWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContactWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContactWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  surname: String

  """All values that are not equal to given value."""
  surname_not: String

  """All values that are contained in given list."""
  surname_in: [String!]

  """All values that are not contained in given list."""
  surname_not_in: [String!]

  """All values less than the given value."""
  surname_lt: String

  """All values less than or equal the given value."""
  surname_lte: String

  """All values greater than the given value."""
  surname_gt: String

  """All values greater than or equal the given value."""
  surname_gte: String

  """All values containing the given string."""
  surname_contains: String

  """All values not containing the given string."""
  surname_not_contains: String

  """All values starting with the given string."""
  surname_starts_with: String

  """All values not starting with the given string."""
  surname_not_starts_with: String

  """All values ending with the given string."""
  surname_ends_with: String

  """All values not ending with the given string."""
  surname_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  mobileCode: String

  """All values that are not equal to given value."""
  mobileCode_not: String

  """All values that are contained in given list."""
  mobileCode_in: [String!]

  """All values that are not contained in given list."""
  mobileCode_not_in: [String!]

  """All values less than the given value."""
  mobileCode_lt: String

  """All values less than or equal the given value."""
  mobileCode_lte: String

  """All values greater than the given value."""
  mobileCode_gt: String

  """All values greater than or equal the given value."""
  mobileCode_gte: String

  """All values containing the given string."""
  mobileCode_contains: String

  """All values not containing the given string."""
  mobileCode_not_contains: String

  """All values starting with the given string."""
  mobileCode_starts_with: String

  """All values not starting with the given string."""
  mobileCode_not_starts_with: String

  """All values ending with the given string."""
  mobileCode_ends_with: String

  """All values not ending with the given string."""
  mobileCode_not_ends_with: String
  mobileNumber: String

  """All values that are not equal to given value."""
  mobileNumber_not: String

  """All values that are contained in given list."""
  mobileNumber_in: [String!]

  """All values that are not contained in given list."""
  mobileNumber_not_in: [String!]

  """All values less than the given value."""
  mobileNumber_lt: String

  """All values less than or equal the given value."""
  mobileNumber_lte: String

  """All values greater than the given value."""
  mobileNumber_gt: String

  """All values greater than or equal the given value."""
  mobileNumber_gte: String

  """All values containing the given string."""
  mobileNumber_contains: String

  """All values not containing the given string."""
  mobileNumber_not_contains: String

  """All values starting with the given string."""
  mobileNumber_starts_with: String

  """All values not starting with the given string."""
  mobileNumber_not_starts_with: String

  """All values ending with the given string."""
  mobileNumber_ends_with: String

  """All values not ending with the given string."""
  mobileNumber_not_ends_with: String
  landlineCode: String

  """All values that are not equal to given value."""
  landlineCode_not: String

  """All values that are contained in given list."""
  landlineCode_in: [String!]

  """All values that are not contained in given list."""
  landlineCode_not_in: [String!]

  """All values less than the given value."""
  landlineCode_lt: String

  """All values less than or equal the given value."""
  landlineCode_lte: String

  """All values greater than the given value."""
  landlineCode_gt: String

  """All values greater than or equal the given value."""
  landlineCode_gte: String

  """All values containing the given string."""
  landlineCode_contains: String

  """All values not containing the given string."""
  landlineCode_not_contains: String

  """All values starting with the given string."""
  landlineCode_starts_with: String

  """All values not starting with the given string."""
  landlineCode_not_starts_with: String

  """All values ending with the given string."""
  landlineCode_ends_with: String

  """All values not ending with the given string."""
  landlineCode_not_ends_with: String
  landlineNumber: String

  """All values that are not equal to given value."""
  landlineNumber_not: String

  """All values that are contained in given list."""
  landlineNumber_in: [String!]

  """All values that are not contained in given list."""
  landlineNumber_not_in: [String!]

  """All values less than the given value."""
  landlineNumber_lt: String

  """All values less than or equal the given value."""
  landlineNumber_lte: String

  """All values greater than the given value."""
  landlineNumber_gt: String

  """All values greater than or equal the given value."""
  landlineNumber_gte: String

  """All values containing the given string."""
  landlineNumber_contains: String

  """All values not containing the given string."""
  landlineNumber_not_contains: String

  """All values starting with the given string."""
  landlineNumber_starts_with: String

  """All values not starting with the given string."""
  landlineNumber_not_starts_with: String

  """All values ending with the given string."""
  landlineNumber_ends_with: String

  """All values not ending with the given string."""
  landlineNumber_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input ContactWhereUniqueInput {
  id: ID
}

enum Country {
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AR
  AS
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CC
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CU
  CV
  CW
  CX
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EA
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FM
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HM
  HN
  HR
  HT
  HU
  IC
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IR
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KP
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MH
  MK
  ML
  MM
  MN
  MO
  MP
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NF
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PW
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SD
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SY
  SZ
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  UM
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VI
  VN
  VU
  WF
  WS
  XK
  YE
  YT
  ZA
  ZM
  ZW
}

enum Currency {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTN
  BWP
  BYR
  BZD
  CAD
  CDF
  CHF
  CLP
  CNY
  COP
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GGP
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  IMP
  INR
  IQD
  IRR
  ISK
  JEP
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SPL
  SRD
  STD
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TVD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VEF
  VND
  VUV
  WST
  XAF
  XCD
  XDR
  XOF
  XPF
  YER
  ZAR
  ZMW
}

type Customer implements Node {
  id: ID!
  company: Company!
  description: String
  govNumber: String
  salesTax: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  billingFrequency: SupplierTermsOfPayment
  meansTestedFee: MeansTestedFee
  basicDailyFee: BasicDailyFee
  contacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact!]
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CustomerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CustomerEdge]!
  aggregate: AggregateCustomer!
}

input CustomerCreateInput {
  id: ID
  description: String
  govNumber: String
  salesTax: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  billingFrequency: SupplierTermsOfPayment
  company: CompanyCreateOneInput!
  meansTestedFee: MeansTestedFeeCreateOneInput
  basicDailyFee: BasicDailyFeeCreateOneInput
  contacts: ContactCreateManyInput
  addresses: AddressCreateManyInput
}

input CustomerCreateOneInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

"""An edge in a connection."""
type CustomerEdge {
  """The item at the end of the edge."""
  node: Customer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CustomerOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  govNumber_ASC
  govNumber_DESC
  salesTax_ASC
  salesTax_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  name_ASC
  name_DESC
  billingFrequency_ASC
  billingFrequency_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CustomerPreviousValues {
  id: ID!
  description: String
  govNumber: String
  salesTax: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  billingFrequency: SupplierTermsOfPayment
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CustomerSubscriptionPayload {
  mutation: MutationType!
  node: Customer
  updatedFields: [String!]
  previousValues: CustomerPreviousValues
}

input CustomerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CustomerWhereInput
}

input CustomerUpdateDataInput {
  description: String
  govNumber: String
  salesTax: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  billingFrequency: SupplierTermsOfPayment
  company: CompanyUpdateOneRequiredInput
  meansTestedFee: MeansTestedFeeUpdateOneInput
  basicDailyFee: BasicDailyFeeUpdateOneInput
  contacts: ContactUpdateManyInput
  addresses: AddressUpdateManyInput
}

input CustomerUpdateInput {
  description: String
  govNumber: String
  salesTax: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  billingFrequency: SupplierTermsOfPayment
  company: CompanyUpdateOneRequiredInput
  meansTestedFee: MeansTestedFeeUpdateOneInput
  basicDailyFee: BasicDailyFeeUpdateOneInput
  contacts: ContactUpdateManyInput
  addresses: AddressUpdateManyInput
}

input CustomerUpdateManyMutationInput {
  description: String
  govNumber: String
  salesTax: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  billingFrequency: SupplierTermsOfPayment
}

input CustomerUpdateOneInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CustomerUpdateDataInput
  upsert: CustomerUpsertNestedInput
}

input CustomerUpsertNestedInput {
  update: CustomerUpdateDataInput!
  create: CustomerCreateInput!
}

input CustomerWhereInput {
  """Logical AND on all given filters."""
  AND: [CustomerWhereInput!]

  """Logical OR on all given filters."""
  OR: [CustomerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CustomerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  govNumber: String

  """All values that are not equal to given value."""
  govNumber_not: String

  """All values that are contained in given list."""
  govNumber_in: [String!]

  """All values that are not contained in given list."""
  govNumber_not_in: [String!]

  """All values less than the given value."""
  govNumber_lt: String

  """All values less than or equal the given value."""
  govNumber_lte: String

  """All values greater than the given value."""
  govNumber_gt: String

  """All values greater than or equal the given value."""
  govNumber_gte: String

  """All values containing the given string."""
  govNumber_contains: String

  """All values not containing the given string."""
  govNumber_not_contains: String

  """All values starting with the given string."""
  govNumber_starts_with: String

  """All values not starting with the given string."""
  govNumber_not_starts_with: String

  """All values ending with the given string."""
  govNumber_ends_with: String

  """All values not ending with the given string."""
  govNumber_not_ends_with: String
  salesTax: Boolean

  """All values that are not equal to given value."""
  salesTax_not: Boolean
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  billingFrequency: SupplierTermsOfPayment

  """All values that are not equal to given value."""
  billingFrequency_not: SupplierTermsOfPayment

  """All values that are contained in given list."""
  billingFrequency_in: [SupplierTermsOfPayment!]

  """All values that are not contained in given list."""
  billingFrequency_not_in: [SupplierTermsOfPayment!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
  meansTestedFee: MeansTestedFeeWhereInput
  basicDailyFee: BasicDailyFeeWhereInput
  contacts_every: ContactWhereInput
  contacts_some: ContactWhereInput
  contacts_none: ContactWhereInput
  addresses_every: AddressWhereInput
  addresses_some: AddressWhereInput
  addresses_none: AddressWhereInput
}

input CustomerWhereUniqueInput {
  id: ID
}

scalar DateTime

type Disease implements Node {
  id: ID!
  name: String
}

"""A connection to a list of items."""
type DiseaseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DiseaseEdge]!
  aggregate: AggregateDisease!
}

input DiseaseCreateInput {
  id: ID
  name: String
}

input DiseaseCreateOneInput {
  create: DiseaseCreateInput
  connect: DiseaseWhereUniqueInput
}

"""An edge in a connection."""
type DiseaseEdge {
  """The item at the end of the edge."""
  node: Disease!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DiseaseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type DiseasePreviousValues {
  id: ID!
  name: String
}

type DiseaseSubscriptionPayload {
  mutation: MutationType!
  node: Disease
  updatedFields: [String!]
  previousValues: DiseasePreviousValues
}

input DiseaseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DiseaseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiseaseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiseaseSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DiseaseWhereInput
}

input DiseaseUpdateDataInput {
  name: String
}

input DiseaseUpdateInput {
  name: String
}

input DiseaseUpdateManyMutationInput {
  name: String
}

input DiseaseUpdateOneInput {
  create: DiseaseCreateInput
  connect: DiseaseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DiseaseUpdateDataInput
  upsert: DiseaseUpsertNestedInput
}

input DiseaseUpsertNestedInput {
  update: DiseaseUpdateDataInput!
  create: DiseaseCreateInput!
}

input DiseaseWhereInput {
  """Logical AND on all given filters."""
  AND: [DiseaseWhereInput!]

  """Logical OR on all given filters."""
  OR: [DiseaseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DiseaseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input DiseaseWhereUniqueInput {
  id: ID
}

enum DrCr {
  DEBIT
  CREDIT
}

enum DVACardType {
  GOLD
  WHITE
  ORANGE
}

enum Gender {
  MALE
  FEMALE
  INTERSEX
  UNSPECIFIED
}

type HealthcareProvider implements Node {
  id: ID!
  occupation: String
  hpii: String
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  emailAddress: String
  gender: Gender
  address: Address
  company: Company
  ahpraNumber: String
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type HealthcareProviderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HealthcareProviderEdge]!
  aggregate: AggregateHealthcareProvider!
}

input HealthcareProviderCreateInput {
  id: ID
  occupation: String
  hpii: String
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  emailAddress: String
  gender: Gender
  ahpraNumber: String
  isArchived: Boolean
  isDeleted: Boolean
  address: AddressCreateOneInput
  company: CompanyCreateOneInput
}

"""An edge in a connection."""
type HealthcareProviderEdge {
  """The item at the end of the edge."""
  node: HealthcareProvider!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HealthcareProviderOrderByInput {
  id_ASC
  id_DESC
  occupation_ASC
  occupation_DESC
  hpii_ASC
  hpii_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  dateOfBirth_ASC
  dateOfBirth_DESC
  emailAddress_ASC
  emailAddress_DESC
  gender_ASC
  gender_DESC
  ahpraNumber_ASC
  ahpraNumber_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HealthcareProviderPreviousValues {
  id: ID!
  occupation: String
  hpii: String
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  emailAddress: String
  gender: Gender
  ahpraNumber: String
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HealthcareProviderSubscriptionPayload {
  mutation: MutationType!
  node: HealthcareProvider
  updatedFields: [String!]
  previousValues: HealthcareProviderPreviousValues
}

input HealthcareProviderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HealthcareProviderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HealthcareProviderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HealthcareProviderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HealthcareProviderWhereInput
}

input HealthcareProviderUpdateInput {
  occupation: String
  hpii: String
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  emailAddress: String
  gender: Gender
  ahpraNumber: String
  isArchived: Boolean
  isDeleted: Boolean
  address: AddressUpdateOneInput
  company: CompanyUpdateOneInput
}

input HealthcareProviderUpdateManyMutationInput {
  occupation: String
  hpii: String
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  emailAddress: String
  gender: Gender
  ahpraNumber: String
  isArchived: Boolean
  isDeleted: Boolean
}

input HealthcareProviderWhereInput {
  """Logical AND on all given filters."""
  AND: [HealthcareProviderWhereInput!]

  """Logical OR on all given filters."""
  OR: [HealthcareProviderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HealthcareProviderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  occupation: String

  """All values that are not equal to given value."""
  occupation_not: String

  """All values that are contained in given list."""
  occupation_in: [String!]

  """All values that are not contained in given list."""
  occupation_not_in: [String!]

  """All values less than the given value."""
  occupation_lt: String

  """All values less than or equal the given value."""
  occupation_lte: String

  """All values greater than the given value."""
  occupation_gt: String

  """All values greater than or equal the given value."""
  occupation_gte: String

  """All values containing the given string."""
  occupation_contains: String

  """All values not containing the given string."""
  occupation_not_contains: String

  """All values starting with the given string."""
  occupation_starts_with: String

  """All values not starting with the given string."""
  occupation_not_starts_with: String

  """All values ending with the given string."""
  occupation_ends_with: String

  """All values not ending with the given string."""
  occupation_not_ends_with: String
  hpii: String

  """All values that are not equal to given value."""
  hpii_not: String

  """All values that are contained in given list."""
  hpii_in: [String!]

  """All values that are not contained in given list."""
  hpii_not_in: [String!]

  """All values less than the given value."""
  hpii_lt: String

  """All values less than or equal the given value."""
  hpii_lte: String

  """All values greater than the given value."""
  hpii_gt: String

  """All values greater than or equal the given value."""
  hpii_gte: String

  """All values containing the given string."""
  hpii_contains: String

  """All values not containing the given string."""
  hpii_not_contains: String

  """All values starting with the given string."""
  hpii_starts_with: String

  """All values not starting with the given string."""
  hpii_not_starts_with: String

  """All values ending with the given string."""
  hpii_ends_with: String

  """All values not ending with the given string."""
  hpii_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  dateOfBirth: DateTime

  """All values that are not equal to given value."""
  dateOfBirth_not: DateTime

  """All values that are contained in given list."""
  dateOfBirth_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfBirth_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfBirth_lt: DateTime

  """All values less than or equal the given value."""
  dateOfBirth_lte: DateTime

  """All values greater than the given value."""
  dateOfBirth_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfBirth_gte: DateTime
  emailAddress: String

  """All values that are not equal to given value."""
  emailAddress_not: String

  """All values that are contained in given list."""
  emailAddress_in: [String!]

  """All values that are not contained in given list."""
  emailAddress_not_in: [String!]

  """All values less than the given value."""
  emailAddress_lt: String

  """All values less than or equal the given value."""
  emailAddress_lte: String

  """All values greater than the given value."""
  emailAddress_gt: String

  """All values greater than or equal the given value."""
  emailAddress_gte: String

  """All values containing the given string."""
  emailAddress_contains: String

  """All values not containing the given string."""
  emailAddress_not_contains: String

  """All values starting with the given string."""
  emailAddress_starts_with: String

  """All values not starting with the given string."""
  emailAddress_not_starts_with: String

  """All values ending with the given string."""
  emailAddress_ends_with: String

  """All values not ending with the given string."""
  emailAddress_not_ends_with: String
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  ahpraNumber: String

  """All values that are not equal to given value."""
  ahpraNumber_not: String

  """All values that are contained in given list."""
  ahpraNumber_in: [String!]

  """All values that are not contained in given list."""
  ahpraNumber_not_in: [String!]

  """All values less than the given value."""
  ahpraNumber_lt: String

  """All values less than or equal the given value."""
  ahpraNumber_lte: String

  """All values greater than the given value."""
  ahpraNumber_gt: String

  """All values greater than or equal the given value."""
  ahpraNumber_gte: String

  """All values containing the given string."""
  ahpraNumber_contains: String

  """All values not containing the given string."""
  ahpraNumber_not_contains: String

  """All values starting with the given string."""
  ahpraNumber_starts_with: String

  """All values not starting with the given string."""
  ahpraNumber_not_starts_with: String

  """All values ending with the given string."""
  ahpraNumber_ends_with: String

  """All values not ending with the given string."""
  ahpraNumber_not_ends_with: String
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  address: AddressWhereInput
  company: CompanyWhereInput
}

input HealthcareProviderWhereUniqueInput {
  id: ID
}

type HILog implements Node {
  id: ID!
  hpio: String
  hpii: String
  ihi: String
  timeWaitedForSalus: Int
  csp: String
  hiWebServiceUsed: String
  hiWebServiceVersion: String
  hiNumberStatus: HINumberStatus
  recordStatus: String
  salusResponse: SalusResponse
  failureMessage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type HILogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HILogEdge]!
  aggregate: AggregateHILog!
}

input HILogCreateInput {
  id: ID
  hpio: String
  hpii: String
  ihi: String
  timeWaitedForSalus: Int
  csp: String
  hiWebServiceUsed: String
  hiWebServiceVersion: String
  hiNumberStatus: HINumberStatus
  recordStatus: String
  salusResponse: SalusResponse
  failureMessage: String
}

"""An edge in a connection."""
type HILogEdge {
  """The item at the end of the edge."""
  node: HILog!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HILogOrderByInput {
  id_ASC
  id_DESC
  hpio_ASC
  hpio_DESC
  hpii_ASC
  hpii_DESC
  ihi_ASC
  ihi_DESC
  timeWaitedForSalus_ASC
  timeWaitedForSalus_DESC
  csp_ASC
  csp_DESC
  hiWebServiceUsed_ASC
  hiWebServiceUsed_DESC
  hiWebServiceVersion_ASC
  hiWebServiceVersion_DESC
  hiNumberStatus_ASC
  hiNumberStatus_DESC
  recordStatus_ASC
  recordStatus_DESC
  salusResponse_ASC
  salusResponse_DESC
  failureMessage_ASC
  failureMessage_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HILogPreviousValues {
  id: ID!
  hpio: String
  hpii: String
  ihi: String
  timeWaitedForSalus: Int
  csp: String
  hiWebServiceUsed: String
  hiWebServiceVersion: String
  hiNumberStatus: HINumberStatus
  recordStatus: String
  salusResponse: SalusResponse
  failureMessage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HILogSubscriptionPayload {
  mutation: MutationType!
  node: HILog
  updatedFields: [String!]
  previousValues: HILogPreviousValues
}

input HILogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HILogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HILogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HILogSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HILogWhereInput
}

input HILogUpdateInput {
  hpio: String
  hpii: String
  ihi: String
  timeWaitedForSalus: Int
  csp: String
  hiWebServiceUsed: String
  hiWebServiceVersion: String
  hiNumberStatus: HINumberStatus
  recordStatus: String
  salusResponse: SalusResponse
  failureMessage: String
}

input HILogUpdateManyMutationInput {
  hpio: String
  hpii: String
  ihi: String
  timeWaitedForSalus: Int
  csp: String
  hiWebServiceUsed: String
  hiWebServiceVersion: String
  hiNumberStatus: HINumberStatus
  recordStatus: String
  salusResponse: SalusResponse
  failureMessage: String
}

input HILogWhereInput {
  """Logical AND on all given filters."""
  AND: [HILogWhereInput!]

  """Logical OR on all given filters."""
  OR: [HILogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HILogWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  hpio: String

  """All values that are not equal to given value."""
  hpio_not: String

  """All values that are contained in given list."""
  hpio_in: [String!]

  """All values that are not contained in given list."""
  hpio_not_in: [String!]

  """All values less than the given value."""
  hpio_lt: String

  """All values less than or equal the given value."""
  hpio_lte: String

  """All values greater than the given value."""
  hpio_gt: String

  """All values greater than or equal the given value."""
  hpio_gte: String

  """All values containing the given string."""
  hpio_contains: String

  """All values not containing the given string."""
  hpio_not_contains: String

  """All values starting with the given string."""
  hpio_starts_with: String

  """All values not starting with the given string."""
  hpio_not_starts_with: String

  """All values ending with the given string."""
  hpio_ends_with: String

  """All values not ending with the given string."""
  hpio_not_ends_with: String
  hpii: String

  """All values that are not equal to given value."""
  hpii_not: String

  """All values that are contained in given list."""
  hpii_in: [String!]

  """All values that are not contained in given list."""
  hpii_not_in: [String!]

  """All values less than the given value."""
  hpii_lt: String

  """All values less than or equal the given value."""
  hpii_lte: String

  """All values greater than the given value."""
  hpii_gt: String

  """All values greater than or equal the given value."""
  hpii_gte: String

  """All values containing the given string."""
  hpii_contains: String

  """All values not containing the given string."""
  hpii_not_contains: String

  """All values starting with the given string."""
  hpii_starts_with: String

  """All values not starting with the given string."""
  hpii_not_starts_with: String

  """All values ending with the given string."""
  hpii_ends_with: String

  """All values not ending with the given string."""
  hpii_not_ends_with: String
  ihi: String

  """All values that are not equal to given value."""
  ihi_not: String

  """All values that are contained in given list."""
  ihi_in: [String!]

  """All values that are not contained in given list."""
  ihi_not_in: [String!]

  """All values less than the given value."""
  ihi_lt: String

  """All values less than or equal the given value."""
  ihi_lte: String

  """All values greater than the given value."""
  ihi_gt: String

  """All values greater than or equal the given value."""
  ihi_gte: String

  """All values containing the given string."""
  ihi_contains: String

  """All values not containing the given string."""
  ihi_not_contains: String

  """All values starting with the given string."""
  ihi_starts_with: String

  """All values not starting with the given string."""
  ihi_not_starts_with: String

  """All values ending with the given string."""
  ihi_ends_with: String

  """All values not ending with the given string."""
  ihi_not_ends_with: String
  timeWaitedForSalus: Int

  """All values that are not equal to given value."""
  timeWaitedForSalus_not: Int

  """All values that are contained in given list."""
  timeWaitedForSalus_in: [Int!]

  """All values that are not contained in given list."""
  timeWaitedForSalus_not_in: [Int!]

  """All values less than the given value."""
  timeWaitedForSalus_lt: Int

  """All values less than or equal the given value."""
  timeWaitedForSalus_lte: Int

  """All values greater than the given value."""
  timeWaitedForSalus_gt: Int

  """All values greater than or equal the given value."""
  timeWaitedForSalus_gte: Int
  csp: String

  """All values that are not equal to given value."""
  csp_not: String

  """All values that are contained in given list."""
  csp_in: [String!]

  """All values that are not contained in given list."""
  csp_not_in: [String!]

  """All values less than the given value."""
  csp_lt: String

  """All values less than or equal the given value."""
  csp_lte: String

  """All values greater than the given value."""
  csp_gt: String

  """All values greater than or equal the given value."""
  csp_gte: String

  """All values containing the given string."""
  csp_contains: String

  """All values not containing the given string."""
  csp_not_contains: String

  """All values starting with the given string."""
  csp_starts_with: String

  """All values not starting with the given string."""
  csp_not_starts_with: String

  """All values ending with the given string."""
  csp_ends_with: String

  """All values not ending with the given string."""
  csp_not_ends_with: String
  hiWebServiceUsed: String

  """All values that are not equal to given value."""
  hiWebServiceUsed_not: String

  """All values that are contained in given list."""
  hiWebServiceUsed_in: [String!]

  """All values that are not contained in given list."""
  hiWebServiceUsed_not_in: [String!]

  """All values less than the given value."""
  hiWebServiceUsed_lt: String

  """All values less than or equal the given value."""
  hiWebServiceUsed_lte: String

  """All values greater than the given value."""
  hiWebServiceUsed_gt: String

  """All values greater than or equal the given value."""
  hiWebServiceUsed_gte: String

  """All values containing the given string."""
  hiWebServiceUsed_contains: String

  """All values not containing the given string."""
  hiWebServiceUsed_not_contains: String

  """All values starting with the given string."""
  hiWebServiceUsed_starts_with: String

  """All values not starting with the given string."""
  hiWebServiceUsed_not_starts_with: String

  """All values ending with the given string."""
  hiWebServiceUsed_ends_with: String

  """All values not ending with the given string."""
  hiWebServiceUsed_not_ends_with: String
  hiWebServiceVersion: String

  """All values that are not equal to given value."""
  hiWebServiceVersion_not: String

  """All values that are contained in given list."""
  hiWebServiceVersion_in: [String!]

  """All values that are not contained in given list."""
  hiWebServiceVersion_not_in: [String!]

  """All values less than the given value."""
  hiWebServiceVersion_lt: String

  """All values less than or equal the given value."""
  hiWebServiceVersion_lte: String

  """All values greater than the given value."""
  hiWebServiceVersion_gt: String

  """All values greater than or equal the given value."""
  hiWebServiceVersion_gte: String

  """All values containing the given string."""
  hiWebServiceVersion_contains: String

  """All values not containing the given string."""
  hiWebServiceVersion_not_contains: String

  """All values starting with the given string."""
  hiWebServiceVersion_starts_with: String

  """All values not starting with the given string."""
  hiWebServiceVersion_not_starts_with: String

  """All values ending with the given string."""
  hiWebServiceVersion_ends_with: String

  """All values not ending with the given string."""
  hiWebServiceVersion_not_ends_with: String
  hiNumberStatus: HINumberStatus

  """All values that are not equal to given value."""
  hiNumberStatus_not: HINumberStatus

  """All values that are contained in given list."""
  hiNumberStatus_in: [HINumberStatus!]

  """All values that are not contained in given list."""
  hiNumberStatus_not_in: [HINumberStatus!]
  recordStatus: String

  """All values that are not equal to given value."""
  recordStatus_not: String

  """All values that are contained in given list."""
  recordStatus_in: [String!]

  """All values that are not contained in given list."""
  recordStatus_not_in: [String!]

  """All values less than the given value."""
  recordStatus_lt: String

  """All values less than or equal the given value."""
  recordStatus_lte: String

  """All values greater than the given value."""
  recordStatus_gt: String

  """All values greater than or equal the given value."""
  recordStatus_gte: String

  """All values containing the given string."""
  recordStatus_contains: String

  """All values not containing the given string."""
  recordStatus_not_contains: String

  """All values starting with the given string."""
  recordStatus_starts_with: String

  """All values not starting with the given string."""
  recordStatus_not_starts_with: String

  """All values ending with the given string."""
  recordStatus_ends_with: String

  """All values not ending with the given string."""
  recordStatus_not_ends_with: String
  salusResponse: SalusResponse

  """All values that are not equal to given value."""
  salusResponse_not: SalusResponse

  """All values that are contained in given list."""
  salusResponse_in: [SalusResponse!]

  """All values that are not contained in given list."""
  salusResponse_not_in: [SalusResponse!]
  failureMessage: String

  """All values that are not equal to given value."""
  failureMessage_not: String

  """All values that are contained in given list."""
  failureMessage_in: [String!]

  """All values that are not contained in given list."""
  failureMessage_not_in: [String!]

  """All values less than the given value."""
  failureMessage_lt: String

  """All values less than or equal the given value."""
  failureMessage_lte: String

  """All values greater than the given value."""
  failureMessage_gt: String

  """All values greater than or equal the given value."""
  failureMessage_gte: String

  """All values containing the given string."""
  failureMessage_contains: String

  """All values not containing the given string."""
  failureMessage_not_contains: String

  """All values starting with the given string."""
  failureMessage_starts_with: String

  """All values not starting with the given string."""
  failureMessage_not_starts_with: String

  """All values ending with the given string."""
  failureMessage_ends_with: String

  """All values not ending with the given string."""
  failureMessage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input HILogWhereUniqueInput {
  id: ID
}

enum HINumberStatus {
  ACTIVE
  RETIRED
  RESOLVED
  DEACTIVATED
}

type ImmunisationSchedule implements Node {
  id: ID!
  ageNumber: Int
  agePeriod: PeriodUnit
  disease: Disease
  vaccineBrand: VaccineBrand
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ImmunisationScheduleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImmunisationScheduleEdge]!
  aggregate: AggregateImmunisationSchedule!
}

input ImmunisationScheduleCreateInput {
  id: ID
  ageNumber: Int
  agePeriod: PeriodUnit
  disease: DiseaseCreateOneInput
  vaccineBrand: VaccineBrandCreateOneInput
}

"""An edge in a connection."""
type ImmunisationScheduleEdge {
  """The item at the end of the edge."""
  node: ImmunisationSchedule!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ImmunisationScheduleOrderByInput {
  id_ASC
  id_DESC
  ageNumber_ASC
  ageNumber_DESC
  agePeriod_ASC
  agePeriod_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ImmunisationSchedulePreviousValues {
  id: ID!
  ageNumber: Int
  agePeriod: PeriodUnit
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ImmunisationScheduleSubscriptionPayload {
  mutation: MutationType!
  node: ImmunisationSchedule
  updatedFields: [String!]
  previousValues: ImmunisationSchedulePreviousValues
}

input ImmunisationScheduleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ImmunisationScheduleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImmunisationScheduleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImmunisationScheduleSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ImmunisationScheduleWhereInput
}

input ImmunisationScheduleUpdateInput {
  ageNumber: Int
  agePeriod: PeriodUnit
  disease: DiseaseUpdateOneInput
  vaccineBrand: VaccineBrandUpdateOneInput
}

input ImmunisationScheduleUpdateManyMutationInput {
  ageNumber: Int
  agePeriod: PeriodUnit
}

input ImmunisationScheduleWhereInput {
  """Logical AND on all given filters."""
  AND: [ImmunisationScheduleWhereInput!]

  """Logical OR on all given filters."""
  OR: [ImmunisationScheduleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ImmunisationScheduleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  ageNumber: Int

  """All values that are not equal to given value."""
  ageNumber_not: Int

  """All values that are contained in given list."""
  ageNumber_in: [Int!]

  """All values that are not contained in given list."""
  ageNumber_not_in: [Int!]

  """All values less than the given value."""
  ageNumber_lt: Int

  """All values less than or equal the given value."""
  ageNumber_lte: Int

  """All values greater than the given value."""
  ageNumber_gt: Int

  """All values greater than or equal the given value."""
  ageNumber_gte: Int
  agePeriod: PeriodUnit

  """All values that are not equal to given value."""
  agePeriod_not: PeriodUnit

  """All values that are contained in given list."""
  agePeriod_in: [PeriodUnit!]

  """All values that are not contained in given list."""
  agePeriod_not_in: [PeriodUnit!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  disease: DiseaseWhereInput
  vaccineBrand: VaccineBrandWhereInput
}

input ImmunisationScheduleWhereUniqueInput {
  id: ID
}

type Integration implements Node {
  id: ID!
  company: Company!
  data: Json
  type: IntegrationType
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type IntegrationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IntegrationEdge]!
  aggregate: AggregateIntegration!
}

input IntegrationCreateInput {
  id: ID
  data: Json
  type: IntegrationType
  company: CompanyCreateOneInput!
}

"""An edge in a connection."""
type IntegrationEdge {
  """The item at the end of the edge."""
  node: Integration!

  """A cursor for use in pagination."""
  cursor: String!
}

enum IntegrationOrderByInput {
  id_ASC
  id_DESC
  data_ASC
  data_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IntegrationPreviousValues {
  id: ID!
  data: Json
  type: IntegrationType
  createdAt: DateTime!
  updatedAt: DateTime!
}

type IntegrationSubscriptionPayload {
  mutation: MutationType!
  node: Integration
  updatedFields: [String!]
  previousValues: IntegrationPreviousValues
}

input IntegrationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [IntegrationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [IntegrationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IntegrationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IntegrationWhereInput
}

enum IntegrationType {
  SLACK
}

input IntegrationUpdateInput {
  data: Json
  type: IntegrationType
  company: CompanyUpdateOneRequiredInput
}

input IntegrationUpdateManyMutationInput {
  data: Json
  type: IntegrationType
}

input IntegrationWhereInput {
  """Logical AND on all given filters."""
  AND: [IntegrationWhereInput!]

  """Logical OR on all given filters."""
  OR: [IntegrationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IntegrationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: IntegrationType

  """All values that are not equal to given value."""
  type_not: IntegrationType

  """All values that are contained in given list."""
  type_in: [IntegrationType!]

  """All values that are not contained in given list."""
  type_not_in: [IntegrationType!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
}

input IntegrationWhereUniqueInput {
  id: ID
}

type Inventory implements Node {
  id: ID!
  name: String
  inventoryModel: InventoryModel
  uom: UOM
  price: Float
  SellingPrice: Float
  Barcode: String
  Taxable: Boolean
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type InventoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InventoryEdge]!
  aggregate: AggregateInventory!
}

input InventoryCreateInput {
  id: ID
  name: String
  inventoryModel: InventoryModel
  uom: UOM
  price: Float
  SellingPrice: Float
  Barcode: String
  Taxable: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyCreateOneInput!
}

input InventoryCreateOneInput {
  create: InventoryCreateInput
  connect: InventoryWhereUniqueInput
}

"""An edge in a connection."""
type InventoryEdge {
  """The item at the end of the edge."""
  node: Inventory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InventoryModel {
  FIFO
  LIFO
  WEIGHTED_AVERAGE
}

type InventoryOnHand implements Node {
  id: ID!
  date: DateTime
  item: Inventory
  pbsDrug: String
  onHandQty: Int
  purchaseOrder: PurchaseOrder
  warehouse: WareHouse
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type InventoryOnHandConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InventoryOnHandEdge]!
  aggregate: AggregateInventoryOnHand!
}

input InventoryOnHandCreateInput {
  id: ID
  date: DateTime
  pbsDrug: String
  onHandQty: Int
  isArchived: Boolean
  isDeleted: Boolean
  item: InventoryCreateOneInput
  purchaseOrder: PurchaseOrderCreateOneInput
  warehouse: WareHouseCreateOneInput
  company: CompanyCreateOneInput!
}

"""An edge in a connection."""
type InventoryOnHandEdge {
  """The item at the end of the edge."""
  node: InventoryOnHand!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InventoryOnHandOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  pbsDrug_ASC
  pbsDrug_DESC
  onHandQty_ASC
  onHandQty_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InventoryOnHandPreviousValues {
  id: ID!
  date: DateTime
  pbsDrug: String
  onHandQty: Int
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InventoryOnHandSubscriptionPayload {
  mutation: MutationType!
  node: InventoryOnHand
  updatedFields: [String!]
  previousValues: InventoryOnHandPreviousValues
}

input InventoryOnHandSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InventoryOnHandSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InventoryOnHandSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InventoryOnHandSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InventoryOnHandWhereInput
}

input InventoryOnHandUpdateInput {
  date: DateTime
  pbsDrug: String
  onHandQty: Int
  isArchived: Boolean
  isDeleted: Boolean
  item: InventoryUpdateOneInput
  purchaseOrder: PurchaseOrderUpdateOneInput
  warehouse: WareHouseUpdateOneInput
  company: CompanyUpdateOneRequiredInput
}

input InventoryOnHandUpdateManyMutationInput {
  date: DateTime
  pbsDrug: String
  onHandQty: Int
  isArchived: Boolean
  isDeleted: Boolean
}

input InventoryOnHandWhereInput {
  """Logical AND on all given filters."""
  AND: [InventoryOnHandWhereInput!]

  """Logical OR on all given filters."""
  OR: [InventoryOnHandWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InventoryOnHandWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  pbsDrug: String

  """All values that are not equal to given value."""
  pbsDrug_not: String

  """All values that are contained in given list."""
  pbsDrug_in: [String!]

  """All values that are not contained in given list."""
  pbsDrug_not_in: [String!]

  """All values less than the given value."""
  pbsDrug_lt: String

  """All values less than or equal the given value."""
  pbsDrug_lte: String

  """All values greater than the given value."""
  pbsDrug_gt: String

  """All values greater than or equal the given value."""
  pbsDrug_gte: String

  """All values containing the given string."""
  pbsDrug_contains: String

  """All values not containing the given string."""
  pbsDrug_not_contains: String

  """All values starting with the given string."""
  pbsDrug_starts_with: String

  """All values not starting with the given string."""
  pbsDrug_not_starts_with: String

  """All values ending with the given string."""
  pbsDrug_ends_with: String

  """All values not ending with the given string."""
  pbsDrug_not_ends_with: String
  onHandQty: Int

  """All values that are not equal to given value."""
  onHandQty_not: Int

  """All values that are contained in given list."""
  onHandQty_in: [Int!]

  """All values that are not contained in given list."""
  onHandQty_not_in: [Int!]

  """All values less than the given value."""
  onHandQty_lt: Int

  """All values less than or equal the given value."""
  onHandQty_lte: Int

  """All values greater than the given value."""
  onHandQty_gt: Int

  """All values greater than or equal the given value."""
  onHandQty_gte: Int
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  item: InventoryWhereInput
  purchaseOrder: PurchaseOrderWhereInput
  warehouse: WareHouseWhereInput
  company: CompanyWhereInput
}

input InventoryOnHandWhereUniqueInput {
  id: ID
}

enum InventoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  inventoryModel_ASC
  inventoryModel_DESC
  uom_ASC
  uom_DESC
  price_ASC
  price_DESC
  SellingPrice_ASC
  SellingPrice_DESC
  Barcode_ASC
  Barcode_DESC
  Taxable_ASC
  Taxable_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InventoryPreviousValues {
  id: ID!
  name: String
  inventoryModel: InventoryModel
  uom: UOM
  price: Float
  SellingPrice: Float
  Barcode: String
  Taxable: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InventorySubscriptionPayload {
  mutation: MutationType!
  node: Inventory
  updatedFields: [String!]
  previousValues: InventoryPreviousValues
}

input InventorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InventorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InventorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InventorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InventoryWhereInput
}

input InventoryUpdateDataInput {
  name: String
  inventoryModel: InventoryModel
  uom: UOM
  price: Float
  SellingPrice: Float
  Barcode: String
  Taxable: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyUpdateOneRequiredInput
}

input InventoryUpdateInput {
  name: String
  inventoryModel: InventoryModel
  uom: UOM
  price: Float
  SellingPrice: Float
  Barcode: String
  Taxable: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyUpdateOneRequiredInput
}

input InventoryUpdateManyMutationInput {
  name: String
  inventoryModel: InventoryModel
  uom: UOM
  price: Float
  SellingPrice: Float
  Barcode: String
  Taxable: Boolean
  isArchived: Boolean
  isDeleted: Boolean
}

input InventoryUpdateOneInput {
  create: InventoryCreateInput
  connect: InventoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InventoryUpdateDataInput
  upsert: InventoryUpsertNestedInput
}

input InventoryUpsertNestedInput {
  update: InventoryUpdateDataInput!
  create: InventoryCreateInput!
}

input InventoryWhereInput {
  """Logical AND on all given filters."""
  AND: [InventoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [InventoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InventoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  inventoryModel: InventoryModel

  """All values that are not equal to given value."""
  inventoryModel_not: InventoryModel

  """All values that are contained in given list."""
  inventoryModel_in: [InventoryModel!]

  """All values that are not contained in given list."""
  inventoryModel_not_in: [InventoryModel!]
  uom: UOM

  """All values that are not equal to given value."""
  uom_not: UOM

  """All values that are contained in given list."""
  uom_in: [UOM!]

  """All values that are not contained in given list."""
  uom_not_in: [UOM!]
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  SellingPrice: Float

  """All values that are not equal to given value."""
  SellingPrice_not: Float

  """All values that are contained in given list."""
  SellingPrice_in: [Float!]

  """All values that are not contained in given list."""
  SellingPrice_not_in: [Float!]

  """All values less than the given value."""
  SellingPrice_lt: Float

  """All values less than or equal the given value."""
  SellingPrice_lte: Float

  """All values greater than the given value."""
  SellingPrice_gt: Float

  """All values greater than or equal the given value."""
  SellingPrice_gte: Float
  Barcode: String

  """All values that are not equal to given value."""
  Barcode_not: String

  """All values that are contained in given list."""
  Barcode_in: [String!]

  """All values that are not contained in given list."""
  Barcode_not_in: [String!]

  """All values less than the given value."""
  Barcode_lt: String

  """All values less than or equal the given value."""
  Barcode_lte: String

  """All values greater than the given value."""
  Barcode_gt: String

  """All values greater than or equal the given value."""
  Barcode_gte: String

  """All values containing the given string."""
  Barcode_contains: String

  """All values not containing the given string."""
  Barcode_not_contains: String

  """All values starting with the given string."""
  Barcode_starts_with: String

  """All values not starting with the given string."""
  Barcode_not_starts_with: String

  """All values ending with the given string."""
  Barcode_ends_with: String

  """All values not ending with the given string."""
  Barcode_not_ends_with: String
  Taxable: Boolean

  """All values that are not equal to given value."""
  Taxable_not: Boolean
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
}

input InventoryWhereUniqueInput {
  id: ID
}

type Invoice implements Node {
  id: ID!
  title: String
  attachments(where: AttachmentWhereInput, orderBy: AttachmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attachment!]
  buyer: Customer
  number: Int
  description: String
  invoiceDate: DateTime
  dueDate: DateTime
  preview: Attachment
  items(where: InvoiceItemEntryWhereInput, orderBy: InvoiceItemEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InvoiceItemEntry!]
  seller: Company!
  status: InvoiceStatus
  type: InvoiceType
  total: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type InvoiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InvoiceEdge]!
  aggregate: AggregateInvoice!
}

input InvoiceCreateInput {
  id: ID
  title: String
  number: Int
  description: String
  invoiceDate: DateTime
  dueDate: DateTime
  status: InvoiceStatus
  type: InvoiceType
  total: Float
  attachments: AttachmentCreateManyInput
  buyer: CustomerCreateOneInput
  preview: AttachmentCreateOneInput
  items: InvoiceItemEntryCreateManyWithoutInvoiceInput
  seller: CompanyCreateOneInput!
}

input InvoiceCreateOneWithoutItemsInput {
  create: InvoiceCreateWithoutItemsInput
  connect: InvoiceWhereUniqueInput
}

input InvoiceCreateWithoutItemsInput {
  id: ID
  title: String
  number: Int
  description: String
  invoiceDate: DateTime
  dueDate: DateTime
  status: InvoiceStatus
  type: InvoiceType
  total: Float
  attachments: AttachmentCreateManyInput
  buyer: CustomerCreateOneInput
  preview: AttachmentCreateOneInput
  seller: CompanyCreateOneInput!
}

"""An edge in a connection."""
type InvoiceEdge {
  """The item at the end of the edge."""
  node: Invoice!

  """A cursor for use in pagination."""
  cursor: String!
}

type InvoiceItemEntry implements Node {
  id: ID!
  order: Int
  description: String
  name: String
  price: Float
  quantity: Float
  tax: Float
  invoice: Invoice
  project: Project
  service: Service
  timeSheetEntry: TimeSheetEntry
  timeSheet: TimeSheet
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type InvoiceItemEntryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InvoiceItemEntryEdge]!
  aggregate: AggregateInvoiceItemEntry!
}

input InvoiceItemEntryCreateInput {
  id: ID
  order: Int
  description: String
  name: String
  price: Float
  quantity: Float
  tax: Float
  invoice: InvoiceCreateOneWithoutItemsInput
  project: ProjectCreateOneInput
  service: ServiceCreateOneInput
  timeSheetEntry: TimeSheetEntryCreateOneInput
  timeSheet: TimeSheetCreateOneInput
}

input InvoiceItemEntryCreateManyWithoutInvoiceInput {
  create: [InvoiceItemEntryCreateWithoutInvoiceInput!]
  connect: [InvoiceItemEntryWhereUniqueInput!]
}

input InvoiceItemEntryCreateWithoutInvoiceInput {
  id: ID
  order: Int
  description: String
  name: String
  price: Float
  quantity: Float
  tax: Float
  project: ProjectCreateOneInput
  service: ServiceCreateOneInput
  timeSheetEntry: TimeSheetEntryCreateOneInput
  timeSheet: TimeSheetCreateOneInput
}

"""An edge in a connection."""
type InvoiceItemEntryEdge {
  """The item at the end of the edge."""
  node: InvoiceItemEntry!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InvoiceItemEntryOrderByInput {
  id_ASC
  id_DESC
  order_ASC
  order_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
  tax_ASC
  tax_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InvoiceItemEntryPreviousValues {
  id: ID!
  order: Int
  description: String
  name: String
  price: Float
  quantity: Float
  tax: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

input InvoiceItemEntryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceItemEntryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceItemEntryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceItemEntryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  quantity: Float

  """All values that are not equal to given value."""
  quantity_not: Float

  """All values that are contained in given list."""
  quantity_in: [Float!]

  """All values that are not contained in given list."""
  quantity_not_in: [Float!]

  """All values less than the given value."""
  quantity_lt: Float

  """All values less than or equal the given value."""
  quantity_lte: Float

  """All values greater than the given value."""
  quantity_gt: Float

  """All values greater than or equal the given value."""
  quantity_gte: Float
  tax: Float

  """All values that are not equal to given value."""
  tax_not: Float

  """All values that are contained in given list."""
  tax_in: [Float!]

  """All values that are not contained in given list."""
  tax_not_in: [Float!]

  """All values less than the given value."""
  tax_lt: Float

  """All values less than or equal the given value."""
  tax_lte: Float

  """All values greater than the given value."""
  tax_gt: Float

  """All values greater than or equal the given value."""
  tax_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type InvoiceItemEntrySubscriptionPayload {
  mutation: MutationType!
  node: InvoiceItemEntry
  updatedFields: [String!]
  previousValues: InvoiceItemEntryPreviousValues
}

input InvoiceItemEntrySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceItemEntrySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceItemEntrySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceItemEntrySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InvoiceItemEntryWhereInput
}

input InvoiceItemEntryUpdateInput {
  order: Int
  description: String
  name: String
  price: Float
  quantity: Float
  tax: Float
  invoice: InvoiceUpdateOneWithoutItemsInput
  project: ProjectUpdateOneInput
  service: ServiceUpdateOneInput
  timeSheetEntry: TimeSheetEntryUpdateOneInput
  timeSheet: TimeSheetUpdateOneInput
}

input InvoiceItemEntryUpdateManyDataInput {
  order: Int
  description: String
  name: String
  price: Float
  quantity: Float
  tax: Float
}

input InvoiceItemEntryUpdateManyMutationInput {
  order: Int
  description: String
  name: String
  price: Float
  quantity: Float
  tax: Float
}

input InvoiceItemEntryUpdateManyWithoutInvoiceInput {
  create: [InvoiceItemEntryCreateWithoutInvoiceInput!]
  connect: [InvoiceItemEntryWhereUniqueInput!]
  set: [InvoiceItemEntryWhereUniqueInput!]
  disconnect: [InvoiceItemEntryWhereUniqueInput!]
  delete: [InvoiceItemEntryWhereUniqueInput!]
  update: [InvoiceItemEntryUpdateWithWhereUniqueWithoutInvoiceInput!]
  updateMany: [InvoiceItemEntryUpdateManyWithWhereNestedInput!]
  deleteMany: [InvoiceItemEntryScalarWhereInput!]
  upsert: [InvoiceItemEntryUpsertWithWhereUniqueWithoutInvoiceInput!]
}

input InvoiceItemEntryUpdateManyWithWhereNestedInput {
  where: InvoiceItemEntryScalarWhereInput!
  data: InvoiceItemEntryUpdateManyDataInput!
}

input InvoiceItemEntryUpdateWithoutInvoiceDataInput {
  order: Int
  description: String
  name: String
  price: Float
  quantity: Float
  tax: Float
  project: ProjectUpdateOneInput
  service: ServiceUpdateOneInput
  timeSheetEntry: TimeSheetEntryUpdateOneInput
  timeSheet: TimeSheetUpdateOneInput
}

input InvoiceItemEntryUpdateWithWhereUniqueWithoutInvoiceInput {
  where: InvoiceItemEntryWhereUniqueInput!
  data: InvoiceItemEntryUpdateWithoutInvoiceDataInput!
}

input InvoiceItemEntryUpsertWithWhereUniqueWithoutInvoiceInput {
  where: InvoiceItemEntryWhereUniqueInput!
  update: InvoiceItemEntryUpdateWithoutInvoiceDataInput!
  create: InvoiceItemEntryCreateWithoutInvoiceInput!
}

input InvoiceItemEntryWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceItemEntryWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceItemEntryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceItemEntryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  quantity: Float

  """All values that are not equal to given value."""
  quantity_not: Float

  """All values that are contained in given list."""
  quantity_in: [Float!]

  """All values that are not contained in given list."""
  quantity_not_in: [Float!]

  """All values less than the given value."""
  quantity_lt: Float

  """All values less than or equal the given value."""
  quantity_lte: Float

  """All values greater than the given value."""
  quantity_gt: Float

  """All values greater than or equal the given value."""
  quantity_gte: Float
  tax: Float

  """All values that are not equal to given value."""
  tax_not: Float

  """All values that are contained in given list."""
  tax_in: [Float!]

  """All values that are not contained in given list."""
  tax_not_in: [Float!]

  """All values less than the given value."""
  tax_lt: Float

  """All values less than or equal the given value."""
  tax_lte: Float

  """All values greater than the given value."""
  tax_gt: Float

  """All values greater than or equal the given value."""
  tax_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  invoice: InvoiceWhereInput
  project: ProjectWhereInput
  service: ServiceWhereInput
  timeSheetEntry: TimeSheetEntryWhereInput
  timeSheet: TimeSheetWhereInput
}

input InvoiceItemEntryWhereUniqueInput {
  id: ID
}

enum InvoiceOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  number_ASC
  number_DESC
  description_ASC
  description_DESC
  invoiceDate_ASC
  invoiceDate_DESC
  dueDate_ASC
  dueDate_DESC
  status_ASC
  status_DESC
  type_ASC
  type_DESC
  total_ASC
  total_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InvoicePreviousValues {
  id: ID!
  title: String
  number: Int
  description: String
  invoiceDate: DateTime
  dueDate: DateTime
  status: InvoiceStatus
  type: InvoiceType
  total: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum InvoiceStatus {
  APPROVED
  ARCHIVED
  DRAFT
  FULLY_PAID
  PARTIALLY_PAID
  UNPAID
  PROPOSED
  REJECTED
}

type InvoiceSubscriptionPayload {
  mutation: MutationType!
  node: Invoice
  updatedFields: [String!]
  previousValues: InvoicePreviousValues
}

input InvoiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InvoiceWhereInput
}

enum InvoiceType {
  PROJECT
  TIMESHEET
  TIMESHEET_WITH_DETAILS
  FREE_TEXT
}

input InvoiceUpdateInput {
  title: String
  number: Int
  description: String
  invoiceDate: DateTime
  dueDate: DateTime
  status: InvoiceStatus
  type: InvoiceType
  total: Float
  attachments: AttachmentUpdateManyInput
  buyer: CustomerUpdateOneInput
  preview: AttachmentUpdateOneInput
  items: InvoiceItemEntryUpdateManyWithoutInvoiceInput
  seller: CompanyUpdateOneRequiredInput
}

input InvoiceUpdateManyMutationInput {
  title: String
  number: Int
  description: String
  invoiceDate: DateTime
  dueDate: DateTime
  status: InvoiceStatus
  type: InvoiceType
  total: Float
}

input InvoiceUpdateOneWithoutItemsInput {
  create: InvoiceCreateWithoutItemsInput
  connect: InvoiceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InvoiceUpdateWithoutItemsDataInput
  upsert: InvoiceUpsertWithoutItemsInput
}

input InvoiceUpdateWithoutItemsDataInput {
  title: String
  number: Int
  description: String
  invoiceDate: DateTime
  dueDate: DateTime
  status: InvoiceStatus
  type: InvoiceType
  total: Float
  attachments: AttachmentUpdateManyInput
  buyer: CustomerUpdateOneInput
  preview: AttachmentUpdateOneInput
  seller: CompanyUpdateOneRequiredInput
}

input InvoiceUpsertWithoutItemsInput {
  update: InvoiceUpdateWithoutItemsDataInput!
  create: InvoiceCreateWithoutItemsInput!
}

input InvoiceWhereInput {
  """Logical AND on all given filters."""
  AND: [InvoiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [InvoiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InvoiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  invoiceDate: DateTime

  """All values that are not equal to given value."""
  invoiceDate_not: DateTime

  """All values that are contained in given list."""
  invoiceDate_in: [DateTime!]

  """All values that are not contained in given list."""
  invoiceDate_not_in: [DateTime!]

  """All values less than the given value."""
  invoiceDate_lt: DateTime

  """All values less than or equal the given value."""
  invoiceDate_lte: DateTime

  """All values greater than the given value."""
  invoiceDate_gt: DateTime

  """All values greater than or equal the given value."""
  invoiceDate_gte: DateTime
  dueDate: DateTime

  """All values that are not equal to given value."""
  dueDate_not: DateTime

  """All values that are contained in given list."""
  dueDate_in: [DateTime!]

  """All values that are not contained in given list."""
  dueDate_not_in: [DateTime!]

  """All values less than the given value."""
  dueDate_lt: DateTime

  """All values less than or equal the given value."""
  dueDate_lte: DateTime

  """All values greater than the given value."""
  dueDate_gt: DateTime

  """All values greater than or equal the given value."""
  dueDate_gte: DateTime
  status: InvoiceStatus

  """All values that are not equal to given value."""
  status_not: InvoiceStatus

  """All values that are contained in given list."""
  status_in: [InvoiceStatus!]

  """All values that are not contained in given list."""
  status_not_in: [InvoiceStatus!]
  type: InvoiceType

  """All values that are not equal to given value."""
  type_not: InvoiceType

  """All values that are contained in given list."""
  type_in: [InvoiceType!]

  """All values that are not contained in given list."""
  type_not_in: [InvoiceType!]
  total: Float

  """All values that are not equal to given value."""
  total_not: Float

  """All values that are contained in given list."""
  total_in: [Float!]

  """All values that are not contained in given list."""
  total_not_in: [Float!]

  """All values less than the given value."""
  total_lt: Float

  """All values less than or equal the given value."""
  total_lte: Float

  """All values greater than the given value."""
  total_gt: Float

  """All values greater than or equal the given value."""
  total_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  attachments_every: AttachmentWhereInput
  attachments_some: AttachmentWhereInput
  attachments_none: AttachmentWhereInput
  buyer: CustomerWhereInput
  preview: AttachmentWhereInput
  items_every: InvoiceItemEntryWhereInput
  items_some: InvoiceItemEntryWhereInput
  items_none: InvoiceItemEntryWhereInput
  seller: CompanyWhereInput
}

input InvoiceWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

type LedgerJournal implements Node {
  id: ID!
  total: Float
  description: String
  currency: Currency!
  includeConsTax: Boolean!
  posted: Boolean!
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type LedgerJournalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LedgerJournalEdge]!
  aggregate: AggregateLedgerJournal!
}

input LedgerJournalCreateInput {
  id: ID
  total: Float
  description: String
  currency: Currency!
  includeConsTax: Boolean!
  posted: Boolean!
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyCreateOneInput!
}

input LedgerJournalCreateOneInput {
  create: LedgerJournalCreateInput
  connect: LedgerJournalWhereUniqueInput
}

"""An edge in a connection."""
type LedgerJournalEdge {
  """The item at the end of the edge."""
  node: LedgerJournal!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LedgerJournalOrderByInput {
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  description_ASC
  description_DESC
  currency_ASC
  currency_DESC
  includeConsTax_ASC
  includeConsTax_DESC
  posted_ASC
  posted_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LedgerJournalPreviousValues {
  id: ID!
  total: Float
  description: String
  currency: Currency!
  includeConsTax: Boolean!
  posted: Boolean!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LedgerJournalSubscriptionPayload {
  mutation: MutationType!
  node: LedgerJournal
  updatedFields: [String!]
  previousValues: LedgerJournalPreviousValues
}

input LedgerJournalSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LedgerJournalSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LedgerJournalSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LedgerJournalSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LedgerJournalWhereInput
}

input LedgerJournalUpdateDataInput {
  total: Float
  description: String
  currency: Currency
  includeConsTax: Boolean
  posted: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyUpdateOneRequiredInput
}

input LedgerJournalUpdateInput {
  total: Float
  description: String
  currency: Currency
  includeConsTax: Boolean
  posted: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyUpdateOneRequiredInput
}

input LedgerJournalUpdateManyMutationInput {
  total: Float
  description: String
  currency: Currency
  includeConsTax: Boolean
  posted: Boolean
  isArchived: Boolean
  isDeleted: Boolean
}

input LedgerJournalUpdateOneInput {
  create: LedgerJournalCreateInput
  connect: LedgerJournalWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LedgerJournalUpdateDataInput
  upsert: LedgerJournalUpsertNestedInput
}

input LedgerJournalUpdateOneRequiredInput {
  create: LedgerJournalCreateInput
  connect: LedgerJournalWhereUniqueInput
  update: LedgerJournalUpdateDataInput
  upsert: LedgerJournalUpsertNestedInput
}

input LedgerJournalUpsertNestedInput {
  update: LedgerJournalUpdateDataInput!
  create: LedgerJournalCreateInput!
}

input LedgerJournalWhereInput {
  """Logical AND on all given filters."""
  AND: [LedgerJournalWhereInput!]

  """Logical OR on all given filters."""
  OR: [LedgerJournalWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LedgerJournalWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  total: Float

  """All values that are not equal to given value."""
  total_not: Float

  """All values that are contained in given list."""
  total_in: [Float!]

  """All values that are not contained in given list."""
  total_not_in: [Float!]

  """All values less than the given value."""
  total_lt: Float

  """All values less than or equal the given value."""
  total_lte: Float

  """All values greater than the given value."""
  total_gt: Float

  """All values greater than or equal the given value."""
  total_gte: Float
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  currency: Currency

  """All values that are not equal to given value."""
  currency_not: Currency

  """All values that are contained in given list."""
  currency_in: [Currency!]

  """All values that are not contained in given list."""
  currency_not_in: [Currency!]
  includeConsTax: Boolean

  """All values that are not equal to given value."""
  includeConsTax_not: Boolean
  posted: Boolean

  """All values that are not equal to given value."""
  posted_not: Boolean
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
}

input LedgerJournalWhereUniqueInput {
  id: ID
}

type LedgerPosting implements Node {
  id: ID!
  postingType: PostingType
  mainAccount: MainAccount
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type LedgerPostingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LedgerPostingEdge]!
  aggregate: AggregateLedgerPosting!
}

input LedgerPostingCreateInput {
  id: ID
  postingType: PostingType
  isArchived: Boolean
  isDeleted: Boolean
  mainAccount: MainAccountCreateOneInput
  company: CompanyCreateOneInput!
}

"""An edge in a connection."""
type LedgerPostingEdge {
  """The item at the end of the edge."""
  node: LedgerPosting!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LedgerPostingOrderByInput {
  id_ASC
  id_DESC
  postingType_ASC
  postingType_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LedgerPostingPreviousValues {
  id: ID!
  postingType: PostingType
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LedgerPostingSubscriptionPayload {
  mutation: MutationType!
  node: LedgerPosting
  updatedFields: [String!]
  previousValues: LedgerPostingPreviousValues
}

input LedgerPostingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LedgerPostingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LedgerPostingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LedgerPostingSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LedgerPostingWhereInput
}

input LedgerPostingUpdateInput {
  postingType: PostingType
  isArchived: Boolean
  isDeleted: Boolean
  mainAccount: MainAccountUpdateOneInput
  company: CompanyUpdateOneRequiredInput
}

input LedgerPostingUpdateManyMutationInput {
  postingType: PostingType
  isArchived: Boolean
  isDeleted: Boolean
}

input LedgerPostingWhereInput {
  """Logical AND on all given filters."""
  AND: [LedgerPostingWhereInput!]

  """Logical OR on all given filters."""
  OR: [LedgerPostingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LedgerPostingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  postingType: PostingType

  """All values that are not equal to given value."""
  postingType_not: PostingType

  """All values that are contained in given list."""
  postingType_in: [PostingType!]

  """All values that are not contained in given list."""
  postingType_not_in: [PostingType!]
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  mainAccount: MainAccountWhereInput
  company: CompanyWhereInput
}

input LedgerPostingWhereUniqueInput {
  id: ID
}

type LedgerTransaction implements Node {
  id: ID!
  mainAccount: MainAccount!
  ledgerJournal: LedgerJournal!
  drcr: DrCr!
  amount: Float!
  currency: Currency!
  date: DateTime!
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type LedgerTransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LedgerTransactionEdge]!
  aggregate: AggregateLedgerTransaction!
}

input LedgerTransactionCreateInput {
  id: ID
  drcr: DrCr!
  amount: Float!
  currency: Currency!
  date: DateTime!
  isArchived: Boolean
  isDeleted: Boolean
  mainAccount: MainAccountCreateOneInput!
  ledgerJournal: LedgerJournalCreateOneInput!
  company: CompanyCreateOneInput!
}

"""An edge in a connection."""
type LedgerTransactionEdge {
  """The item at the end of the edge."""
  node: LedgerTransaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LedgerTransactionOrderByInput {
  id_ASC
  id_DESC
  drcr_ASC
  drcr_DESC
  amount_ASC
  amount_DESC
  currency_ASC
  currency_DESC
  date_ASC
  date_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LedgerTransactionPreviousValues {
  id: ID!
  drcr: DrCr!
  amount: Float!
  currency: Currency!
  date: DateTime!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LedgerTransactionSubscriptionPayload {
  mutation: MutationType!
  node: LedgerTransaction
  updatedFields: [String!]
  previousValues: LedgerTransactionPreviousValues
}

input LedgerTransactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LedgerTransactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LedgerTransactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LedgerTransactionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LedgerTransactionWhereInput
}

input LedgerTransactionUpdateInput {
  drcr: DrCr
  amount: Float
  currency: Currency
  date: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  mainAccount: MainAccountUpdateOneRequiredInput
  ledgerJournal: LedgerJournalUpdateOneRequiredInput
  company: CompanyUpdateOneRequiredInput
}

input LedgerTransactionUpdateManyMutationInput {
  drcr: DrCr
  amount: Float
  currency: Currency
  date: DateTime
  isArchived: Boolean
  isDeleted: Boolean
}

input LedgerTransactionWhereInput {
  """Logical AND on all given filters."""
  AND: [LedgerTransactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LedgerTransactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LedgerTransactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  drcr: DrCr

  """All values that are not equal to given value."""
  drcr_not: DrCr

  """All values that are contained in given list."""
  drcr_in: [DrCr!]

  """All values that are not contained in given list."""
  drcr_not_in: [DrCr!]
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  currency: Currency

  """All values that are not equal to given value."""
  currency_not: Currency

  """All values that are contained in given list."""
  currency_in: [Currency!]

  """All values that are not contained in given list."""
  currency_not_in: [Currency!]
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  mainAccount: MainAccountWhereInput
  ledgerJournal: LedgerJournalWhereInput
  company: CompanyWhereInput
}

input LedgerTransactionWhereUniqueInput {
  id: ID
}

enum LevelOfCare {
  Level1
  Level2
  Level3
  Level4
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MainAccount implements Node {
  id: ID!
  code: String!
  name: String!
  description: String
  type: MainAccountType!
  ConsTaxFree: Boolean!
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type MainAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MainAccountEdge]!
  aggregate: AggregateMainAccount!
}

input MainAccountCreateInput {
  id: ID
  code: String!
  name: String!
  description: String
  type: MainAccountType!
  ConsTaxFree: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyCreateOneInput!
}

input MainAccountCreateOneInput {
  create: MainAccountCreateInput
  connect: MainAccountWhereUniqueInput
}

"""An edge in a connection."""
type MainAccountEdge {
  """The item at the end of the edge."""
  node: MainAccount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MainAccountOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  ConsTaxFree_ASC
  ConsTaxFree_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MainAccountPreviousValues {
  id: ID!
  code: String!
  name: String!
  description: String
  type: MainAccountType!
  ConsTaxFree: Boolean!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MainAccountSubscriptionPayload {
  mutation: MutationType!
  node: MainAccount
  updatedFields: [String!]
  previousValues: MainAccountPreviousValues
}

input MainAccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MainAccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MainAccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MainAccountSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MainAccountWhereInput
}

enum MainAccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

input MainAccountUpdateDataInput {
  code: String
  name: String
  description: String
  type: MainAccountType
  ConsTaxFree: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyUpdateOneRequiredInput
}

input MainAccountUpdateInput {
  code: String
  name: String
  description: String
  type: MainAccountType
  ConsTaxFree: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyUpdateOneRequiredInput
}

input MainAccountUpdateManyMutationInput {
  code: String
  name: String
  description: String
  type: MainAccountType
  ConsTaxFree: Boolean
  isArchived: Boolean
  isDeleted: Boolean
}

input MainAccountUpdateOneInput {
  create: MainAccountCreateInput
  connect: MainAccountWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MainAccountUpdateDataInput
  upsert: MainAccountUpsertNestedInput
}

input MainAccountUpdateOneRequiredInput {
  create: MainAccountCreateInput
  connect: MainAccountWhereUniqueInput
  update: MainAccountUpdateDataInput
  upsert: MainAccountUpsertNestedInput
}

input MainAccountUpsertNestedInput {
  update: MainAccountUpdateDataInput!
  create: MainAccountCreateInput!
}

input MainAccountWhereInput {
  """Logical AND on all given filters."""
  AND: [MainAccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [MainAccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MainAccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: MainAccountType

  """All values that are not equal to given value."""
  type_not: MainAccountType

  """All values that are contained in given list."""
  type_in: [MainAccountType!]

  """All values that are not contained in given list."""
  type_not_in: [MainAccountType!]
  ConsTaxFree: Boolean

  """All values that are not equal to given value."""
  ConsTaxFree_not: Boolean
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
}

input MainAccountWhereUniqueInput {
  id: ID
}

type MeansTestedFee implements Node {
  id: ID!
  amount: Float
  currency: Currency
  dateFrom: DateTime
  dateTo: DateTime
  company: Company
}

"""A connection to a list of items."""
type MeansTestedFeeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MeansTestedFeeEdge]!
  aggregate: AggregateMeansTestedFee!
}

input MeansTestedFeeCreateInput {
  id: ID
  amount: Float
  currency: Currency
  dateFrom: DateTime
  dateTo: DateTime
  company: CompanyCreateOneInput
}

input MeansTestedFeeCreateOneInput {
  create: MeansTestedFeeCreateInput
  connect: MeansTestedFeeWhereUniqueInput
}

"""An edge in a connection."""
type MeansTestedFeeEdge {
  """The item at the end of the edge."""
  node: MeansTestedFee!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MeansTestedFeeOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  currency_ASC
  currency_DESC
  dateFrom_ASC
  dateFrom_DESC
  dateTo_ASC
  dateTo_DESC
}

type MeansTestedFeePreviousValues {
  id: ID!
  amount: Float
  currency: Currency
  dateFrom: DateTime
  dateTo: DateTime
}

type MeansTestedFeeSubscriptionPayload {
  mutation: MutationType!
  node: MeansTestedFee
  updatedFields: [String!]
  previousValues: MeansTestedFeePreviousValues
}

input MeansTestedFeeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MeansTestedFeeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MeansTestedFeeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MeansTestedFeeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MeansTestedFeeWhereInput
}

input MeansTestedFeeUpdateDataInput {
  amount: Float
  currency: Currency
  dateFrom: DateTime
  dateTo: DateTime
  company: CompanyUpdateOneInput
}

input MeansTestedFeeUpdateInput {
  amount: Float
  currency: Currency
  dateFrom: DateTime
  dateTo: DateTime
  company: CompanyUpdateOneInput
}

input MeansTestedFeeUpdateManyMutationInput {
  amount: Float
  currency: Currency
  dateFrom: DateTime
  dateTo: DateTime
}

input MeansTestedFeeUpdateOneInput {
  create: MeansTestedFeeCreateInput
  connect: MeansTestedFeeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MeansTestedFeeUpdateDataInput
  upsert: MeansTestedFeeUpsertNestedInput
}

input MeansTestedFeeUpsertNestedInput {
  update: MeansTestedFeeUpdateDataInput!
  create: MeansTestedFeeCreateInput!
}

input MeansTestedFeeWhereInput {
  """Logical AND on all given filters."""
  AND: [MeansTestedFeeWhereInput!]

  """Logical OR on all given filters."""
  OR: [MeansTestedFeeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MeansTestedFeeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  currency: Currency

  """All values that are not equal to given value."""
  currency_not: Currency

  """All values that are contained in given list."""
  currency_in: [Currency!]

  """All values that are not contained in given list."""
  currency_not_in: [Currency!]
  dateFrom: DateTime

  """All values that are not equal to given value."""
  dateFrom_not: DateTime

  """All values that are contained in given list."""
  dateFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  dateFrom_not_in: [DateTime!]

  """All values less than the given value."""
  dateFrom_lt: DateTime

  """All values less than or equal the given value."""
  dateFrom_lte: DateTime

  """All values greater than the given value."""
  dateFrom_gt: DateTime

  """All values greater than or equal the given value."""
  dateFrom_gte: DateTime
  dateTo: DateTime

  """All values that are not equal to given value."""
  dateTo_not: DateTime

  """All values that are contained in given list."""
  dateTo_in: [DateTime!]

  """All values that are not contained in given list."""
  dateTo_not_in: [DateTime!]

  """All values less than the given value."""
  dateTo_lt: DateTime

  """All values less than or equal the given value."""
  dateTo_lte: DateTime

  """All values greater than the given value."""
  dateTo_gt: DateTime

  """All values greater than or equal the given value."""
  dateTo_gte: DateTime
  company: CompanyWhereInput
}

input MeansTestedFeeWhereUniqueInput {
  id: ID
}

type MeansTestLimits implements Node {
  id: ID!
  annual: Float
  lifetime: Float
  dateFrom: DateTime
  dateTo: DateTime
}

"""A connection to a list of items."""
type MeansTestLimitsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MeansTestLimitsEdge]!
  aggregate: AggregateMeansTestLimits!
}

input MeansTestLimitsCreateInput {
  id: ID
  annual: Float
  lifetime: Float
  dateFrom: DateTime
  dateTo: DateTime
}

"""An edge in a connection."""
type MeansTestLimitsEdge {
  """The item at the end of the edge."""
  node: MeansTestLimits!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MeansTestLimitsOrderByInput {
  id_ASC
  id_DESC
  annual_ASC
  annual_DESC
  lifetime_ASC
  lifetime_DESC
  dateFrom_ASC
  dateFrom_DESC
  dateTo_ASC
  dateTo_DESC
}

type MeansTestLimitsPreviousValues {
  id: ID!
  annual: Float
  lifetime: Float
  dateFrom: DateTime
  dateTo: DateTime
}

type MeansTestLimitsSubscriptionPayload {
  mutation: MutationType!
  node: MeansTestLimits
  updatedFields: [String!]
  previousValues: MeansTestLimitsPreviousValues
}

input MeansTestLimitsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MeansTestLimitsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MeansTestLimitsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MeansTestLimitsSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MeansTestLimitsWhereInput
}

input MeansTestLimitsUpdateInput {
  annual: Float
  lifetime: Float
  dateFrom: DateTime
  dateTo: DateTime
}

input MeansTestLimitsUpdateManyMutationInput {
  annual: Float
  lifetime: Float
  dateFrom: DateTime
  dateTo: DateTime
}

input MeansTestLimitsWhereInput {
  """Logical AND on all given filters."""
  AND: [MeansTestLimitsWhereInput!]

  """Logical OR on all given filters."""
  OR: [MeansTestLimitsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MeansTestLimitsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  annual: Float

  """All values that are not equal to given value."""
  annual_not: Float

  """All values that are contained in given list."""
  annual_in: [Float!]

  """All values that are not contained in given list."""
  annual_not_in: [Float!]

  """All values less than the given value."""
  annual_lt: Float

  """All values less than or equal the given value."""
  annual_lte: Float

  """All values greater than the given value."""
  annual_gt: Float

  """All values greater than or equal the given value."""
  annual_gte: Float
  lifetime: Float

  """All values that are not equal to given value."""
  lifetime_not: Float

  """All values that are contained in given list."""
  lifetime_in: [Float!]

  """All values that are not contained in given list."""
  lifetime_not_in: [Float!]

  """All values less than the given value."""
  lifetime_lt: Float

  """All values less than or equal the given value."""
  lifetime_lte: Float

  """All values greater than the given value."""
  lifetime_gt: Float

  """All values greater than or equal the given value."""
  lifetime_gte: Float
  dateFrom: DateTime

  """All values that are not equal to given value."""
  dateFrom_not: DateTime

  """All values that are contained in given list."""
  dateFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  dateFrom_not_in: [DateTime!]

  """All values less than the given value."""
  dateFrom_lt: DateTime

  """All values less than or equal the given value."""
  dateFrom_lte: DateTime

  """All values greater than the given value."""
  dateFrom_gt: DateTime

  """All values greater than or equal the given value."""
  dateFrom_gte: DateTime
  dateTo: DateTime

  """All values that are not equal to given value."""
  dateTo_not: DateTime

  """All values that are contained in given list."""
  dateTo_in: [DateTime!]

  """All values that are not contained in given list."""
  dateTo_not_in: [DateTime!]

  """All values less than the given value."""
  dateTo_lt: DateTime

  """All values less than or equal the given value."""
  dateTo_lte: DateTime

  """All values greater than the given value."""
  dateTo_gt: DateTime

  """All values greater than or equal the given value."""
  dateTo_gte: DateTime
}

input MeansTestLimitsWhereUniqueInput {
  id: ID
}

type MedicareService implements Node {
  id: ID!
  MBSScheduleFee: Float
  description: String
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type MedicareServiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MedicareServiceEdge]!
  aggregate: AggregateMedicareService!
}

input MedicareServiceCreateInput {
  id: ID
  MBSScheduleFee: Float
  description: String
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
}

"""An edge in a connection."""
type MedicareServiceEdge {
  """The item at the end of the edge."""
  node: MedicareService!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MedicareServiceOrderByInput {
  id_ASC
  id_DESC
  MBSScheduleFee_ASC
  MBSScheduleFee_DESC
  description_ASC
  description_DESC
  isActive_ASC
  isActive_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MedicareServicePreviousValues {
  id: ID!
  MBSScheduleFee: Float
  description: String
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MedicareServiceSubscriptionPayload {
  mutation: MutationType!
  node: MedicareService
  updatedFields: [String!]
  previousValues: MedicareServicePreviousValues
}

input MedicareServiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MedicareServiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MedicareServiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MedicareServiceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MedicareServiceWhereInput
}

input MedicareServiceUpdateInput {
  MBSScheduleFee: Float
  description: String
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
}

input MedicareServiceUpdateManyMutationInput {
  MBSScheduleFee: Float
  description: String
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
}

input MedicareServiceWhereInput {
  """Logical AND on all given filters."""
  AND: [MedicareServiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [MedicareServiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MedicareServiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  MBSScheduleFee: Float

  """All values that are not equal to given value."""
  MBSScheduleFee_not: Float

  """All values that are contained in given list."""
  MBSScheduleFee_in: [Float!]

  """All values that are not contained in given list."""
  MBSScheduleFee_not_in: [Float!]

  """All values less than the given value."""
  MBSScheduleFee_lt: Float

  """All values less than or equal the given value."""
  MBSScheduleFee_lte: Float

  """All values greater than the given value."""
  MBSScheduleFee_gt: Float

  """All values greater than or equal the given value."""
  MBSScheduleFee_gte: Float
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input MedicareServiceWhereUniqueInput {
  id: ID
}

type Mutation {
  createCompanyMember(data: CompanyMemberCreateInput!): CompanyMember!
  createIntegration(data: IntegrationCreateInput!): Integration!
  createProjectService(data: ProjectServiceCreateInput!): ProjectService!
  createProjectServiceRule(data: ProjectServiceRuleCreateInput!): ProjectServiceRule!
  createPlan(data: PlanCreateInput!): Plan!
  createSession(data: SessionCreateInput!): Session!
  createInvoiceItemEntry(data: InvoiceItemEntryCreateInput!): InvoiceItemEntry!
  createInvoice(data: InvoiceCreateInput!): Invoice!
  createLedgerTransaction(data: LedgerTransactionCreateInput!): LedgerTransaction!
  createLedgerPosting(data: LedgerPostingCreateInput!): LedgerPosting!
  createBank(data: BankCreateInput!): Bank!
  createBankTransaction(data: BankTransactionCreateInput!): BankTransaction!
  createAsset(data: AssetCreateInput!): Asset!
  createInventoryOnHand(data: InventoryOnHandCreateInput!): InventoryOnHand!
  createPurchaseOrderLine(data: PurchaseOrderLineCreateInput!): PurchaseOrderLine!
  createApInvoice(data: ApInvoiceCreateInput!): ApInvoice!
  createSalesOrderLine(data: SalesOrderLineCreateInput!): SalesOrderLine!
  createPredictedSalesValueByCompany(data: PredictedSalesValueByCompanyCreateInput!): PredictedSalesValueByCompany!
  createPredictedSalesQuantityOfItemsByCompany(data: PredictedSalesQuantityOfItemsByCompanyCreateInput!): PredictedSalesQuantityOfItemsByCompany!
  createMedicareService(data: MedicareServiceCreateInput!): MedicareService!
  createPatient(data: PatientCreateInput!): Patient!
  createHealthcareProvider(data: HealthcareProviderCreateInput!): HealthcareProvider!
  createImmunisationSchedule(data: ImmunisationScheduleCreateInput!): ImmunisationSchedule!
  createHILog(data: HILogCreateInput!): HILog!
  createPbsTPP(data: PbsTPPCreateInput!): PbsTPP!
  createMeansTestLimits(data: MeansTestLimitsCreateInput!): MeansTestLimits!
  createSalesOrder(data: SalesOrderCreateInput!): SalesOrder!
  createPoReceipt(data: PoReceiptCreateInput!): PoReceipt!
  createPbsOrganisation(data: PbsOrganisationCreateInput!): PbsOrganisation!
  createContact(data: ContactCreateInput!): Contact!
  createTimeSheetEntry(data: TimeSheetEntryCreateInput!): TimeSheetEntry!
  createMeansTestedFee(data: MeansTestedFeeCreateInput!): MeansTestedFee!
  createProject(data: ProjectCreateInput!): Project!
  createTimeSheet(data: TimeSheetCreateInput!): TimeSheet!
  createSupplier(data: SupplierCreateInput!): Supplier!
  createVaccineBrand(data: VaccineBrandCreateInput!): VaccineBrand!
  createMainAccount(data: MainAccountCreateInput!): MainAccount!
  createDisease(data: DiseaseCreateInput!): Disease!
  createWareHouse(data: WareHouseCreateInput!): WareHouse!
  createLedgerJournal(data: LedgerJournalCreateInput!): LedgerJournal!
  createService(data: ServiceCreateInput!): Service!
  createInventory(data: InventoryCreateInput!): Inventory!
  createAttachment(data: AttachmentCreateInput!): Attachment!
  createCustomer(data: CustomerCreateInput!): Customer!
  createPurchaseOrder(data: PurchaseOrderCreateInput!): PurchaseOrder!
  createAddress(data: AddressCreateInput!): Address!
  createCompany(data: CompanyCreateInput!): Company!
  createUser(data: UserCreateInput!): User!
  createAssetGroup(data: AssetGroupCreateInput!): AssetGroup!
  createName(data: NameCreateInput!): Name!
  createBasicDailyFee(data: BasicDailyFeeCreateInput!): BasicDailyFee!
  updateCompanyMember(data: CompanyMemberUpdateInput!, where: CompanyMemberWhereUniqueInput!): CompanyMember
  updateIntegration(data: IntegrationUpdateInput!, where: IntegrationWhereUniqueInput!): Integration
  updateProjectService(data: ProjectServiceUpdateInput!, where: ProjectServiceWhereUniqueInput!): ProjectService
  updateProjectServiceRule(data: ProjectServiceRuleUpdateInput!, where: ProjectServiceRuleWhereUniqueInput!): ProjectServiceRule
  updatePlan(data: PlanUpdateInput!, where: PlanWhereUniqueInput!): Plan
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateInvoiceItemEntry(data: InvoiceItemEntryUpdateInput!, where: InvoiceItemEntryWhereUniqueInput!): InvoiceItemEntry
  updateInvoice(data: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!): Invoice
  updateLedgerTransaction(data: LedgerTransactionUpdateInput!, where: LedgerTransactionWhereUniqueInput!): LedgerTransaction
  updateLedgerPosting(data: LedgerPostingUpdateInput!, where: LedgerPostingWhereUniqueInput!): LedgerPosting
  updateBank(data: BankUpdateInput!, where: BankWhereUniqueInput!): Bank
  updateBankTransaction(data: BankTransactionUpdateInput!, where: BankTransactionWhereUniqueInput!): BankTransaction
  updateAsset(data: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset
  updateInventoryOnHand(data: InventoryOnHandUpdateInput!, where: InventoryOnHandWhereUniqueInput!): InventoryOnHand
  updatePurchaseOrderLine(data: PurchaseOrderLineUpdateInput!, where: PurchaseOrderLineWhereUniqueInput!): PurchaseOrderLine
  updateApInvoice(data: ApInvoiceUpdateInput!, where: ApInvoiceWhereUniqueInput!): ApInvoice
  updateSalesOrderLine(data: SalesOrderLineUpdateInput!, where: SalesOrderLineWhereUniqueInput!): SalesOrderLine
  updatePredictedSalesValueByCompany(data: PredictedSalesValueByCompanyUpdateInput!, where: PredictedSalesValueByCompanyWhereUniqueInput!): PredictedSalesValueByCompany
  updatePredictedSalesQuantityOfItemsByCompany(data: PredictedSalesQuantityOfItemsByCompanyUpdateInput!, where: PredictedSalesQuantityOfItemsByCompanyWhereUniqueInput!): PredictedSalesQuantityOfItemsByCompany
  updateMedicareService(data: MedicareServiceUpdateInput!, where: MedicareServiceWhereUniqueInput!): MedicareService
  updatePatient(data: PatientUpdateInput!, where: PatientWhereUniqueInput!): Patient
  updateHealthcareProvider(data: HealthcareProviderUpdateInput!, where: HealthcareProviderWhereUniqueInput!): HealthcareProvider
  updateImmunisationSchedule(data: ImmunisationScheduleUpdateInput!, where: ImmunisationScheduleWhereUniqueInput!): ImmunisationSchedule
  updateHILog(data: HILogUpdateInput!, where: HILogWhereUniqueInput!): HILog
  updatePbsTPP(data: PbsTPPUpdateInput!, where: PbsTPPWhereUniqueInput!): PbsTPP
  updateMeansTestLimits(data: MeansTestLimitsUpdateInput!, where: MeansTestLimitsWhereUniqueInput!): MeansTestLimits
  updateSalesOrder(data: SalesOrderUpdateInput!, where: SalesOrderWhereUniqueInput!): SalesOrder
  updatePoReceipt(data: PoReceiptUpdateInput!, where: PoReceiptWhereUniqueInput!): PoReceipt
  updatePbsOrganisation(data: PbsOrganisationUpdateInput!, where: PbsOrganisationWhereUniqueInput!): PbsOrganisation
  updateContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact
  updateTimeSheetEntry(data: TimeSheetEntryUpdateInput!, where: TimeSheetEntryWhereUniqueInput!): TimeSheetEntry
  updateMeansTestedFee(data: MeansTestedFeeUpdateInput!, where: MeansTestedFeeWhereUniqueInput!): MeansTestedFee
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateTimeSheet(data: TimeSheetUpdateInput!, where: TimeSheetWhereUniqueInput!): TimeSheet
  updateSupplier(data: SupplierUpdateInput!, where: SupplierWhereUniqueInput!): Supplier
  updateVaccineBrand(data: VaccineBrandUpdateInput!, where: VaccineBrandWhereUniqueInput!): VaccineBrand
  updateMainAccount(data: MainAccountUpdateInput!, where: MainAccountWhereUniqueInput!): MainAccount
  updateDisease(data: DiseaseUpdateInput!, where: DiseaseWhereUniqueInput!): Disease
  updateWareHouse(data: WareHouseUpdateInput!, where: WareHouseWhereUniqueInput!): WareHouse
  updateLedgerJournal(data: LedgerJournalUpdateInput!, where: LedgerJournalWhereUniqueInput!): LedgerJournal
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service
  updateInventory(data: InventoryUpdateInput!, where: InventoryWhereUniqueInput!): Inventory
  updateAttachment(data: AttachmentUpdateInput!, where: AttachmentWhereUniqueInput!): Attachment
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer
  updatePurchaseOrder(data: PurchaseOrderUpdateInput!, where: PurchaseOrderWhereUniqueInput!): PurchaseOrder
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateAssetGroup(data: AssetGroupUpdateInput!, where: AssetGroupWhereUniqueInput!): AssetGroup
  updateName(data: NameUpdateInput!, where: NameWhereUniqueInput!): Name
  updateBasicDailyFee(data: BasicDailyFeeUpdateInput!, where: BasicDailyFeeWhereUniqueInput!): BasicDailyFee
  deleteCompanyMember(where: CompanyMemberWhereUniqueInput!): CompanyMember
  deleteIntegration(where: IntegrationWhereUniqueInput!): Integration
  deleteProjectService(where: ProjectServiceWhereUniqueInput!): ProjectService
  deleteProjectServiceRule(where: ProjectServiceRuleWhereUniqueInput!): ProjectServiceRule
  deletePlan(where: PlanWhereUniqueInput!): Plan
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteInvoiceItemEntry(where: InvoiceItemEntryWhereUniqueInput!): InvoiceItemEntry
  deleteInvoice(where: InvoiceWhereUniqueInput!): Invoice
  deleteLedgerTransaction(where: LedgerTransactionWhereUniqueInput!): LedgerTransaction
  deleteLedgerPosting(where: LedgerPostingWhereUniqueInput!): LedgerPosting
  deleteBank(where: BankWhereUniqueInput!): Bank
  deleteBankTransaction(where: BankTransactionWhereUniqueInput!): BankTransaction
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteInventoryOnHand(where: InventoryOnHandWhereUniqueInput!): InventoryOnHand
  deletePurchaseOrderLine(where: PurchaseOrderLineWhereUniqueInput!): PurchaseOrderLine
  deleteApInvoice(where: ApInvoiceWhereUniqueInput!): ApInvoice
  deleteSalesOrderLine(where: SalesOrderLineWhereUniqueInput!): SalesOrderLine
  deletePredictedSalesValueByCompany(where: PredictedSalesValueByCompanyWhereUniqueInput!): PredictedSalesValueByCompany
  deletePredictedSalesQuantityOfItemsByCompany(where: PredictedSalesQuantityOfItemsByCompanyWhereUniqueInput!): PredictedSalesQuantityOfItemsByCompany
  deleteMedicareService(where: MedicareServiceWhereUniqueInput!): MedicareService
  deletePatient(where: PatientWhereUniqueInput!): Patient
  deleteHealthcareProvider(where: HealthcareProviderWhereUniqueInput!): HealthcareProvider
  deleteImmunisationSchedule(where: ImmunisationScheduleWhereUniqueInput!): ImmunisationSchedule
  deleteHILog(where: HILogWhereUniqueInput!): HILog
  deletePbsTPP(where: PbsTPPWhereUniqueInput!): PbsTPP
  deleteMeansTestLimits(where: MeansTestLimitsWhereUniqueInput!): MeansTestLimits
  deleteSalesOrder(where: SalesOrderWhereUniqueInput!): SalesOrder
  deletePoReceipt(where: PoReceiptWhereUniqueInput!): PoReceipt
  deletePbsOrganisation(where: PbsOrganisationWhereUniqueInput!): PbsOrganisation
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteTimeSheetEntry(where: TimeSheetEntryWhereUniqueInput!): TimeSheetEntry
  deleteMeansTestedFee(where: MeansTestedFeeWhereUniqueInput!): MeansTestedFee
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteTimeSheet(where: TimeSheetWhereUniqueInput!): TimeSheet
  deleteSupplier(where: SupplierWhereUniqueInput!): Supplier
  deleteVaccineBrand(where: VaccineBrandWhereUniqueInput!): VaccineBrand
  deleteMainAccount(where: MainAccountWhereUniqueInput!): MainAccount
  deleteDisease(where: DiseaseWhereUniqueInput!): Disease
  deleteWareHouse(where: WareHouseWhereUniqueInput!): WareHouse
  deleteLedgerJournal(where: LedgerJournalWhereUniqueInput!): LedgerJournal
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteInventory(where: InventoryWhereUniqueInput!): Inventory
  deleteAttachment(where: AttachmentWhereUniqueInput!): Attachment
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deletePurchaseOrder(where: PurchaseOrderWhereUniqueInput!): PurchaseOrder
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteUser(where: UserWhereUniqueInput!): User
  deleteAssetGroup(where: AssetGroupWhereUniqueInput!): AssetGroup
  deleteName(where: NameWhereUniqueInput!): Name
  deleteBasicDailyFee(where: BasicDailyFeeWhereUniqueInput!): BasicDailyFee
  upsertCompanyMember(where: CompanyMemberWhereUniqueInput!, create: CompanyMemberCreateInput!, update: CompanyMemberUpdateInput!): CompanyMember!
  upsertIntegration(where: IntegrationWhereUniqueInput!, create: IntegrationCreateInput!, update: IntegrationUpdateInput!): Integration!
  upsertProjectService(where: ProjectServiceWhereUniqueInput!, create: ProjectServiceCreateInput!, update: ProjectServiceUpdateInput!): ProjectService!
  upsertProjectServiceRule(where: ProjectServiceRuleWhereUniqueInput!, create: ProjectServiceRuleCreateInput!, update: ProjectServiceRuleUpdateInput!): ProjectServiceRule!
  upsertPlan(where: PlanWhereUniqueInput!, create: PlanCreateInput!, update: PlanUpdateInput!): Plan!
  upsertSession(where: SessionWhereUniqueInput!, create: SessionCreateInput!, update: SessionUpdateInput!): Session!
  upsertInvoiceItemEntry(where: InvoiceItemEntryWhereUniqueInput!, create: InvoiceItemEntryCreateInput!, update: InvoiceItemEntryUpdateInput!): InvoiceItemEntry!
  upsertInvoice(where: InvoiceWhereUniqueInput!, create: InvoiceCreateInput!, update: InvoiceUpdateInput!): Invoice!
  upsertLedgerTransaction(where: LedgerTransactionWhereUniqueInput!, create: LedgerTransactionCreateInput!, update: LedgerTransactionUpdateInput!): LedgerTransaction!
  upsertLedgerPosting(where: LedgerPostingWhereUniqueInput!, create: LedgerPostingCreateInput!, update: LedgerPostingUpdateInput!): LedgerPosting!
  upsertBank(where: BankWhereUniqueInput!, create: BankCreateInput!, update: BankUpdateInput!): Bank!
  upsertBankTransaction(where: BankTransactionWhereUniqueInput!, create: BankTransactionCreateInput!, update: BankTransactionUpdateInput!): BankTransaction!
  upsertAsset(where: AssetWhereUniqueInput!, create: AssetCreateInput!, update: AssetUpdateInput!): Asset!
  upsertInventoryOnHand(where: InventoryOnHandWhereUniqueInput!, create: InventoryOnHandCreateInput!, update: InventoryOnHandUpdateInput!): InventoryOnHand!
  upsertPurchaseOrderLine(where: PurchaseOrderLineWhereUniqueInput!, create: PurchaseOrderLineCreateInput!, update: PurchaseOrderLineUpdateInput!): PurchaseOrderLine!
  upsertApInvoice(where: ApInvoiceWhereUniqueInput!, create: ApInvoiceCreateInput!, update: ApInvoiceUpdateInput!): ApInvoice!
  upsertSalesOrderLine(where: SalesOrderLineWhereUniqueInput!, create: SalesOrderLineCreateInput!, update: SalesOrderLineUpdateInput!): SalesOrderLine!
  upsertPredictedSalesValueByCompany(where: PredictedSalesValueByCompanyWhereUniqueInput!, create: PredictedSalesValueByCompanyCreateInput!, update: PredictedSalesValueByCompanyUpdateInput!): PredictedSalesValueByCompany!
  upsertPredictedSalesQuantityOfItemsByCompany(where: PredictedSalesQuantityOfItemsByCompanyWhereUniqueInput!, create: PredictedSalesQuantityOfItemsByCompanyCreateInput!, update: PredictedSalesQuantityOfItemsByCompanyUpdateInput!): PredictedSalesQuantityOfItemsByCompany!
  upsertMedicareService(where: MedicareServiceWhereUniqueInput!, create: MedicareServiceCreateInput!, update: MedicareServiceUpdateInput!): MedicareService!
  upsertPatient(where: PatientWhereUniqueInput!, create: PatientCreateInput!, update: PatientUpdateInput!): Patient!
  upsertHealthcareProvider(where: HealthcareProviderWhereUniqueInput!, create: HealthcareProviderCreateInput!, update: HealthcareProviderUpdateInput!): HealthcareProvider!
  upsertImmunisationSchedule(where: ImmunisationScheduleWhereUniqueInput!, create: ImmunisationScheduleCreateInput!, update: ImmunisationScheduleUpdateInput!): ImmunisationSchedule!
  upsertHILog(where: HILogWhereUniqueInput!, create: HILogCreateInput!, update: HILogUpdateInput!): HILog!
  upsertPbsTPP(where: PbsTPPWhereUniqueInput!, create: PbsTPPCreateInput!, update: PbsTPPUpdateInput!): PbsTPP!
  upsertMeansTestLimits(where: MeansTestLimitsWhereUniqueInput!, create: MeansTestLimitsCreateInput!, update: MeansTestLimitsUpdateInput!): MeansTestLimits!
  upsertSalesOrder(where: SalesOrderWhereUniqueInput!, create: SalesOrderCreateInput!, update: SalesOrderUpdateInput!): SalesOrder!
  upsertPoReceipt(where: PoReceiptWhereUniqueInput!, create: PoReceiptCreateInput!, update: PoReceiptUpdateInput!): PoReceipt!
  upsertPbsOrganisation(where: PbsOrganisationWhereUniqueInput!, create: PbsOrganisationCreateInput!, update: PbsOrganisationUpdateInput!): PbsOrganisation!
  upsertContact(where: ContactWhereUniqueInput!, create: ContactCreateInput!, update: ContactUpdateInput!): Contact!
  upsertTimeSheetEntry(where: TimeSheetEntryWhereUniqueInput!, create: TimeSheetEntryCreateInput!, update: TimeSheetEntryUpdateInput!): TimeSheetEntry!
  upsertMeansTestedFee(where: MeansTestedFeeWhereUniqueInput!, create: MeansTestedFeeCreateInput!, update: MeansTestedFeeUpdateInput!): MeansTestedFee!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertTimeSheet(where: TimeSheetWhereUniqueInput!, create: TimeSheetCreateInput!, update: TimeSheetUpdateInput!): TimeSheet!
  upsertSupplier(where: SupplierWhereUniqueInput!, create: SupplierCreateInput!, update: SupplierUpdateInput!): Supplier!
  upsertVaccineBrand(where: VaccineBrandWhereUniqueInput!, create: VaccineBrandCreateInput!, update: VaccineBrandUpdateInput!): VaccineBrand!
  upsertMainAccount(where: MainAccountWhereUniqueInput!, create: MainAccountCreateInput!, update: MainAccountUpdateInput!): MainAccount!
  upsertDisease(where: DiseaseWhereUniqueInput!, create: DiseaseCreateInput!, update: DiseaseUpdateInput!): Disease!
  upsertWareHouse(where: WareHouseWhereUniqueInput!, create: WareHouseCreateInput!, update: WareHouseUpdateInput!): WareHouse!
  upsertLedgerJournal(where: LedgerJournalWhereUniqueInput!, create: LedgerJournalCreateInput!, update: LedgerJournalUpdateInput!): LedgerJournal!
  upsertService(where: ServiceWhereUniqueInput!, create: ServiceCreateInput!, update: ServiceUpdateInput!): Service!
  upsertInventory(where: InventoryWhereUniqueInput!, create: InventoryCreateInput!, update: InventoryUpdateInput!): Inventory!
  upsertAttachment(where: AttachmentWhereUniqueInput!, create: AttachmentCreateInput!, update: AttachmentUpdateInput!): Attachment!
  upsertCustomer(where: CustomerWhereUniqueInput!, create: CustomerCreateInput!, update: CustomerUpdateInput!): Customer!
  upsertPurchaseOrder(where: PurchaseOrderWhereUniqueInput!, create: PurchaseOrderCreateInput!, update: PurchaseOrderUpdateInput!): PurchaseOrder!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertAssetGroup(where: AssetGroupWhereUniqueInput!, create: AssetGroupCreateInput!, update: AssetGroupUpdateInput!): AssetGroup!
  upsertName(where: NameWhereUniqueInput!, create: NameCreateInput!, update: NameUpdateInput!): Name!
  upsertBasicDailyFee(where: BasicDailyFeeWhereUniqueInput!, create: BasicDailyFeeCreateInput!, update: BasicDailyFeeUpdateInput!): BasicDailyFee!
  updateManyCompanyMembers(data: CompanyMemberUpdateManyMutationInput!, where: CompanyMemberWhereInput): BatchPayload!
  updateManyIntegrations(data: IntegrationUpdateManyMutationInput!, where: IntegrationWhereInput): BatchPayload!
  updateManyProjectServices(data: ProjectServiceUpdateManyMutationInput!, where: ProjectServiceWhereInput): BatchPayload!
  updateManyProjectServiceRules(data: ProjectServiceRuleUpdateManyMutationInput!, where: ProjectServiceRuleWhereInput): BatchPayload!
  updateManyPlans(data: PlanUpdateManyMutationInput!, where: PlanWhereInput): BatchPayload!
  updateManySessions(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): BatchPayload!
  updateManyInvoiceItemEntries(data: InvoiceItemEntryUpdateManyMutationInput!, where: InvoiceItemEntryWhereInput): BatchPayload!
  updateManyInvoices(data: InvoiceUpdateManyMutationInput!, where: InvoiceWhereInput): BatchPayload!
  updateManyLedgerTransactions(data: LedgerTransactionUpdateManyMutationInput!, where: LedgerTransactionWhereInput): BatchPayload!
  updateManyLedgerPostings(data: LedgerPostingUpdateManyMutationInput!, where: LedgerPostingWhereInput): BatchPayload!
  updateManyBanks(data: BankUpdateManyMutationInput!, where: BankWhereInput): BatchPayload!
  updateManyBankTransactions(data: BankTransactionUpdateManyMutationInput!, where: BankTransactionWhereInput): BatchPayload!
  updateManyAssets(data: AssetUpdateManyMutationInput!, where: AssetWhereInput): BatchPayload!
  updateManyInventoryOnHands(data: InventoryOnHandUpdateManyMutationInput!, where: InventoryOnHandWhereInput): BatchPayload!
  updateManyPurchaseOrderLines(data: PurchaseOrderLineUpdateManyMutationInput!, where: PurchaseOrderLineWhereInput): BatchPayload!
  updateManyApInvoices(data: ApInvoiceUpdateManyMutationInput!, where: ApInvoiceWhereInput): BatchPayload!
  updateManySalesOrderLines(data: SalesOrderLineUpdateManyMutationInput!, where: SalesOrderLineWhereInput): BatchPayload!
  updateManyPredictedSalesValueByCompanies(data: PredictedSalesValueByCompanyUpdateManyMutationInput!, where: PredictedSalesValueByCompanyWhereInput): BatchPayload!
  updateManyPredictedSalesQuantityOfItemsByCompanies(data: PredictedSalesQuantityOfItemsByCompanyUpdateManyMutationInput!, where: PredictedSalesQuantityOfItemsByCompanyWhereInput): BatchPayload!
  updateManyMedicareServices(data: MedicareServiceUpdateManyMutationInput!, where: MedicareServiceWhereInput): BatchPayload!
  updateManyPatients(data: PatientUpdateManyMutationInput!, where: PatientWhereInput): BatchPayload!
  updateManyHealthcareProviders(data: HealthcareProviderUpdateManyMutationInput!, where: HealthcareProviderWhereInput): BatchPayload!
  updateManyImmunisationSchedules(data: ImmunisationScheduleUpdateManyMutationInput!, where: ImmunisationScheduleWhereInput): BatchPayload!
  updateManyHILogs(data: HILogUpdateManyMutationInput!, where: HILogWhereInput): BatchPayload!
  updateManyPbsTPPs(data: PbsTPPUpdateManyMutationInput!, where: PbsTPPWhereInput): BatchPayload!
  updateManyMeansTestLimitses(data: MeansTestLimitsUpdateManyMutationInput!, where: MeansTestLimitsWhereInput): BatchPayload!
  updateManySalesOrders(data: SalesOrderUpdateManyMutationInput!, where: SalesOrderWhereInput): BatchPayload!
  updateManyPoReceipts(data: PoReceiptUpdateManyMutationInput!, where: PoReceiptWhereInput): BatchPayload!
  updateManyPbsOrganisations(data: PbsOrganisationUpdateManyMutationInput!, where: PbsOrganisationWhereInput): BatchPayload!
  updateManyContacts(data: ContactUpdateManyMutationInput!, where: ContactWhereInput): BatchPayload!
  updateManyTimeSheetEntries(data: TimeSheetEntryUpdateManyMutationInput!, where: TimeSheetEntryWhereInput): BatchPayload!
  updateManyMeansTestedFees(data: MeansTestedFeeUpdateManyMutationInput!, where: MeansTestedFeeWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyTimeSheets(data: TimeSheetUpdateManyMutationInput!, where: TimeSheetWhereInput): BatchPayload!
  updateManySuppliers(data: SupplierUpdateManyMutationInput!, where: SupplierWhereInput): BatchPayload!
  updateManyVaccineBrands(data: VaccineBrandUpdateManyMutationInput!, where: VaccineBrandWhereInput): BatchPayload!
  updateManyMainAccounts(data: MainAccountUpdateManyMutationInput!, where: MainAccountWhereInput): BatchPayload!
  updateManyDiseases(data: DiseaseUpdateManyMutationInput!, where: DiseaseWhereInput): BatchPayload!
  updateManyWareHouses(data: WareHouseUpdateManyMutationInput!, where: WareHouseWhereInput): BatchPayload!
  updateManyLedgerJournals(data: LedgerJournalUpdateManyMutationInput!, where: LedgerJournalWhereInput): BatchPayload!
  updateManyServices(data: ServiceUpdateManyMutationInput!, where: ServiceWhereInput): BatchPayload!
  updateManyInventories(data: InventoryUpdateManyMutationInput!, where: InventoryWhereInput): BatchPayload!
  updateManyAttachments(data: AttachmentUpdateManyMutationInput!, where: AttachmentWhereInput): BatchPayload!
  updateManyCustomers(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  updateManyPurchaseOrders(data: PurchaseOrderUpdateManyMutationInput!, where: PurchaseOrderWhereInput): BatchPayload!
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyAssetGroups(data: AssetGroupUpdateManyMutationInput!, where: AssetGroupWhereInput): BatchPayload!
  updateManyNames(data: NameUpdateManyMutationInput!, where: NameWhereInput): BatchPayload!
  updateManyBasicDailyFees(data: BasicDailyFeeUpdateManyMutationInput!, where: BasicDailyFeeWhereInput): BatchPayload!
  deleteManyCompanyMembers(where: CompanyMemberWhereInput): BatchPayload!
  deleteManyIntegrations(where: IntegrationWhereInput): BatchPayload!
  deleteManyProjectServices(where: ProjectServiceWhereInput): BatchPayload!
  deleteManyProjectServiceRules(where: ProjectServiceRuleWhereInput): BatchPayload!
  deleteManyPlans(where: PlanWhereInput): BatchPayload!
  deleteManySessions(where: SessionWhereInput): BatchPayload!
  deleteManyInvoiceItemEntries(where: InvoiceItemEntryWhereInput): BatchPayload!
  deleteManyInvoices(where: InvoiceWhereInput): BatchPayload!
  deleteManyLedgerTransactions(where: LedgerTransactionWhereInput): BatchPayload!
  deleteManyLedgerPostings(where: LedgerPostingWhereInput): BatchPayload!
  deleteManyBanks(where: BankWhereInput): BatchPayload!
  deleteManyBankTransactions(where: BankTransactionWhereInput): BatchPayload!
  deleteManyAssets(where: AssetWhereInput): BatchPayload!
  deleteManyInventoryOnHands(where: InventoryOnHandWhereInput): BatchPayload!
  deleteManyPurchaseOrderLines(where: PurchaseOrderLineWhereInput): BatchPayload!
  deleteManyApInvoices(where: ApInvoiceWhereInput): BatchPayload!
  deleteManySalesOrderLines(where: SalesOrderLineWhereInput): BatchPayload!
  deleteManyPredictedSalesValueByCompanies(where: PredictedSalesValueByCompanyWhereInput): BatchPayload!
  deleteManyPredictedSalesQuantityOfItemsByCompanies(where: PredictedSalesQuantityOfItemsByCompanyWhereInput): BatchPayload!
  deleteManyMedicareServices(where: MedicareServiceWhereInput): BatchPayload!
  deleteManyPatients(where: PatientWhereInput): BatchPayload!
  deleteManyHealthcareProviders(where: HealthcareProviderWhereInput): BatchPayload!
  deleteManyImmunisationSchedules(where: ImmunisationScheduleWhereInput): BatchPayload!
  deleteManyHILogs(where: HILogWhereInput): BatchPayload!
  deleteManyPbsTPPs(where: PbsTPPWhereInput): BatchPayload!
  deleteManyMeansTestLimitses(where: MeansTestLimitsWhereInput): BatchPayload!
  deleteManySalesOrders(where: SalesOrderWhereInput): BatchPayload!
  deleteManyPoReceipts(where: PoReceiptWhereInput): BatchPayload!
  deleteManyPbsOrganisations(where: PbsOrganisationWhereInput): BatchPayload!
  deleteManyContacts(where: ContactWhereInput): BatchPayload!
  deleteManyTimeSheetEntries(where: TimeSheetEntryWhereInput): BatchPayload!
  deleteManyMeansTestedFees(where: MeansTestedFeeWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyTimeSheets(where: TimeSheetWhereInput): BatchPayload!
  deleteManySuppliers(where: SupplierWhereInput): BatchPayload!
  deleteManyVaccineBrands(where: VaccineBrandWhereInput): BatchPayload!
  deleteManyMainAccounts(where: MainAccountWhereInput): BatchPayload!
  deleteManyDiseases(where: DiseaseWhereInput): BatchPayload!
  deleteManyWareHouses(where: WareHouseWhereInput): BatchPayload!
  deleteManyLedgerJournals(where: LedgerJournalWhereInput): BatchPayload!
  deleteManyServices(where: ServiceWhereInput): BatchPayload!
  deleteManyInventories(where: InventoryWhereInput): BatchPayload!
  deleteManyAttachments(where: AttachmentWhereInput): BatchPayload!
  deleteManyCustomers(where: CustomerWhereInput): BatchPayload!
  deleteManyPurchaseOrders(where: PurchaseOrderWhereInput): BatchPayload!
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyAssetGroups(where: AssetGroupWhereInput): BatchPayload!
  deleteManyNames(where: NameWhereInput): BatchPayload!
  deleteManyBasicDailyFees(where: BasicDailyFeeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type Name implements Node {
  id: ID!
  name: String
  isPrimary: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type NameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NameEdge]!
  aggregate: AggregateName!
}

input NameCreateInput {
  id: ID
  name: String
  isPrimary: Boolean
  isArchived: Boolean
  isDeleted: Boolean
}

input NameCreateManyInput {
  create: [NameCreateInput!]
  connect: [NameWhereUniqueInput!]
}

"""An edge in a connection."""
type NameEdge {
  """The item at the end of the edge."""
  node: Name!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NameOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  isPrimary_ASC
  isPrimary_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NamePreviousValues {
  id: ID!
  name: String
  isPrimary: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NameScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [NameScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [NameScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NameScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  isPrimary: Boolean

  """All values that are not equal to given value."""
  isPrimary_not: Boolean
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type NameSubscriptionPayload {
  mutation: MutationType!
  node: Name
  updatedFields: [String!]
  previousValues: NamePreviousValues
}

input NameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NameSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NameWhereInput
}

input NameUpdateDataInput {
  name: String
  isPrimary: Boolean
  isArchived: Boolean
  isDeleted: Boolean
}

input NameUpdateInput {
  name: String
  isPrimary: Boolean
  isArchived: Boolean
  isDeleted: Boolean
}

input NameUpdateManyDataInput {
  name: String
  isPrimary: Boolean
  isArchived: Boolean
  isDeleted: Boolean
}

input NameUpdateManyInput {
  create: [NameCreateInput!]
  connect: [NameWhereUniqueInput!]
  set: [NameWhereUniqueInput!]
  disconnect: [NameWhereUniqueInput!]
  delete: [NameWhereUniqueInput!]
  update: [NameUpdateWithWhereUniqueNestedInput!]
  updateMany: [NameUpdateManyWithWhereNestedInput!]
  deleteMany: [NameScalarWhereInput!]
  upsert: [NameUpsertWithWhereUniqueNestedInput!]
}

input NameUpdateManyMutationInput {
  name: String
  isPrimary: Boolean
  isArchived: Boolean
  isDeleted: Boolean
}

input NameUpdateManyWithWhereNestedInput {
  where: NameScalarWhereInput!
  data: NameUpdateManyDataInput!
}

input NameUpdateWithWhereUniqueNestedInput {
  where: NameWhereUniqueInput!
  data: NameUpdateDataInput!
}

input NameUpsertWithWhereUniqueNestedInput {
  where: NameWhereUniqueInput!
  update: NameUpdateDataInput!
  create: NameCreateInput!
}

input NameWhereInput {
  """Logical AND on all given filters."""
  AND: [NameWhereInput!]

  """Logical OR on all given filters."""
  OR: [NameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NameWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  isPrimary: Boolean

  """All values that are not equal to given value."""
  isPrimary_not: Boolean
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input NameWhereUniqueInput {
  id: ID
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Patient implements Node {
  id: ID!
  title: String
  firstName: String
  lastName: String
  names(where: NameWhereInput, orderBy: NameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Name!]
  address: Address
  birthAddress: Address
  dateOfBirth: DateTime
  customer: Customer
  gender: Gender
  dvaCardType: DVACardType
  aboriginalStatus: AboriginalStatus
  pensionerConcession: String
  commonwealthSeniors: String
  healthcareConcession: String
  safetyNetConcession: Float
  medicareNumber: String
  DVA: String
  potentialDuplicate: Boolean
  oneName: Boolean
  ihi: String
  ihiValidatedDate: DateTime
  noOfBirths: Int
  deceasedDate: DateTime
  basicDailyFee(where: BasicDailyFeeWhereInput, orderBy: BasicDailyFeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BasicDailyFee!]
  levelOfCare: LevelOfCare
  dateEnteredAgedCare: DateTime
  company: Company
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PatientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PatientEdge]!
  aggregate: AggregatePatient!
}

input PatientCreateInput {
  id: ID
  title: String
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  gender: Gender
  dvaCardType: DVACardType
  aboriginalStatus: AboriginalStatus
  pensionerConcession: String
  commonwealthSeniors: String
  healthcareConcession: String
  safetyNetConcession: Float
  medicareNumber: String
  DVA: String
  potentialDuplicate: Boolean
  oneName: Boolean
  ihi: String
  ihiValidatedDate: DateTime
  noOfBirths: Int
  deceasedDate: DateTime
  levelOfCare: LevelOfCare
  dateEnteredAgedCare: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  names: NameCreateManyInput
  address: AddressCreateOneInput
  birthAddress: AddressCreateOneInput
  customer: CustomerCreateOneInput
  basicDailyFee: BasicDailyFeeCreateManyInput
  company: CompanyCreateOneInput
}

"""An edge in a connection."""
type PatientEdge {
  """The item at the end of the edge."""
  node: Patient!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PatientOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  dateOfBirth_ASC
  dateOfBirth_DESC
  gender_ASC
  gender_DESC
  dvaCardType_ASC
  dvaCardType_DESC
  aboriginalStatus_ASC
  aboriginalStatus_DESC
  pensionerConcession_ASC
  pensionerConcession_DESC
  commonwealthSeniors_ASC
  commonwealthSeniors_DESC
  healthcareConcession_ASC
  healthcareConcession_DESC
  safetyNetConcession_ASC
  safetyNetConcession_DESC
  medicareNumber_ASC
  medicareNumber_DESC
  DVA_ASC
  DVA_DESC
  potentialDuplicate_ASC
  potentialDuplicate_DESC
  oneName_ASC
  oneName_DESC
  ihi_ASC
  ihi_DESC
  ihiValidatedDate_ASC
  ihiValidatedDate_DESC
  noOfBirths_ASC
  noOfBirths_DESC
  deceasedDate_ASC
  deceasedDate_DESC
  levelOfCare_ASC
  levelOfCare_DESC
  dateEnteredAgedCare_ASC
  dateEnteredAgedCare_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PatientPreviousValues {
  id: ID!
  title: String
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  gender: Gender
  dvaCardType: DVACardType
  aboriginalStatus: AboriginalStatus
  pensionerConcession: String
  commonwealthSeniors: String
  healthcareConcession: String
  safetyNetConcession: Float
  medicareNumber: String
  DVA: String
  potentialDuplicate: Boolean
  oneName: Boolean
  ihi: String
  ihiValidatedDate: DateTime
  noOfBirths: Int
  deceasedDate: DateTime
  levelOfCare: LevelOfCare
  dateEnteredAgedCare: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PatientSubscriptionPayload {
  mutation: MutationType!
  node: Patient
  updatedFields: [String!]
  previousValues: PatientPreviousValues
}

input PatientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PatientSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PatientSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PatientSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PatientWhereInput
}

input PatientUpdateInput {
  title: String
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  gender: Gender
  dvaCardType: DVACardType
  aboriginalStatus: AboriginalStatus
  pensionerConcession: String
  commonwealthSeniors: String
  healthcareConcession: String
  safetyNetConcession: Float
  medicareNumber: String
  DVA: String
  potentialDuplicate: Boolean
  oneName: Boolean
  ihi: String
  ihiValidatedDate: DateTime
  noOfBirths: Int
  deceasedDate: DateTime
  levelOfCare: LevelOfCare
  dateEnteredAgedCare: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  names: NameUpdateManyInput
  address: AddressUpdateOneInput
  birthAddress: AddressUpdateOneInput
  customer: CustomerUpdateOneInput
  basicDailyFee: BasicDailyFeeUpdateManyInput
  company: CompanyUpdateOneInput
}

input PatientUpdateManyMutationInput {
  title: String
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  gender: Gender
  dvaCardType: DVACardType
  aboriginalStatus: AboriginalStatus
  pensionerConcession: String
  commonwealthSeniors: String
  healthcareConcession: String
  safetyNetConcession: Float
  medicareNumber: String
  DVA: String
  potentialDuplicate: Boolean
  oneName: Boolean
  ihi: String
  ihiValidatedDate: DateTime
  noOfBirths: Int
  deceasedDate: DateTime
  levelOfCare: LevelOfCare
  dateEnteredAgedCare: DateTime
  isArchived: Boolean
  isDeleted: Boolean
}

input PatientWhereInput {
  """Logical AND on all given filters."""
  AND: [PatientWhereInput!]

  """Logical OR on all given filters."""
  OR: [PatientWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PatientWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  dateOfBirth: DateTime

  """All values that are not equal to given value."""
  dateOfBirth_not: DateTime

  """All values that are contained in given list."""
  dateOfBirth_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfBirth_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfBirth_lt: DateTime

  """All values less than or equal the given value."""
  dateOfBirth_lte: DateTime

  """All values greater than the given value."""
  dateOfBirth_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfBirth_gte: DateTime
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  dvaCardType: DVACardType

  """All values that are not equal to given value."""
  dvaCardType_not: DVACardType

  """All values that are contained in given list."""
  dvaCardType_in: [DVACardType!]

  """All values that are not contained in given list."""
  dvaCardType_not_in: [DVACardType!]
  aboriginalStatus: AboriginalStatus

  """All values that are not equal to given value."""
  aboriginalStatus_not: AboriginalStatus

  """All values that are contained in given list."""
  aboriginalStatus_in: [AboriginalStatus!]

  """All values that are not contained in given list."""
  aboriginalStatus_not_in: [AboriginalStatus!]
  pensionerConcession: String

  """All values that are not equal to given value."""
  pensionerConcession_not: String

  """All values that are contained in given list."""
  pensionerConcession_in: [String!]

  """All values that are not contained in given list."""
  pensionerConcession_not_in: [String!]

  """All values less than the given value."""
  pensionerConcession_lt: String

  """All values less than or equal the given value."""
  pensionerConcession_lte: String

  """All values greater than the given value."""
  pensionerConcession_gt: String

  """All values greater than or equal the given value."""
  pensionerConcession_gte: String

  """All values containing the given string."""
  pensionerConcession_contains: String

  """All values not containing the given string."""
  pensionerConcession_not_contains: String

  """All values starting with the given string."""
  pensionerConcession_starts_with: String

  """All values not starting with the given string."""
  pensionerConcession_not_starts_with: String

  """All values ending with the given string."""
  pensionerConcession_ends_with: String

  """All values not ending with the given string."""
  pensionerConcession_not_ends_with: String
  commonwealthSeniors: String

  """All values that are not equal to given value."""
  commonwealthSeniors_not: String

  """All values that are contained in given list."""
  commonwealthSeniors_in: [String!]

  """All values that are not contained in given list."""
  commonwealthSeniors_not_in: [String!]

  """All values less than the given value."""
  commonwealthSeniors_lt: String

  """All values less than or equal the given value."""
  commonwealthSeniors_lte: String

  """All values greater than the given value."""
  commonwealthSeniors_gt: String

  """All values greater than or equal the given value."""
  commonwealthSeniors_gte: String

  """All values containing the given string."""
  commonwealthSeniors_contains: String

  """All values not containing the given string."""
  commonwealthSeniors_not_contains: String

  """All values starting with the given string."""
  commonwealthSeniors_starts_with: String

  """All values not starting with the given string."""
  commonwealthSeniors_not_starts_with: String

  """All values ending with the given string."""
  commonwealthSeniors_ends_with: String

  """All values not ending with the given string."""
  commonwealthSeniors_not_ends_with: String
  healthcareConcession: String

  """All values that are not equal to given value."""
  healthcareConcession_not: String

  """All values that are contained in given list."""
  healthcareConcession_in: [String!]

  """All values that are not contained in given list."""
  healthcareConcession_not_in: [String!]

  """All values less than the given value."""
  healthcareConcession_lt: String

  """All values less than or equal the given value."""
  healthcareConcession_lte: String

  """All values greater than the given value."""
  healthcareConcession_gt: String

  """All values greater than or equal the given value."""
  healthcareConcession_gte: String

  """All values containing the given string."""
  healthcareConcession_contains: String

  """All values not containing the given string."""
  healthcareConcession_not_contains: String

  """All values starting with the given string."""
  healthcareConcession_starts_with: String

  """All values not starting with the given string."""
  healthcareConcession_not_starts_with: String

  """All values ending with the given string."""
  healthcareConcession_ends_with: String

  """All values not ending with the given string."""
  healthcareConcession_not_ends_with: String
  safetyNetConcession: Float

  """All values that are not equal to given value."""
  safetyNetConcession_not: Float

  """All values that are contained in given list."""
  safetyNetConcession_in: [Float!]

  """All values that are not contained in given list."""
  safetyNetConcession_not_in: [Float!]

  """All values less than the given value."""
  safetyNetConcession_lt: Float

  """All values less than or equal the given value."""
  safetyNetConcession_lte: Float

  """All values greater than the given value."""
  safetyNetConcession_gt: Float

  """All values greater than or equal the given value."""
  safetyNetConcession_gte: Float
  medicareNumber: String

  """All values that are not equal to given value."""
  medicareNumber_not: String

  """All values that are contained in given list."""
  medicareNumber_in: [String!]

  """All values that are not contained in given list."""
  medicareNumber_not_in: [String!]

  """All values less than the given value."""
  medicareNumber_lt: String

  """All values less than or equal the given value."""
  medicareNumber_lte: String

  """All values greater than the given value."""
  medicareNumber_gt: String

  """All values greater than or equal the given value."""
  medicareNumber_gte: String

  """All values containing the given string."""
  medicareNumber_contains: String

  """All values not containing the given string."""
  medicareNumber_not_contains: String

  """All values starting with the given string."""
  medicareNumber_starts_with: String

  """All values not starting with the given string."""
  medicareNumber_not_starts_with: String

  """All values ending with the given string."""
  medicareNumber_ends_with: String

  """All values not ending with the given string."""
  medicareNumber_not_ends_with: String
  DVA: String

  """All values that are not equal to given value."""
  DVA_not: String

  """All values that are contained in given list."""
  DVA_in: [String!]

  """All values that are not contained in given list."""
  DVA_not_in: [String!]

  """All values less than the given value."""
  DVA_lt: String

  """All values less than or equal the given value."""
  DVA_lte: String

  """All values greater than the given value."""
  DVA_gt: String

  """All values greater than or equal the given value."""
  DVA_gte: String

  """All values containing the given string."""
  DVA_contains: String

  """All values not containing the given string."""
  DVA_not_contains: String

  """All values starting with the given string."""
  DVA_starts_with: String

  """All values not starting with the given string."""
  DVA_not_starts_with: String

  """All values ending with the given string."""
  DVA_ends_with: String

  """All values not ending with the given string."""
  DVA_not_ends_with: String
  potentialDuplicate: Boolean

  """All values that are not equal to given value."""
  potentialDuplicate_not: Boolean
  oneName: Boolean

  """All values that are not equal to given value."""
  oneName_not: Boolean
  ihi: String

  """All values that are not equal to given value."""
  ihi_not: String

  """All values that are contained in given list."""
  ihi_in: [String!]

  """All values that are not contained in given list."""
  ihi_not_in: [String!]

  """All values less than the given value."""
  ihi_lt: String

  """All values less than or equal the given value."""
  ihi_lte: String

  """All values greater than the given value."""
  ihi_gt: String

  """All values greater than or equal the given value."""
  ihi_gte: String

  """All values containing the given string."""
  ihi_contains: String

  """All values not containing the given string."""
  ihi_not_contains: String

  """All values starting with the given string."""
  ihi_starts_with: String

  """All values not starting with the given string."""
  ihi_not_starts_with: String

  """All values ending with the given string."""
  ihi_ends_with: String

  """All values not ending with the given string."""
  ihi_not_ends_with: String
  ihiValidatedDate: DateTime

  """All values that are not equal to given value."""
  ihiValidatedDate_not: DateTime

  """All values that are contained in given list."""
  ihiValidatedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  ihiValidatedDate_not_in: [DateTime!]

  """All values less than the given value."""
  ihiValidatedDate_lt: DateTime

  """All values less than or equal the given value."""
  ihiValidatedDate_lte: DateTime

  """All values greater than the given value."""
  ihiValidatedDate_gt: DateTime

  """All values greater than or equal the given value."""
  ihiValidatedDate_gte: DateTime
  noOfBirths: Int

  """All values that are not equal to given value."""
  noOfBirths_not: Int

  """All values that are contained in given list."""
  noOfBirths_in: [Int!]

  """All values that are not contained in given list."""
  noOfBirths_not_in: [Int!]

  """All values less than the given value."""
  noOfBirths_lt: Int

  """All values less than or equal the given value."""
  noOfBirths_lte: Int

  """All values greater than the given value."""
  noOfBirths_gt: Int

  """All values greater than or equal the given value."""
  noOfBirths_gte: Int
  deceasedDate: DateTime

  """All values that are not equal to given value."""
  deceasedDate_not: DateTime

  """All values that are contained in given list."""
  deceasedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  deceasedDate_not_in: [DateTime!]

  """All values less than the given value."""
  deceasedDate_lt: DateTime

  """All values less than or equal the given value."""
  deceasedDate_lte: DateTime

  """All values greater than the given value."""
  deceasedDate_gt: DateTime

  """All values greater than or equal the given value."""
  deceasedDate_gte: DateTime
  levelOfCare: LevelOfCare

  """All values that are not equal to given value."""
  levelOfCare_not: LevelOfCare

  """All values that are contained in given list."""
  levelOfCare_in: [LevelOfCare!]

  """All values that are not contained in given list."""
  levelOfCare_not_in: [LevelOfCare!]
  dateEnteredAgedCare: DateTime

  """All values that are not equal to given value."""
  dateEnteredAgedCare_not: DateTime

  """All values that are contained in given list."""
  dateEnteredAgedCare_in: [DateTime!]

  """All values that are not contained in given list."""
  dateEnteredAgedCare_not_in: [DateTime!]

  """All values less than the given value."""
  dateEnteredAgedCare_lt: DateTime

  """All values less than or equal the given value."""
  dateEnteredAgedCare_lte: DateTime

  """All values greater than the given value."""
  dateEnteredAgedCare_gt: DateTime

  """All values greater than or equal the given value."""
  dateEnteredAgedCare_gte: DateTime
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  names_every: NameWhereInput
  names_some: NameWhereInput
  names_none: NameWhereInput
  address: AddressWhereInput
  birthAddress: AddressWhereInput
  customer: CustomerWhereInput
  basicDailyFee_every: BasicDailyFeeWhereInput
  basicDailyFee_some: BasicDailyFeeWhereInput
  basicDailyFee_none: BasicDailyFeeWhereInput
  company: CompanyWhereInput
}

input PatientWhereUniqueInput {
  id: ID
}

type PbsOrganisation implements Node {
  id: ID!
  code: String
  title: String
  street: String
  city: String
  stateAddress: String
  postcode: String
  phone: String
  effectiveFrom: DateTime
  effectiveTo: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PbsOrganisationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PbsOrganisationEdge]!
  aggregate: AggregatePbsOrganisation!
}

input PbsOrganisationCreateInput {
  id: ID
  code: String
  title: String
  street: String
  city: String
  stateAddress: String
  postcode: String
  phone: String
  effectiveFrom: DateTime
  effectiveTo: DateTime
  isArchived: Boolean
  isDeleted: Boolean
}

input PbsOrganisationCreateOneInput {
  create: PbsOrganisationCreateInput
  connect: PbsOrganisationWhereUniqueInput
}

"""An edge in a connection."""
type PbsOrganisationEdge {
  """The item at the end of the edge."""
  node: PbsOrganisation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PbsOrganisationOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  title_ASC
  title_DESC
  street_ASC
  street_DESC
  city_ASC
  city_DESC
  stateAddress_ASC
  stateAddress_DESC
  postcode_ASC
  postcode_DESC
  phone_ASC
  phone_DESC
  effectiveFrom_ASC
  effectiveFrom_DESC
  effectiveTo_ASC
  effectiveTo_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PbsOrganisationPreviousValues {
  id: ID!
  code: String
  title: String
  street: String
  city: String
  stateAddress: String
  postcode: String
  phone: String
  effectiveFrom: DateTime
  effectiveTo: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PbsOrganisationSubscriptionPayload {
  mutation: MutationType!
  node: PbsOrganisation
  updatedFields: [String!]
  previousValues: PbsOrganisationPreviousValues
}

input PbsOrganisationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PbsOrganisationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PbsOrganisationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PbsOrganisationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PbsOrganisationWhereInput
}

input PbsOrganisationUpdateDataInput {
  code: String
  title: String
  street: String
  city: String
  stateAddress: String
  postcode: String
  phone: String
  effectiveFrom: DateTime
  effectiveTo: DateTime
  isArchived: Boolean
  isDeleted: Boolean
}

input PbsOrganisationUpdateInput {
  code: String
  title: String
  street: String
  city: String
  stateAddress: String
  postcode: String
  phone: String
  effectiveFrom: DateTime
  effectiveTo: DateTime
  isArchived: Boolean
  isDeleted: Boolean
}

input PbsOrganisationUpdateManyMutationInput {
  code: String
  title: String
  street: String
  city: String
  stateAddress: String
  postcode: String
  phone: String
  effectiveFrom: DateTime
  effectiveTo: DateTime
  isArchived: Boolean
  isDeleted: Boolean
}

input PbsOrganisationUpdateOneInput {
  create: PbsOrganisationCreateInput
  connect: PbsOrganisationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PbsOrganisationUpdateDataInput
  upsert: PbsOrganisationUpsertNestedInput
}

input PbsOrganisationUpsertNestedInput {
  update: PbsOrganisationUpdateDataInput!
  create: PbsOrganisationCreateInput!
}

input PbsOrganisationWhereInput {
  """Logical AND on all given filters."""
  AND: [PbsOrganisationWhereInput!]

  """Logical OR on all given filters."""
  OR: [PbsOrganisationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PbsOrganisationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  street: String

  """All values that are not equal to given value."""
  street_not: String

  """All values that are contained in given list."""
  street_in: [String!]

  """All values that are not contained in given list."""
  street_not_in: [String!]

  """All values less than the given value."""
  street_lt: String

  """All values less than or equal the given value."""
  street_lte: String

  """All values greater than the given value."""
  street_gt: String

  """All values greater than or equal the given value."""
  street_gte: String

  """All values containing the given string."""
  street_contains: String

  """All values not containing the given string."""
  street_not_contains: String

  """All values starting with the given string."""
  street_starts_with: String

  """All values not starting with the given string."""
  street_not_starts_with: String

  """All values ending with the given string."""
  street_ends_with: String

  """All values not ending with the given string."""
  street_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  stateAddress: String

  """All values that are not equal to given value."""
  stateAddress_not: String

  """All values that are contained in given list."""
  stateAddress_in: [String!]

  """All values that are not contained in given list."""
  stateAddress_not_in: [String!]

  """All values less than the given value."""
  stateAddress_lt: String

  """All values less than or equal the given value."""
  stateAddress_lte: String

  """All values greater than the given value."""
  stateAddress_gt: String

  """All values greater than or equal the given value."""
  stateAddress_gte: String

  """All values containing the given string."""
  stateAddress_contains: String

  """All values not containing the given string."""
  stateAddress_not_contains: String

  """All values starting with the given string."""
  stateAddress_starts_with: String

  """All values not starting with the given string."""
  stateAddress_not_starts_with: String

  """All values ending with the given string."""
  stateAddress_ends_with: String

  """All values not ending with the given string."""
  stateAddress_not_ends_with: String
  postcode: String

  """All values that are not equal to given value."""
  postcode_not: String

  """All values that are contained in given list."""
  postcode_in: [String!]

  """All values that are not contained in given list."""
  postcode_not_in: [String!]

  """All values less than the given value."""
  postcode_lt: String

  """All values less than or equal the given value."""
  postcode_lte: String

  """All values greater than the given value."""
  postcode_gt: String

  """All values greater than or equal the given value."""
  postcode_gte: String

  """All values containing the given string."""
  postcode_contains: String

  """All values not containing the given string."""
  postcode_not_contains: String

  """All values starting with the given string."""
  postcode_starts_with: String

  """All values not starting with the given string."""
  postcode_not_starts_with: String

  """All values ending with the given string."""
  postcode_ends_with: String

  """All values not ending with the given string."""
  postcode_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  effectiveFrom: DateTime

  """All values that are not equal to given value."""
  effectiveFrom_not: DateTime

  """All values that are contained in given list."""
  effectiveFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  effectiveFrom_not_in: [DateTime!]

  """All values less than the given value."""
  effectiveFrom_lt: DateTime

  """All values less than or equal the given value."""
  effectiveFrom_lte: DateTime

  """All values greater than the given value."""
  effectiveFrom_gt: DateTime

  """All values greater than or equal the given value."""
  effectiveFrom_gte: DateTime
  effectiveTo: DateTime

  """All values that are not equal to given value."""
  effectiveTo_not: DateTime

  """All values that are contained in given list."""
  effectiveTo_in: [DateTime!]

  """All values that are not contained in given list."""
  effectiveTo_not_in: [DateTime!]

  """All values less than the given value."""
  effectiveTo_lt: DateTime

  """All values less than or equal the given value."""
  effectiveTo_lte: DateTime

  """All values greater than the given value."""
  effectiveTo_gt: DateTime

  """All values greater than or equal the given value."""
  effectiveTo_gte: DateTime
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input PbsOrganisationWhereUniqueInput {
  id: ID
}

enum PBSPricingModel {
  EX_MANUFACTURER
  AEMP
  PEMP
  PUEMP
  PREMP
  READY_PREPARED
  READY_PREPARED_NO_PREMIUM
  READY_PREPARED_NO_PREMIUM_NO_CHARGE
  INFUSIBLE
  EXTEMPORANEOUS
}

type PbsTPP implements Node {
  id: ID!
  snomedCode: String
  clinicalPreferredTerm: String
  packSize: Int
  brandName: String
  exManufacturerPrice: Float
  pricingModel: PBSPricingModel
  mpp_id: String
  organisation_id: PbsOrganisation
  effectiveFrom: DateTime
  effectiveTo: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PbsTPPConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PbsTPPEdge]!
  aggregate: AggregatePbsTPP!
}

input PbsTPPCreateInput {
  id: ID
  snomedCode: String
  clinicalPreferredTerm: String
  packSize: Int
  brandName: String
  exManufacturerPrice: Float
  pricingModel: PBSPricingModel
  mpp_id: String
  effectiveFrom: DateTime
  effectiveTo: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  organisation_id: PbsOrganisationCreateOneInput
}

"""An edge in a connection."""
type PbsTPPEdge {
  """The item at the end of the edge."""
  node: PbsTPP!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PbsTPPOrderByInput {
  id_ASC
  id_DESC
  snomedCode_ASC
  snomedCode_DESC
  clinicalPreferredTerm_ASC
  clinicalPreferredTerm_DESC
  packSize_ASC
  packSize_DESC
  brandName_ASC
  brandName_DESC
  exManufacturerPrice_ASC
  exManufacturerPrice_DESC
  pricingModel_ASC
  pricingModel_DESC
  mpp_id_ASC
  mpp_id_DESC
  effectiveFrom_ASC
  effectiveFrom_DESC
  effectiveTo_ASC
  effectiveTo_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PbsTPPPreviousValues {
  id: ID!
  snomedCode: String
  clinicalPreferredTerm: String
  packSize: Int
  brandName: String
  exManufacturerPrice: Float
  pricingModel: PBSPricingModel
  mpp_id: String
  effectiveFrom: DateTime
  effectiveTo: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PbsTPPSubscriptionPayload {
  mutation: MutationType!
  node: PbsTPP
  updatedFields: [String!]
  previousValues: PbsTPPPreviousValues
}

input PbsTPPSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PbsTPPSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PbsTPPSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PbsTPPSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PbsTPPWhereInput
}

input PbsTPPUpdateInput {
  snomedCode: String
  clinicalPreferredTerm: String
  packSize: Int
  brandName: String
  exManufacturerPrice: Float
  pricingModel: PBSPricingModel
  mpp_id: String
  effectiveFrom: DateTime
  effectiveTo: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  organisation_id: PbsOrganisationUpdateOneInput
}

input PbsTPPUpdateManyMutationInput {
  snomedCode: String
  clinicalPreferredTerm: String
  packSize: Int
  brandName: String
  exManufacturerPrice: Float
  pricingModel: PBSPricingModel
  mpp_id: String
  effectiveFrom: DateTime
  effectiveTo: DateTime
  isArchived: Boolean
  isDeleted: Boolean
}

input PbsTPPWhereInput {
  """Logical AND on all given filters."""
  AND: [PbsTPPWhereInput!]

  """Logical OR on all given filters."""
  OR: [PbsTPPWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PbsTPPWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  snomedCode: String

  """All values that are not equal to given value."""
  snomedCode_not: String

  """All values that are contained in given list."""
  snomedCode_in: [String!]

  """All values that are not contained in given list."""
  snomedCode_not_in: [String!]

  """All values less than the given value."""
  snomedCode_lt: String

  """All values less than or equal the given value."""
  snomedCode_lte: String

  """All values greater than the given value."""
  snomedCode_gt: String

  """All values greater than or equal the given value."""
  snomedCode_gte: String

  """All values containing the given string."""
  snomedCode_contains: String

  """All values not containing the given string."""
  snomedCode_not_contains: String

  """All values starting with the given string."""
  snomedCode_starts_with: String

  """All values not starting with the given string."""
  snomedCode_not_starts_with: String

  """All values ending with the given string."""
  snomedCode_ends_with: String

  """All values not ending with the given string."""
  snomedCode_not_ends_with: String
  clinicalPreferredTerm: String

  """All values that are not equal to given value."""
  clinicalPreferredTerm_not: String

  """All values that are contained in given list."""
  clinicalPreferredTerm_in: [String!]

  """All values that are not contained in given list."""
  clinicalPreferredTerm_not_in: [String!]

  """All values less than the given value."""
  clinicalPreferredTerm_lt: String

  """All values less than or equal the given value."""
  clinicalPreferredTerm_lte: String

  """All values greater than the given value."""
  clinicalPreferredTerm_gt: String

  """All values greater than or equal the given value."""
  clinicalPreferredTerm_gte: String

  """All values containing the given string."""
  clinicalPreferredTerm_contains: String

  """All values not containing the given string."""
  clinicalPreferredTerm_not_contains: String

  """All values starting with the given string."""
  clinicalPreferredTerm_starts_with: String

  """All values not starting with the given string."""
  clinicalPreferredTerm_not_starts_with: String

  """All values ending with the given string."""
  clinicalPreferredTerm_ends_with: String

  """All values not ending with the given string."""
  clinicalPreferredTerm_not_ends_with: String
  packSize: Int

  """All values that are not equal to given value."""
  packSize_not: Int

  """All values that are contained in given list."""
  packSize_in: [Int!]

  """All values that are not contained in given list."""
  packSize_not_in: [Int!]

  """All values less than the given value."""
  packSize_lt: Int

  """All values less than or equal the given value."""
  packSize_lte: Int

  """All values greater than the given value."""
  packSize_gt: Int

  """All values greater than or equal the given value."""
  packSize_gte: Int
  brandName: String

  """All values that are not equal to given value."""
  brandName_not: String

  """All values that are contained in given list."""
  brandName_in: [String!]

  """All values that are not contained in given list."""
  brandName_not_in: [String!]

  """All values less than the given value."""
  brandName_lt: String

  """All values less than or equal the given value."""
  brandName_lte: String

  """All values greater than the given value."""
  brandName_gt: String

  """All values greater than or equal the given value."""
  brandName_gte: String

  """All values containing the given string."""
  brandName_contains: String

  """All values not containing the given string."""
  brandName_not_contains: String

  """All values starting with the given string."""
  brandName_starts_with: String

  """All values not starting with the given string."""
  brandName_not_starts_with: String

  """All values ending with the given string."""
  brandName_ends_with: String

  """All values not ending with the given string."""
  brandName_not_ends_with: String
  exManufacturerPrice: Float

  """All values that are not equal to given value."""
  exManufacturerPrice_not: Float

  """All values that are contained in given list."""
  exManufacturerPrice_in: [Float!]

  """All values that are not contained in given list."""
  exManufacturerPrice_not_in: [Float!]

  """All values less than the given value."""
  exManufacturerPrice_lt: Float

  """All values less than or equal the given value."""
  exManufacturerPrice_lte: Float

  """All values greater than the given value."""
  exManufacturerPrice_gt: Float

  """All values greater than or equal the given value."""
  exManufacturerPrice_gte: Float
  pricingModel: PBSPricingModel

  """All values that are not equal to given value."""
  pricingModel_not: PBSPricingModel

  """All values that are contained in given list."""
  pricingModel_in: [PBSPricingModel!]

  """All values that are not contained in given list."""
  pricingModel_not_in: [PBSPricingModel!]
  mpp_id: String

  """All values that are not equal to given value."""
  mpp_id_not: String

  """All values that are contained in given list."""
  mpp_id_in: [String!]

  """All values that are not contained in given list."""
  mpp_id_not_in: [String!]

  """All values less than the given value."""
  mpp_id_lt: String

  """All values less than or equal the given value."""
  mpp_id_lte: String

  """All values greater than the given value."""
  mpp_id_gt: String

  """All values greater than or equal the given value."""
  mpp_id_gte: String

  """All values containing the given string."""
  mpp_id_contains: String

  """All values not containing the given string."""
  mpp_id_not_contains: String

  """All values starting with the given string."""
  mpp_id_starts_with: String

  """All values not starting with the given string."""
  mpp_id_not_starts_with: String

  """All values ending with the given string."""
  mpp_id_ends_with: String

  """All values not ending with the given string."""
  mpp_id_not_ends_with: String
  effectiveFrom: DateTime

  """All values that are not equal to given value."""
  effectiveFrom_not: DateTime

  """All values that are contained in given list."""
  effectiveFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  effectiveFrom_not_in: [DateTime!]

  """All values less than the given value."""
  effectiveFrom_lt: DateTime

  """All values less than or equal the given value."""
  effectiveFrom_lte: DateTime

  """All values greater than the given value."""
  effectiveFrom_gt: DateTime

  """All values greater than or equal the given value."""
  effectiveFrom_gte: DateTime
  effectiveTo: DateTime

  """All values that are not equal to given value."""
  effectiveTo_not: DateTime

  """All values that are contained in given list."""
  effectiveTo_in: [DateTime!]

  """All values that are not contained in given list."""
  effectiveTo_not_in: [DateTime!]

  """All values less than the given value."""
  effectiveTo_lt: DateTime

  """All values less than or equal the given value."""
  effectiveTo_lte: DateTime

  """All values greater than the given value."""
  effectiveTo_gt: DateTime

  """All values greater than or equal the given value."""
  effectiveTo_gte: DateTime
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  organisation_id: PbsOrganisationWhereInput
}

input PbsTPPWhereUniqueInput {
  id: ID
}

enum PeriodUnit {
  WEEKS
  MONTHS
  YEARS
}

type Plan implements Node {
  id: ID!
  company: Company!
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  price: Float
  type: PlanType
  currency: Currency!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PlanConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlanEdge]!
  aggregate: AggregatePlan!
}

input PlanCreateInput {
  id: ID
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  price: Float
  type: PlanType
  currency: Currency!
  company: CompanyCreateOneWithoutActivePlanInput!
}

input PlanCreateOneWithoutCompanyInput {
  create: PlanCreateWithoutCompanyInput
  connect: PlanWhereUniqueInput
}

input PlanCreateWithoutCompanyInput {
  id: ID
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  price: Float
  type: PlanType
  currency: Currency!
}

"""An edge in a connection."""
type PlanEdge {
  """The item at the end of the edge."""
  node: Plan!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlanOrderByInput {
  id_ASC
  id_DESC
  isActive_ASC
  isActive_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  price_ASC
  price_DESC
  type_ASC
  type_DESC
  currency_ASC
  currency_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlanPreviousValues {
  id: ID!
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  price: Float
  type: PlanType
  currency: Currency!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PlanSubscriptionPayload {
  mutation: MutationType!
  node: Plan
  updatedFields: [String!]
  previousValues: PlanPreviousValues
}

input PlanSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlanSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlanSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlanSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlanWhereInput
}

enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

input PlanUpdateInput {
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  price: Float
  type: PlanType
  currency: Currency
  company: CompanyUpdateOneRequiredWithoutActivePlanInput
}

input PlanUpdateManyMutationInput {
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  price: Float
  type: PlanType
  currency: Currency
}

input PlanUpdateOneWithoutCompanyInput {
  create: PlanCreateWithoutCompanyInput
  connect: PlanWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PlanUpdateWithoutCompanyDataInput
  upsert: PlanUpsertWithoutCompanyInput
}

input PlanUpdateWithoutCompanyDataInput {
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  price: Float
  type: PlanType
  currency: Currency
}

input PlanUpsertWithoutCompanyInput {
  update: PlanUpdateWithoutCompanyDataInput!
  create: PlanCreateWithoutCompanyInput!
}

input PlanWhereInput {
  """Logical AND on all given filters."""
  AND: [PlanWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlanWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlanWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  type: PlanType

  """All values that are not equal to given value."""
  type_not: PlanType

  """All values that are contained in given list."""
  type_in: [PlanType!]

  """All values that are not contained in given list."""
  type_not_in: [PlanType!]
  currency: Currency

  """All values that are not equal to given value."""
  currency_not: Currency

  """All values that are contained in given list."""
  currency_in: [Currency!]

  """All values that are not contained in given list."""
  currency_not_in: [Currency!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
}

input PlanWhereUniqueInput {
  id: ID
}

type PoReceipt implements Node {
  id: ID!
  receiptNumber: String
  purchaseOrder: PurchaseOrder
  receiptDate: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PoReceiptConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PoReceiptEdge]!
  aggregate: AggregatePoReceipt!
}

input PoReceiptCreateInput {
  id: ID
  receiptNumber: String
  receiptDate: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  purchaseOrder: PurchaseOrderCreateOneInput
}

input PoReceiptCreateOneInput {
  create: PoReceiptCreateInput
  connect: PoReceiptWhereUniqueInput
}

"""An edge in a connection."""
type PoReceiptEdge {
  """The item at the end of the edge."""
  node: PoReceipt!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PoReceiptOrderByInput {
  id_ASC
  id_DESC
  receiptNumber_ASC
  receiptNumber_DESC
  receiptDate_ASC
  receiptDate_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PoReceiptPreviousValues {
  id: ID!
  receiptNumber: String
  receiptDate: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PoReceiptSubscriptionPayload {
  mutation: MutationType!
  node: PoReceipt
  updatedFields: [String!]
  previousValues: PoReceiptPreviousValues
}

input PoReceiptSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PoReceiptSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PoReceiptSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PoReceiptSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PoReceiptWhereInput
}

input PoReceiptUpdateDataInput {
  receiptNumber: String
  receiptDate: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  purchaseOrder: PurchaseOrderUpdateOneInput
}

input PoReceiptUpdateInput {
  receiptNumber: String
  receiptDate: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  purchaseOrder: PurchaseOrderUpdateOneInput
}

input PoReceiptUpdateManyMutationInput {
  receiptNumber: String
  receiptDate: DateTime
  isArchived: Boolean
  isDeleted: Boolean
}

input PoReceiptUpdateOneInput {
  create: PoReceiptCreateInput
  connect: PoReceiptWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PoReceiptUpdateDataInput
  upsert: PoReceiptUpsertNestedInput
}

input PoReceiptUpsertNestedInput {
  update: PoReceiptUpdateDataInput!
  create: PoReceiptCreateInput!
}

input PoReceiptWhereInput {
  """Logical AND on all given filters."""
  AND: [PoReceiptWhereInput!]

  """Logical OR on all given filters."""
  OR: [PoReceiptWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PoReceiptWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  receiptNumber: String

  """All values that are not equal to given value."""
  receiptNumber_not: String

  """All values that are contained in given list."""
  receiptNumber_in: [String!]

  """All values that are not contained in given list."""
  receiptNumber_not_in: [String!]

  """All values less than the given value."""
  receiptNumber_lt: String

  """All values less than or equal the given value."""
  receiptNumber_lte: String

  """All values greater than the given value."""
  receiptNumber_gt: String

  """All values greater than or equal the given value."""
  receiptNumber_gte: String

  """All values containing the given string."""
  receiptNumber_contains: String

  """All values not containing the given string."""
  receiptNumber_not_contains: String

  """All values starting with the given string."""
  receiptNumber_starts_with: String

  """All values not starting with the given string."""
  receiptNumber_not_starts_with: String

  """All values ending with the given string."""
  receiptNumber_ends_with: String

  """All values not ending with the given string."""
  receiptNumber_not_ends_with: String
  receiptDate: DateTime

  """All values that are not equal to given value."""
  receiptDate_not: DateTime

  """All values that are contained in given list."""
  receiptDate_in: [DateTime!]

  """All values that are not contained in given list."""
  receiptDate_not_in: [DateTime!]

  """All values less than the given value."""
  receiptDate_lt: DateTime

  """All values less than or equal the given value."""
  receiptDate_lte: DateTime

  """All values greater than the given value."""
  receiptDate_gt: DateTime

  """All values greater than or equal the given value."""
  receiptDate_gte: DateTime
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  purchaseOrder: PurchaseOrderWhereInput
}

input PoReceiptWhereUniqueInput {
  id: ID
}

enum PoStatus {
  OPEN
  CONFIRMED
  DELIVERED
  PARTIALLY_DELIVERED
  PACKED
  PARTIALLY_PACKED
  INVOICED
  RECEIPTED
}

enum PostingType {
  DRCONTROL
  BANK
  REVENUE
  TAXPAYABLE
  TAXRECEIVABLE
}

type PredictedSalesQuantityOfItemsByCompany implements Node {
  id: ID!
  datePredictionRun: DateTime
  company: Company!
  inventory: Inventory
  predictedSalesValue: Float
  predictedDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PredictedSalesQuantityOfItemsByCompanyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PredictedSalesQuantityOfItemsByCompanyEdge]!
  aggregate: AggregatePredictedSalesQuantityOfItemsByCompany!
}

input PredictedSalesQuantityOfItemsByCompanyCreateInput {
  id: ID
  datePredictionRun: DateTime
  predictedSalesValue: Float
  predictedDate: DateTime
  company: CompanyCreateOneInput!
  inventory: InventoryCreateOneInput
}

"""An edge in a connection."""
type PredictedSalesQuantityOfItemsByCompanyEdge {
  """The item at the end of the edge."""
  node: PredictedSalesQuantityOfItemsByCompany!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PredictedSalesQuantityOfItemsByCompanyOrderByInput {
  id_ASC
  id_DESC
  datePredictionRun_ASC
  datePredictionRun_DESC
  predictedSalesValue_ASC
  predictedSalesValue_DESC
  predictedDate_ASC
  predictedDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PredictedSalesQuantityOfItemsByCompanyPreviousValues {
  id: ID!
  datePredictionRun: DateTime
  predictedSalesValue: Float
  predictedDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PredictedSalesQuantityOfItemsByCompanySubscriptionPayload {
  mutation: MutationType!
  node: PredictedSalesQuantityOfItemsByCompany
  updatedFields: [String!]
  previousValues: PredictedSalesQuantityOfItemsByCompanyPreviousValues
}

input PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PredictedSalesQuantityOfItemsByCompanyWhereInput
}

input PredictedSalesQuantityOfItemsByCompanyUpdateInput {
  datePredictionRun: DateTime
  predictedSalesValue: Float
  predictedDate: DateTime
  company: CompanyUpdateOneRequiredInput
  inventory: InventoryUpdateOneInput
}

input PredictedSalesQuantityOfItemsByCompanyUpdateManyMutationInput {
  datePredictionRun: DateTime
  predictedSalesValue: Float
  predictedDate: DateTime
}

input PredictedSalesQuantityOfItemsByCompanyWhereInput {
  """Logical AND on all given filters."""
  AND: [PredictedSalesQuantityOfItemsByCompanyWhereInput!]

  """Logical OR on all given filters."""
  OR: [PredictedSalesQuantityOfItemsByCompanyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PredictedSalesQuantityOfItemsByCompanyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  datePredictionRun: DateTime

  """All values that are not equal to given value."""
  datePredictionRun_not: DateTime

  """All values that are contained in given list."""
  datePredictionRun_in: [DateTime!]

  """All values that are not contained in given list."""
  datePredictionRun_not_in: [DateTime!]

  """All values less than the given value."""
  datePredictionRun_lt: DateTime

  """All values less than or equal the given value."""
  datePredictionRun_lte: DateTime

  """All values greater than the given value."""
  datePredictionRun_gt: DateTime

  """All values greater than or equal the given value."""
  datePredictionRun_gte: DateTime
  predictedSalesValue: Float

  """All values that are not equal to given value."""
  predictedSalesValue_not: Float

  """All values that are contained in given list."""
  predictedSalesValue_in: [Float!]

  """All values that are not contained in given list."""
  predictedSalesValue_not_in: [Float!]

  """All values less than the given value."""
  predictedSalesValue_lt: Float

  """All values less than or equal the given value."""
  predictedSalesValue_lte: Float

  """All values greater than the given value."""
  predictedSalesValue_gt: Float

  """All values greater than or equal the given value."""
  predictedSalesValue_gte: Float
  predictedDate: DateTime

  """All values that are not equal to given value."""
  predictedDate_not: DateTime

  """All values that are contained in given list."""
  predictedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  predictedDate_not_in: [DateTime!]

  """All values less than the given value."""
  predictedDate_lt: DateTime

  """All values less than or equal the given value."""
  predictedDate_lte: DateTime

  """All values greater than the given value."""
  predictedDate_gt: DateTime

  """All values greater than or equal the given value."""
  predictedDate_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
  inventory: InventoryWhereInput
}

input PredictedSalesQuantityOfItemsByCompanyWhereUniqueInput {
  id: ID
}

type PredictedSalesValueByCompany implements Node {
  id: ID!
  datePredictionRun: DateTime
  company: Company!
  predictedSalesValue: Float
  predictedDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PredictedSalesValueByCompanyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PredictedSalesValueByCompanyEdge]!
  aggregate: AggregatePredictedSalesValueByCompany!
}

input PredictedSalesValueByCompanyCreateInput {
  id: ID
  datePredictionRun: DateTime
  predictedSalesValue: Float
  predictedDate: DateTime
  company: CompanyCreateOneInput!
}

"""An edge in a connection."""
type PredictedSalesValueByCompanyEdge {
  """The item at the end of the edge."""
  node: PredictedSalesValueByCompany!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PredictedSalesValueByCompanyOrderByInput {
  id_ASC
  id_DESC
  datePredictionRun_ASC
  datePredictionRun_DESC
  predictedSalesValue_ASC
  predictedSalesValue_DESC
  predictedDate_ASC
  predictedDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PredictedSalesValueByCompanyPreviousValues {
  id: ID!
  datePredictionRun: DateTime
  predictedSalesValue: Float
  predictedDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PredictedSalesValueByCompanySubscriptionPayload {
  mutation: MutationType!
  node: PredictedSalesValueByCompany
  updatedFields: [String!]
  previousValues: PredictedSalesValueByCompanyPreviousValues
}

input PredictedSalesValueByCompanySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PredictedSalesValueByCompanySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PredictedSalesValueByCompanySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PredictedSalesValueByCompanySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PredictedSalesValueByCompanyWhereInput
}

input PredictedSalesValueByCompanyUpdateInput {
  datePredictionRun: DateTime
  predictedSalesValue: Float
  predictedDate: DateTime
  company: CompanyUpdateOneRequiredInput
}

input PredictedSalesValueByCompanyUpdateManyMutationInput {
  datePredictionRun: DateTime
  predictedSalesValue: Float
  predictedDate: DateTime
}

input PredictedSalesValueByCompanyWhereInput {
  """Logical AND on all given filters."""
  AND: [PredictedSalesValueByCompanyWhereInput!]

  """Logical OR on all given filters."""
  OR: [PredictedSalesValueByCompanyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PredictedSalesValueByCompanyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  datePredictionRun: DateTime

  """All values that are not equal to given value."""
  datePredictionRun_not: DateTime

  """All values that are contained in given list."""
  datePredictionRun_in: [DateTime!]

  """All values that are not contained in given list."""
  datePredictionRun_not_in: [DateTime!]

  """All values less than the given value."""
  datePredictionRun_lt: DateTime

  """All values less than or equal the given value."""
  datePredictionRun_lte: DateTime

  """All values greater than the given value."""
  datePredictionRun_gt: DateTime

  """All values greater than or equal the given value."""
  datePredictionRun_gte: DateTime
  predictedSalesValue: Float

  """All values that are not equal to given value."""
  predictedSalesValue_not: Float

  """All values that are contained in given list."""
  predictedSalesValue_in: [Float!]

  """All values that are not contained in given list."""
  predictedSalesValue_not_in: [Float!]

  """All values less than the given value."""
  predictedSalesValue_lt: Float

  """All values less than or equal the given value."""
  predictedSalesValue_lte: Float

  """All values greater than the given value."""
  predictedSalesValue_gt: Float

  """All values greater than or equal the given value."""
  predictedSalesValue_gte: Float
  predictedDate: DateTime

  """All values that are not equal to given value."""
  predictedDate_not: DateTime

  """All values that are contained in given list."""
  predictedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  predictedDate_not_in: [DateTime!]

  """All values less than the given value."""
  predictedDate_lt: DateTime

  """All values less than or equal the given value."""
  predictedDate_lte: DateTime

  """All values greater than the given value."""
  predictedDate_gt: DateTime

  """All values greater than or equal the given value."""
  predictedDate_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
}

input PredictedSalesValueByCompanyWhereUniqueInput {
  id: ID
}

type Project implements Node {
  id: ID!
  company: Company!
  customer: Customer
  description: String
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  projectService(where: ProjectServiceWhereInput, orderBy: ProjectServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectService!]
  startsAt: DateTime
  status: ProjectStatus
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  description: String
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  startsAt: DateTime
  status: ProjectStatus
  company: CompanyCreateOneInput!
  customer: CustomerCreateOneInput
  projectService: ProjectServiceCreateManyWithoutProjectInput
}

input ProjectCreateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutProjectServiceInput {
  create: ProjectCreateWithoutProjectServiceInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutProjectServiceInput {
  id: ID
  description: String
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  startsAt: DateTime
  status: ProjectStatus
  company: CompanyCreateOneInput!
  customer: CustomerCreateOneInput
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  endsAt_ASC
  endsAt_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  name_ASC
  name_DESC
  startsAt_ASC
  startsAt_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  description: String
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  startsAt: DateTime
  status: ProjectStatus
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectService implements Node {
  id: ID!
  amount: Float
  isArchived: Boolean
  isDeleted: Boolean
  project: Project
  rules(where: ProjectServiceRuleWhereInput, orderBy: ProjectServiceRuleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectServiceRule!]
  service: Service
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProjectServiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectServiceEdge]!
  aggregate: AggregateProjectService!
}

input ProjectServiceCreateInput {
  id: ID
  amount: Float
  isArchived: Boolean
  isDeleted: Boolean
  project: ProjectCreateOneWithoutProjectServiceInput
  rules: ProjectServiceRuleCreateManyWithoutProjectServiceInput
  service: ServiceCreateOneInput
}

input ProjectServiceCreateManyWithoutProjectInput {
  create: [ProjectServiceCreateWithoutProjectInput!]
  connect: [ProjectServiceWhereUniqueInput!]
}

input ProjectServiceCreateOneWithoutRulesInput {
  create: ProjectServiceCreateWithoutRulesInput
  connect: ProjectServiceWhereUniqueInput
}

input ProjectServiceCreateWithoutProjectInput {
  id: ID
  amount: Float
  isArchived: Boolean
  isDeleted: Boolean
  rules: ProjectServiceRuleCreateManyWithoutProjectServiceInput
  service: ServiceCreateOneInput
}

input ProjectServiceCreateWithoutRulesInput {
  id: ID
  amount: Float
  isArchived: Boolean
  isDeleted: Boolean
  project: ProjectCreateOneWithoutProjectServiceInput
  service: ServiceCreateOneInput
}

"""An edge in a connection."""
type ProjectServiceEdge {
  """The item at the end of the edge."""
  node: ProjectService!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectServiceOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectServicePreviousValues {
  id: ID!
  amount: Float
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectServiceRule implements Node {
  id: ID!
  projectService: ProjectService
  amount: Float
  percent: Float
  type: ProjectServiceRuleType
  isPercent: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProjectServiceRuleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectServiceRuleEdge]!
  aggregate: AggregateProjectServiceRule!
}

input ProjectServiceRuleCreateInput {
  id: ID
  amount: Float
  percent: Float
  type: ProjectServiceRuleType
  isPercent: Boolean
  projectService: ProjectServiceCreateOneWithoutRulesInput
}

input ProjectServiceRuleCreateManyWithoutProjectServiceInput {
  create: [ProjectServiceRuleCreateWithoutProjectServiceInput!]
  connect: [ProjectServiceRuleWhereUniqueInput!]
}

input ProjectServiceRuleCreateWithoutProjectServiceInput {
  id: ID
  amount: Float
  percent: Float
  type: ProjectServiceRuleType
  isPercent: Boolean
}

"""An edge in a connection."""
type ProjectServiceRuleEdge {
  """The item at the end of the edge."""
  node: ProjectServiceRule!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectServiceRuleOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  percent_ASC
  percent_DESC
  type_ASC
  type_DESC
  isPercent_ASC
  isPercent_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectServiceRulePreviousValues {
  id: ID!
  amount: Float
  percent: Float
  type: ProjectServiceRuleType
  isPercent: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProjectServiceRuleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectServiceRuleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectServiceRuleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectServiceRuleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  percent: Float

  """All values that are not equal to given value."""
  percent_not: Float

  """All values that are contained in given list."""
  percent_in: [Float!]

  """All values that are not contained in given list."""
  percent_not_in: [Float!]

  """All values less than the given value."""
  percent_lt: Float

  """All values less than or equal the given value."""
  percent_lte: Float

  """All values greater than the given value."""
  percent_gt: Float

  """All values greater than or equal the given value."""
  percent_gte: Float
  type: ProjectServiceRuleType

  """All values that are not equal to given value."""
  type_not: ProjectServiceRuleType

  """All values that are contained in given list."""
  type_in: [ProjectServiceRuleType!]

  """All values that are not contained in given list."""
  type_not_in: [ProjectServiceRuleType!]
  isPercent: Boolean

  """All values that are not equal to given value."""
  isPercent_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProjectServiceRuleSubscriptionPayload {
  mutation: MutationType!
  node: ProjectServiceRule
  updatedFields: [String!]
  previousValues: ProjectServiceRulePreviousValues
}

input ProjectServiceRuleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectServiceRuleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectServiceRuleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectServiceRuleSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectServiceRuleWhereInput
}

enum ProjectServiceRuleType {
  PROJECT_ENDS
  PROJECT_STARTS
}

input ProjectServiceRuleUpdateInput {
  amount: Float
  percent: Float
  type: ProjectServiceRuleType
  isPercent: Boolean
  projectService: ProjectServiceUpdateOneWithoutRulesInput
}

input ProjectServiceRuleUpdateManyDataInput {
  amount: Float
  percent: Float
  type: ProjectServiceRuleType
  isPercent: Boolean
}

input ProjectServiceRuleUpdateManyMutationInput {
  amount: Float
  percent: Float
  type: ProjectServiceRuleType
  isPercent: Boolean
}

input ProjectServiceRuleUpdateManyWithoutProjectServiceInput {
  create: [ProjectServiceRuleCreateWithoutProjectServiceInput!]
  connect: [ProjectServiceRuleWhereUniqueInput!]
  set: [ProjectServiceRuleWhereUniqueInput!]
  disconnect: [ProjectServiceRuleWhereUniqueInput!]
  delete: [ProjectServiceRuleWhereUniqueInput!]
  update: [ProjectServiceRuleUpdateWithWhereUniqueWithoutProjectServiceInput!]
  updateMany: [ProjectServiceRuleUpdateManyWithWhereNestedInput!]
  deleteMany: [ProjectServiceRuleScalarWhereInput!]
  upsert: [ProjectServiceRuleUpsertWithWhereUniqueWithoutProjectServiceInput!]
}

input ProjectServiceRuleUpdateManyWithWhereNestedInput {
  where: ProjectServiceRuleScalarWhereInput!
  data: ProjectServiceRuleUpdateManyDataInput!
}

input ProjectServiceRuleUpdateWithoutProjectServiceDataInput {
  amount: Float
  percent: Float
  type: ProjectServiceRuleType
  isPercent: Boolean
}

input ProjectServiceRuleUpdateWithWhereUniqueWithoutProjectServiceInput {
  where: ProjectServiceRuleWhereUniqueInput!
  data: ProjectServiceRuleUpdateWithoutProjectServiceDataInput!
}

input ProjectServiceRuleUpsertWithWhereUniqueWithoutProjectServiceInput {
  where: ProjectServiceRuleWhereUniqueInput!
  update: ProjectServiceRuleUpdateWithoutProjectServiceDataInput!
  create: ProjectServiceRuleCreateWithoutProjectServiceInput!
}

input ProjectServiceRuleWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectServiceRuleWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectServiceRuleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectServiceRuleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  percent: Float

  """All values that are not equal to given value."""
  percent_not: Float

  """All values that are contained in given list."""
  percent_in: [Float!]

  """All values that are not contained in given list."""
  percent_not_in: [Float!]

  """All values less than the given value."""
  percent_lt: Float

  """All values less than or equal the given value."""
  percent_lte: Float

  """All values greater than the given value."""
  percent_gt: Float

  """All values greater than or equal the given value."""
  percent_gte: Float
  type: ProjectServiceRuleType

  """All values that are not equal to given value."""
  type_not: ProjectServiceRuleType

  """All values that are contained in given list."""
  type_in: [ProjectServiceRuleType!]

  """All values that are not contained in given list."""
  type_not_in: [ProjectServiceRuleType!]
  isPercent: Boolean

  """All values that are not equal to given value."""
  isPercent_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  projectService: ProjectServiceWhereInput
}

input ProjectServiceRuleWhereUniqueInput {
  id: ID
}

input ProjectServiceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectServiceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectServiceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectServiceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProjectServiceSubscriptionPayload {
  mutation: MutationType!
  node: ProjectService
  updatedFields: [String!]
  previousValues: ProjectServicePreviousValues
}

input ProjectServiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectServiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectServiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectServiceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectServiceWhereInput
}

input ProjectServiceUpdateInput {
  amount: Float
  isArchived: Boolean
  isDeleted: Boolean
  project: ProjectUpdateOneWithoutProjectServiceInput
  rules: ProjectServiceRuleUpdateManyWithoutProjectServiceInput
  service: ServiceUpdateOneInput
}

input ProjectServiceUpdateManyDataInput {
  amount: Float
  isArchived: Boolean
  isDeleted: Boolean
}

input ProjectServiceUpdateManyMutationInput {
  amount: Float
  isArchived: Boolean
  isDeleted: Boolean
}

input ProjectServiceUpdateManyWithoutProjectInput {
  create: [ProjectServiceCreateWithoutProjectInput!]
  connect: [ProjectServiceWhereUniqueInput!]
  set: [ProjectServiceWhereUniqueInput!]
  disconnect: [ProjectServiceWhereUniqueInput!]
  delete: [ProjectServiceWhereUniqueInput!]
  update: [ProjectServiceUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ProjectServiceUpdateManyWithWhereNestedInput!]
  deleteMany: [ProjectServiceScalarWhereInput!]
  upsert: [ProjectServiceUpsertWithWhereUniqueWithoutProjectInput!]
}

input ProjectServiceUpdateManyWithWhereNestedInput {
  where: ProjectServiceScalarWhereInput!
  data: ProjectServiceUpdateManyDataInput!
}

input ProjectServiceUpdateOneWithoutRulesInput {
  create: ProjectServiceCreateWithoutRulesInput
  connect: ProjectServiceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectServiceUpdateWithoutRulesDataInput
  upsert: ProjectServiceUpsertWithoutRulesInput
}

input ProjectServiceUpdateWithoutProjectDataInput {
  amount: Float
  isArchived: Boolean
  isDeleted: Boolean
  rules: ProjectServiceRuleUpdateManyWithoutProjectServiceInput
  service: ServiceUpdateOneInput
}

input ProjectServiceUpdateWithoutRulesDataInput {
  amount: Float
  isArchived: Boolean
  isDeleted: Boolean
  project: ProjectUpdateOneWithoutProjectServiceInput
  service: ServiceUpdateOneInput
}

input ProjectServiceUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectServiceWhereUniqueInput!
  data: ProjectServiceUpdateWithoutProjectDataInput!
}

input ProjectServiceUpsertWithoutRulesInput {
  update: ProjectServiceUpdateWithoutRulesDataInput!
  create: ProjectServiceCreateWithoutRulesInput!
}

input ProjectServiceUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectServiceWhereUniqueInput!
  update: ProjectServiceUpdateWithoutProjectDataInput!
  create: ProjectServiceCreateWithoutProjectInput!
}

input ProjectServiceWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectServiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectServiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectServiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  project: ProjectWhereInput
  rules_every: ProjectServiceRuleWhereInput
  rules_some: ProjectServiceRuleWhereInput
  rules_none: ProjectServiceRuleWhereInput
  service: ServiceWhereInput
}

input ProjectServiceWhereUniqueInput {
  id: ID
}

enum ProjectStatus {
  CLOSED
  STARTED
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateDataInput {
  description: String
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  startsAt: DateTime
  status: ProjectStatus
  company: CompanyUpdateOneRequiredInput
  customer: CustomerUpdateOneInput
  projectService: ProjectServiceUpdateManyWithoutProjectInput
}

input ProjectUpdateInput {
  description: String
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  startsAt: DateTime
  status: ProjectStatus
  company: CompanyUpdateOneRequiredInput
  customer: CustomerUpdateOneInput
  projectService: ProjectServiceUpdateManyWithoutProjectInput
}

input ProjectUpdateManyMutationInput {
  description: String
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  startsAt: DateTime
  status: ProjectStatus
}

input ProjectUpdateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectUpdateDataInput
  upsert: ProjectUpsertNestedInput
}

input ProjectUpdateOneWithoutProjectServiceInput {
  create: ProjectCreateWithoutProjectServiceInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectUpdateWithoutProjectServiceDataInput
  upsert: ProjectUpsertWithoutProjectServiceInput
}

input ProjectUpdateWithoutProjectServiceDataInput {
  description: String
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  name: String
  startsAt: DateTime
  status: ProjectStatus
  company: CompanyUpdateOneRequiredInput
  customer: CustomerUpdateOneInput
}

input ProjectUpsertNestedInput {
  update: ProjectUpdateDataInput!
  create: ProjectCreateInput!
}

input ProjectUpsertWithoutProjectServiceInput {
  update: ProjectUpdateWithoutProjectServiceDataInput!
  create: ProjectCreateWithoutProjectServiceInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  endsAt: DateTime

  """All values that are not equal to given value."""
  endsAt_not: DateTime

  """All values that are contained in given list."""
  endsAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endsAt_not_in: [DateTime!]

  """All values less than the given value."""
  endsAt_lt: DateTime

  """All values less than or equal the given value."""
  endsAt_lte: DateTime

  """All values greater than the given value."""
  endsAt_gt: DateTime

  """All values greater than or equal the given value."""
  endsAt_gte: DateTime
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  startsAt: DateTime

  """All values that are not equal to given value."""
  startsAt_not: DateTime

  """All values that are contained in given list."""
  startsAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startsAt_not_in: [DateTime!]

  """All values less than the given value."""
  startsAt_lt: DateTime

  """All values less than or equal the given value."""
  startsAt_lte: DateTime

  """All values greater than the given value."""
  startsAt_gt: DateTime

  """All values greater than or equal the given value."""
  startsAt_gte: DateTime
  status: ProjectStatus

  """All values that are not equal to given value."""
  status_not: ProjectStatus

  """All values that are contained in given list."""
  status_in: [ProjectStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ProjectStatus!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
  customer: CustomerWhereInput
  projectService_every: ProjectServiceWhereInput
  projectService_some: ProjectServiceWhereInput
  projectService_none: ProjectServiceWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type PurchaseOrder implements Node {
  id: ID!
  pbsOrganisation: String
  date: DateTime
  orderer: User
  status: PoStatus
  supplier: Supplier
  isPbsPO: Boolean
  poNumber: Int!
  preview: Attachment
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PurchaseOrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PurchaseOrderEdge]!
  aggregate: AggregatePurchaseOrder!
}

input PurchaseOrderCreateInput {
  id: ID
  pbsOrganisation: String
  date: DateTime
  status: PoStatus
  isPbsPO: Boolean
  poNumber: Int!
  isArchived: Boolean
  isDeleted: Boolean
  orderer: UserCreateOneInput
  supplier: SupplierCreateOneInput
  preview: AttachmentCreateOneInput
  company: CompanyCreateOneInput!
}

input PurchaseOrderCreateOneInput {
  create: PurchaseOrderCreateInput
  connect: PurchaseOrderWhereUniqueInput
}

"""An edge in a connection."""
type PurchaseOrderEdge {
  """The item at the end of the edge."""
  node: PurchaseOrder!

  """A cursor for use in pagination."""
  cursor: String!
}

type PurchaseOrderLine implements Node {
  id: ID!
  item: Inventory
  pbsDrug: String
  qty: Int
  unit: UOM
  unitPrice: Float
  site: WareHouse
  purchaseOrder: PurchaseOrder
  poReceipt: PoReceipt
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PurchaseOrderLineConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PurchaseOrderLineEdge]!
  aggregate: AggregatePurchaseOrderLine!
}

input PurchaseOrderLineCreateInput {
  id: ID
  pbsDrug: String
  qty: Int
  unit: UOM
  unitPrice: Float
  isArchived: Boolean
  isDeleted: Boolean
  item: InventoryCreateOneInput
  site: WareHouseCreateOneInput
  purchaseOrder: PurchaseOrderCreateOneInput
  poReceipt: PoReceiptCreateOneInput
}

"""An edge in a connection."""
type PurchaseOrderLineEdge {
  """The item at the end of the edge."""
  node: PurchaseOrderLine!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PurchaseOrderLineOrderByInput {
  id_ASC
  id_DESC
  pbsDrug_ASC
  pbsDrug_DESC
  qty_ASC
  qty_DESC
  unit_ASC
  unit_DESC
  unitPrice_ASC
  unitPrice_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PurchaseOrderLinePreviousValues {
  id: ID!
  pbsDrug: String
  qty: Int
  unit: UOM
  unitPrice: Float
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PurchaseOrderLineSubscriptionPayload {
  mutation: MutationType!
  node: PurchaseOrderLine
  updatedFields: [String!]
  previousValues: PurchaseOrderLinePreviousValues
}

input PurchaseOrderLineSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PurchaseOrderLineSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PurchaseOrderLineSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PurchaseOrderLineSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PurchaseOrderLineWhereInput
}

input PurchaseOrderLineUpdateInput {
  pbsDrug: String
  qty: Int
  unit: UOM
  unitPrice: Float
  isArchived: Boolean
  isDeleted: Boolean
  item: InventoryUpdateOneInput
  site: WareHouseUpdateOneInput
  purchaseOrder: PurchaseOrderUpdateOneInput
  poReceipt: PoReceiptUpdateOneInput
}

input PurchaseOrderLineUpdateManyMutationInput {
  pbsDrug: String
  qty: Int
  unit: UOM
  unitPrice: Float
  isArchived: Boolean
  isDeleted: Boolean
}

input PurchaseOrderLineWhereInput {
  """Logical AND on all given filters."""
  AND: [PurchaseOrderLineWhereInput!]

  """Logical OR on all given filters."""
  OR: [PurchaseOrderLineWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PurchaseOrderLineWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  pbsDrug: String

  """All values that are not equal to given value."""
  pbsDrug_not: String

  """All values that are contained in given list."""
  pbsDrug_in: [String!]

  """All values that are not contained in given list."""
  pbsDrug_not_in: [String!]

  """All values less than the given value."""
  pbsDrug_lt: String

  """All values less than or equal the given value."""
  pbsDrug_lte: String

  """All values greater than the given value."""
  pbsDrug_gt: String

  """All values greater than or equal the given value."""
  pbsDrug_gte: String

  """All values containing the given string."""
  pbsDrug_contains: String

  """All values not containing the given string."""
  pbsDrug_not_contains: String

  """All values starting with the given string."""
  pbsDrug_starts_with: String

  """All values not starting with the given string."""
  pbsDrug_not_starts_with: String

  """All values ending with the given string."""
  pbsDrug_ends_with: String

  """All values not ending with the given string."""
  pbsDrug_not_ends_with: String
  qty: Int

  """All values that are not equal to given value."""
  qty_not: Int

  """All values that are contained in given list."""
  qty_in: [Int!]

  """All values that are not contained in given list."""
  qty_not_in: [Int!]

  """All values less than the given value."""
  qty_lt: Int

  """All values less than or equal the given value."""
  qty_lte: Int

  """All values greater than the given value."""
  qty_gt: Int

  """All values greater than or equal the given value."""
  qty_gte: Int
  unit: UOM

  """All values that are not equal to given value."""
  unit_not: UOM

  """All values that are contained in given list."""
  unit_in: [UOM!]

  """All values that are not contained in given list."""
  unit_not_in: [UOM!]
  unitPrice: Float

  """All values that are not equal to given value."""
  unitPrice_not: Float

  """All values that are contained in given list."""
  unitPrice_in: [Float!]

  """All values that are not contained in given list."""
  unitPrice_not_in: [Float!]

  """All values less than the given value."""
  unitPrice_lt: Float

  """All values less than or equal the given value."""
  unitPrice_lte: Float

  """All values greater than the given value."""
  unitPrice_gt: Float

  """All values greater than or equal the given value."""
  unitPrice_gte: Float
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  item: InventoryWhereInput
  site: WareHouseWhereInput
  purchaseOrder: PurchaseOrderWhereInput
  poReceipt: PoReceiptWhereInput
}

input PurchaseOrderLineWhereUniqueInput {
  id: ID
}

enum PurchaseOrderOrderByInput {
  id_ASC
  id_DESC
  pbsOrganisation_ASC
  pbsOrganisation_DESC
  date_ASC
  date_DESC
  status_ASC
  status_DESC
  isPbsPO_ASC
  isPbsPO_DESC
  poNumber_ASC
  poNumber_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PurchaseOrderPreviousValues {
  id: ID!
  pbsOrganisation: String
  date: DateTime
  status: PoStatus
  isPbsPO: Boolean
  poNumber: Int!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PurchaseOrderSubscriptionPayload {
  mutation: MutationType!
  node: PurchaseOrder
  updatedFields: [String!]
  previousValues: PurchaseOrderPreviousValues
}

input PurchaseOrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PurchaseOrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PurchaseOrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PurchaseOrderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PurchaseOrderWhereInput
}

input PurchaseOrderUpdateDataInput {
  pbsOrganisation: String
  date: DateTime
  status: PoStatus
  isPbsPO: Boolean
  poNumber: Int
  isArchived: Boolean
  isDeleted: Boolean
  orderer: UserUpdateOneInput
  supplier: SupplierUpdateOneInput
  preview: AttachmentUpdateOneInput
  company: CompanyUpdateOneRequiredInput
}

input PurchaseOrderUpdateInput {
  pbsOrganisation: String
  date: DateTime
  status: PoStatus
  isPbsPO: Boolean
  poNumber: Int
  isArchived: Boolean
  isDeleted: Boolean
  orderer: UserUpdateOneInput
  supplier: SupplierUpdateOneInput
  preview: AttachmentUpdateOneInput
  company: CompanyUpdateOneRequiredInput
}

input PurchaseOrderUpdateManyMutationInput {
  pbsOrganisation: String
  date: DateTime
  status: PoStatus
  isPbsPO: Boolean
  poNumber: Int
  isArchived: Boolean
  isDeleted: Boolean
}

input PurchaseOrderUpdateOneInput {
  create: PurchaseOrderCreateInput
  connect: PurchaseOrderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PurchaseOrderUpdateDataInput
  upsert: PurchaseOrderUpsertNestedInput
}

input PurchaseOrderUpsertNestedInput {
  update: PurchaseOrderUpdateDataInput!
  create: PurchaseOrderCreateInput!
}

input PurchaseOrderWhereInput {
  """Logical AND on all given filters."""
  AND: [PurchaseOrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [PurchaseOrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PurchaseOrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  pbsOrganisation: String

  """All values that are not equal to given value."""
  pbsOrganisation_not: String

  """All values that are contained in given list."""
  pbsOrganisation_in: [String!]

  """All values that are not contained in given list."""
  pbsOrganisation_not_in: [String!]

  """All values less than the given value."""
  pbsOrganisation_lt: String

  """All values less than or equal the given value."""
  pbsOrganisation_lte: String

  """All values greater than the given value."""
  pbsOrganisation_gt: String

  """All values greater than or equal the given value."""
  pbsOrganisation_gte: String

  """All values containing the given string."""
  pbsOrganisation_contains: String

  """All values not containing the given string."""
  pbsOrganisation_not_contains: String

  """All values starting with the given string."""
  pbsOrganisation_starts_with: String

  """All values not starting with the given string."""
  pbsOrganisation_not_starts_with: String

  """All values ending with the given string."""
  pbsOrganisation_ends_with: String

  """All values not ending with the given string."""
  pbsOrganisation_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  status: PoStatus

  """All values that are not equal to given value."""
  status_not: PoStatus

  """All values that are contained in given list."""
  status_in: [PoStatus!]

  """All values that are not contained in given list."""
  status_not_in: [PoStatus!]
  isPbsPO: Boolean

  """All values that are not equal to given value."""
  isPbsPO_not: Boolean
  poNumber: Int

  """All values that are not equal to given value."""
  poNumber_not: Int

  """All values that are contained in given list."""
  poNumber_in: [Int!]

  """All values that are not contained in given list."""
  poNumber_not_in: [Int!]

  """All values less than the given value."""
  poNumber_lt: Int

  """All values less than or equal the given value."""
  poNumber_lte: Int

  """All values greater than the given value."""
  poNumber_gt: Int

  """All values greater than or equal the given value."""
  poNumber_gte: Int
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  orderer: UserWhereInput
  supplier: SupplierWhereInput
  preview: AttachmentWhereInput
  company: CompanyWhereInput
}

input PurchaseOrderWhereUniqueInput {
  id: ID
}

type Query {
  companyMembers(where: CompanyMemberWhereInput, orderBy: CompanyMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompanyMember]!
  integrations(where: IntegrationWhereInput, orderBy: IntegrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Integration]!
  projectServices(where: ProjectServiceWhereInput, orderBy: ProjectServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectService]!
  projectServiceRules(where: ProjectServiceRuleWhereInput, orderBy: ProjectServiceRuleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectServiceRule]!
  plans(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plan]!
  sessions(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Session]!
  invoiceItemEntries(where: InvoiceItemEntryWhereInput, orderBy: InvoiceItemEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InvoiceItemEntry]!
  invoices(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Invoice]!
  ledgerTransactions(where: LedgerTransactionWhereInput, orderBy: LedgerTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LedgerTransaction]!
  ledgerPostings(where: LedgerPostingWhereInput, orderBy: LedgerPostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LedgerPosting]!
  banks(where: BankWhereInput, orderBy: BankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bank]!
  bankTransactions(where: BankTransactionWhereInput, orderBy: BankTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BankTransaction]!
  assets(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Asset]!
  inventoryOnHands(where: InventoryOnHandWhereInput, orderBy: InventoryOnHandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InventoryOnHand]!
  purchaseOrderLines(where: PurchaseOrderLineWhereInput, orderBy: PurchaseOrderLineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PurchaseOrderLine]!
  apInvoices(where: ApInvoiceWhereInput, orderBy: ApInvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ApInvoice]!
  salesOrderLines(where: SalesOrderLineWhereInput, orderBy: SalesOrderLineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SalesOrderLine]!
  predictedSalesValueByCompanies(where: PredictedSalesValueByCompanyWhereInput, orderBy: PredictedSalesValueByCompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PredictedSalesValueByCompany]!
  predictedSalesQuantityOfItemsByCompanies(where: PredictedSalesQuantityOfItemsByCompanyWhereInput, orderBy: PredictedSalesQuantityOfItemsByCompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PredictedSalesQuantityOfItemsByCompany]!
  medicareServices(where: MedicareServiceWhereInput, orderBy: MedicareServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MedicareService]!
  patients(where: PatientWhereInput, orderBy: PatientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Patient]!
  healthcareProviders(where: HealthcareProviderWhereInput, orderBy: HealthcareProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HealthcareProvider]!
  immunisationSchedules(where: ImmunisationScheduleWhereInput, orderBy: ImmunisationScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ImmunisationSchedule]!
  hILogs(where: HILogWhereInput, orderBy: HILogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HILog]!
  pbsTPPs(where: PbsTPPWhereInput, orderBy: PbsTPPOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PbsTPP]!
  meansTestLimitses(where: MeansTestLimitsWhereInput, orderBy: MeansTestLimitsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MeansTestLimits]!
  salesOrders(where: SalesOrderWhereInput, orderBy: SalesOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SalesOrder]!
  poReceipts(where: PoReceiptWhereInput, orderBy: PoReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PoReceipt]!
  pbsOrganisations(where: PbsOrganisationWhereInput, orderBy: PbsOrganisationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PbsOrganisation]!
  contacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact]!
  timeSheetEntries(where: TimeSheetEntryWhereInput, orderBy: TimeSheetEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeSheetEntry]!
  meansTestedFees(where: MeansTestedFeeWhereInput, orderBy: MeansTestedFeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MeansTestedFee]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  timeSheets(where: TimeSheetWhereInput, orderBy: TimeSheetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeSheet]!
  suppliers(where: SupplierWhereInput, orderBy: SupplierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Supplier]!
  vaccineBrands(where: VaccineBrandWhereInput, orderBy: VaccineBrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VaccineBrand]!
  mainAccounts(where: MainAccountWhereInput, orderBy: MainAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MainAccount]!
  diseases(where: DiseaseWhereInput, orderBy: DiseaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Disease]!
  wareHouses(where: WareHouseWhereInput, orderBy: WareHouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WareHouse]!
  ledgerJournals(where: LedgerJournalWhereInput, orderBy: LedgerJournalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LedgerJournal]!
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service]!
  inventories(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inventory]!
  attachments(where: AttachmentWhereInput, orderBy: AttachmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attachment]!
  customers(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Customer]!
  purchaseOrders(where: PurchaseOrderWhereInput, orderBy: PurchaseOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PurchaseOrder]!
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  assetGroups(where: AssetGroupWhereInput, orderBy: AssetGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AssetGroup]!
  names(where: NameWhereInput, orderBy: NameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Name]!
  basicDailyFees(where: BasicDailyFeeWhereInput, orderBy: BasicDailyFeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BasicDailyFee]!
  companyMember(where: CompanyMemberWhereUniqueInput!): CompanyMember
  integration(where: IntegrationWhereUniqueInput!): Integration
  projectService(where: ProjectServiceWhereUniqueInput!): ProjectService
  projectServiceRule(where: ProjectServiceRuleWhereUniqueInput!): ProjectServiceRule
  plan(where: PlanWhereUniqueInput!): Plan
  session(where: SessionWhereUniqueInput!): Session
  invoiceItemEntry(where: InvoiceItemEntryWhereUniqueInput!): InvoiceItemEntry
  invoice(where: InvoiceWhereUniqueInput!): Invoice
  ledgerTransaction(where: LedgerTransactionWhereUniqueInput!): LedgerTransaction
  ledgerPosting(where: LedgerPostingWhereUniqueInput!): LedgerPosting
  bank(where: BankWhereUniqueInput!): Bank
  bankTransaction(where: BankTransactionWhereUniqueInput!): BankTransaction
  asset(where: AssetWhereUniqueInput!): Asset
  inventoryOnHand(where: InventoryOnHandWhereUniqueInput!): InventoryOnHand
  purchaseOrderLine(where: PurchaseOrderLineWhereUniqueInput!): PurchaseOrderLine
  apInvoice(where: ApInvoiceWhereUniqueInput!): ApInvoice
  salesOrderLine(where: SalesOrderLineWhereUniqueInput!): SalesOrderLine
  predictedSalesValueByCompany(where: PredictedSalesValueByCompanyWhereUniqueInput!): PredictedSalesValueByCompany
  predictedSalesQuantityOfItemsByCompany(where: PredictedSalesQuantityOfItemsByCompanyWhereUniqueInput!): PredictedSalesQuantityOfItemsByCompany
  medicareService(where: MedicareServiceWhereUniqueInput!): MedicareService
  patient(where: PatientWhereUniqueInput!): Patient
  healthcareProvider(where: HealthcareProviderWhereUniqueInput!): HealthcareProvider
  immunisationSchedule(where: ImmunisationScheduleWhereUniqueInput!): ImmunisationSchedule
  hILog(where: HILogWhereUniqueInput!): HILog
  pbsTPP(where: PbsTPPWhereUniqueInput!): PbsTPP
  meansTestLimits(where: MeansTestLimitsWhereUniqueInput!): MeansTestLimits
  salesOrder(where: SalesOrderWhereUniqueInput!): SalesOrder
  poReceipt(where: PoReceiptWhereUniqueInput!): PoReceipt
  pbsOrganisation(where: PbsOrganisationWhereUniqueInput!): PbsOrganisation
  contact(where: ContactWhereUniqueInput!): Contact
  timeSheetEntry(where: TimeSheetEntryWhereUniqueInput!): TimeSheetEntry
  meansTestedFee(where: MeansTestedFeeWhereUniqueInput!): MeansTestedFee
  project(where: ProjectWhereUniqueInput!): Project
  timeSheet(where: TimeSheetWhereUniqueInput!): TimeSheet
  supplier(where: SupplierWhereUniqueInput!): Supplier
  vaccineBrand(where: VaccineBrandWhereUniqueInput!): VaccineBrand
  mainAccount(where: MainAccountWhereUniqueInput!): MainAccount
  disease(where: DiseaseWhereUniqueInput!): Disease
  wareHouse(where: WareHouseWhereUniqueInput!): WareHouse
  ledgerJournal(where: LedgerJournalWhereUniqueInput!): LedgerJournal
  service(where: ServiceWhereUniqueInput!): Service
  inventory(where: InventoryWhereUniqueInput!): Inventory
  attachment(where: AttachmentWhereUniqueInput!): Attachment
  customer(where: CustomerWhereUniqueInput!): Customer
  purchaseOrder(where: PurchaseOrderWhereUniqueInput!): PurchaseOrder
  address(where: AddressWhereUniqueInput!): Address
  company(where: CompanyWhereUniqueInput!): Company
  user(where: UserWhereUniqueInput!): User
  assetGroup(where: AssetGroupWhereUniqueInput!): AssetGroup
  name(where: NameWhereUniqueInput!): Name
  basicDailyFee(where: BasicDailyFeeWhereUniqueInput!): BasicDailyFee
  companyMembersConnection(where: CompanyMemberWhereInput, orderBy: CompanyMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyMemberConnection!
  integrationsConnection(where: IntegrationWhereInput, orderBy: IntegrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IntegrationConnection!
  projectServicesConnection(where: ProjectServiceWhereInput, orderBy: ProjectServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectServiceConnection!
  projectServiceRulesConnection(where: ProjectServiceRuleWhereInput, orderBy: ProjectServiceRuleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectServiceRuleConnection!
  plansConnection(where: PlanWhereInput, orderBy: PlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlanConnection!
  sessionsConnection(where: SessionWhereInput, orderBy: SessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SessionConnection!
  invoiceItemEntriesConnection(where: InvoiceItemEntryWhereInput, orderBy: InvoiceItemEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InvoiceItemEntryConnection!
  invoicesConnection(where: InvoiceWhereInput, orderBy: InvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InvoiceConnection!
  ledgerTransactionsConnection(where: LedgerTransactionWhereInput, orderBy: LedgerTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LedgerTransactionConnection!
  ledgerPostingsConnection(where: LedgerPostingWhereInput, orderBy: LedgerPostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LedgerPostingConnection!
  banksConnection(where: BankWhereInput, orderBy: BankOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BankConnection!
  bankTransactionsConnection(where: BankTransactionWhereInput, orderBy: BankTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BankTransactionConnection!
  assetsConnection(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AssetConnection!
  inventoryOnHandsConnection(where: InventoryOnHandWhereInput, orderBy: InventoryOnHandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryOnHandConnection!
  purchaseOrderLinesConnection(where: PurchaseOrderLineWhereInput, orderBy: PurchaseOrderLineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PurchaseOrderLineConnection!
  apInvoicesConnection(where: ApInvoiceWhereInput, orderBy: ApInvoiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApInvoiceConnection!
  salesOrderLinesConnection(where: SalesOrderLineWhereInput, orderBy: SalesOrderLineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SalesOrderLineConnection!
  predictedSalesValueByCompaniesConnection(where: PredictedSalesValueByCompanyWhereInput, orderBy: PredictedSalesValueByCompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PredictedSalesValueByCompanyConnection!
  predictedSalesQuantityOfItemsByCompaniesConnection(where: PredictedSalesQuantityOfItemsByCompanyWhereInput, orderBy: PredictedSalesQuantityOfItemsByCompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PredictedSalesQuantityOfItemsByCompanyConnection!
  medicareServicesConnection(where: MedicareServiceWhereInput, orderBy: MedicareServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MedicareServiceConnection!
  patientsConnection(where: PatientWhereInput, orderBy: PatientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatientConnection!
  healthcareProvidersConnection(where: HealthcareProviderWhereInput, orderBy: HealthcareProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HealthcareProviderConnection!
  immunisationSchedulesConnection(where: ImmunisationScheduleWhereInput, orderBy: ImmunisationScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImmunisationScheduleConnection!
  hILogsConnection(where: HILogWhereInput, orderBy: HILogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HILogConnection!
  pbsTPPsConnection(where: PbsTPPWhereInput, orderBy: PbsTPPOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PbsTPPConnection!
  meansTestLimitsesConnection(where: MeansTestLimitsWhereInput, orderBy: MeansTestLimitsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MeansTestLimitsConnection!
  salesOrdersConnection(where: SalesOrderWhereInput, orderBy: SalesOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SalesOrderConnection!
  poReceiptsConnection(where: PoReceiptWhereInput, orderBy: PoReceiptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PoReceiptConnection!
  pbsOrganisationsConnection(where: PbsOrganisationWhereInput, orderBy: PbsOrganisationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PbsOrganisationConnection!
  contactsConnection(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactConnection!
  timeSheetEntriesConnection(where: TimeSheetEntryWhereInput, orderBy: TimeSheetEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeSheetEntryConnection!
  meansTestedFeesConnection(where: MeansTestedFeeWhereInput, orderBy: MeansTestedFeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MeansTestedFeeConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  timeSheetsConnection(where: TimeSheetWhereInput, orderBy: TimeSheetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeSheetConnection!
  suppliersConnection(where: SupplierWhereInput, orderBy: SupplierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupplierConnection!
  vaccineBrandsConnection(where: VaccineBrandWhereInput, orderBy: VaccineBrandOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VaccineBrandConnection!
  mainAccountsConnection(where: MainAccountWhereInput, orderBy: MainAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MainAccountConnection!
  diseasesConnection(where: DiseaseWhereInput, orderBy: DiseaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiseaseConnection!
  wareHousesConnection(where: WareHouseWhereInput, orderBy: WareHouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WareHouseConnection!
  ledgerJournalsConnection(where: LedgerJournalWhereInput, orderBy: LedgerJournalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LedgerJournalConnection!
  servicesConnection(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceConnection!
  inventoriesConnection(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryConnection!
  attachmentsConnection(where: AttachmentWhereInput, orderBy: AttachmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttachmentConnection!
  customersConnection(where: CustomerWhereInput, orderBy: CustomerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomerConnection!
  purchaseOrdersConnection(where: PurchaseOrderWhereInput, orderBy: PurchaseOrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PurchaseOrderConnection!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  assetGroupsConnection(where: AssetGroupWhereInput, orderBy: AssetGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AssetGroupConnection!
  namesConnection(where: NameWhereInput, orderBy: NameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NameConnection!
  basicDailyFeesConnection(where: BasicDailyFeeWhereInput, orderBy: BasicDailyFeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BasicDailyFeeConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type SalesOrder implements Node {
  id: ID!
  customer: Customer
  transactionDate: DateTime
  currency: Currency
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SalesOrderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SalesOrderEdge]!
  aggregate: AggregateSalesOrder!
}

input SalesOrderCreateInput {
  id: ID
  transactionDate: DateTime
  currency: Currency
  isArchived: Boolean
  isDeleted: Boolean
  customer: CustomerCreateOneInput
  company: CompanyCreateOneInput!
}

input SalesOrderCreateOneInput {
  create: SalesOrderCreateInput
  connect: SalesOrderWhereUniqueInput
}

"""An edge in a connection."""
type SalesOrderEdge {
  """The item at the end of the edge."""
  node: SalesOrder!

  """A cursor for use in pagination."""
  cursor: String!
}

type SalesOrderLine implements Node {
  id: ID!
  salesOrder: SalesOrder
  inventory: Inventory
  qty: Int
  price: Float
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SalesOrderLineConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SalesOrderLineEdge]!
  aggregate: AggregateSalesOrderLine!
}

input SalesOrderLineCreateInput {
  id: ID
  qty: Int
  price: Float
  isArchived: Boolean
  isDeleted: Boolean
  salesOrder: SalesOrderCreateOneInput
  inventory: InventoryCreateOneInput
}

"""An edge in a connection."""
type SalesOrderLineEdge {
  """The item at the end of the edge."""
  node: SalesOrderLine!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SalesOrderLineOrderByInput {
  id_ASC
  id_DESC
  qty_ASC
  qty_DESC
  price_ASC
  price_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SalesOrderLinePreviousValues {
  id: ID!
  qty: Int
  price: Float
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SalesOrderLineSubscriptionPayload {
  mutation: MutationType!
  node: SalesOrderLine
  updatedFields: [String!]
  previousValues: SalesOrderLinePreviousValues
}

input SalesOrderLineSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SalesOrderLineSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalesOrderLineSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalesOrderLineSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SalesOrderLineWhereInput
}

input SalesOrderLineUpdateInput {
  qty: Int
  price: Float
  isArchived: Boolean
  isDeleted: Boolean
  salesOrder: SalesOrderUpdateOneInput
  inventory: InventoryUpdateOneInput
}

input SalesOrderLineUpdateManyMutationInput {
  qty: Int
  price: Float
  isArchived: Boolean
  isDeleted: Boolean
}

input SalesOrderLineWhereInput {
  """Logical AND on all given filters."""
  AND: [SalesOrderLineWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalesOrderLineWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalesOrderLineWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  qty: Int

  """All values that are not equal to given value."""
  qty_not: Int

  """All values that are contained in given list."""
  qty_in: [Int!]

  """All values that are not contained in given list."""
  qty_not_in: [Int!]

  """All values less than the given value."""
  qty_lt: Int

  """All values less than or equal the given value."""
  qty_lte: Int

  """All values greater than the given value."""
  qty_gt: Int

  """All values greater than or equal the given value."""
  qty_gte: Int
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  salesOrder: SalesOrderWhereInput
  inventory: InventoryWhereInput
}

input SalesOrderLineWhereUniqueInput {
  id: ID
}

enum SalesOrderOrderByInput {
  id_ASC
  id_DESC
  transactionDate_ASC
  transactionDate_DESC
  currency_ASC
  currency_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SalesOrderPreviousValues {
  id: ID!
  transactionDate: DateTime
  currency: Currency
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SalesOrderSubscriptionPayload {
  mutation: MutationType!
  node: SalesOrder
  updatedFields: [String!]
  previousValues: SalesOrderPreviousValues
}

input SalesOrderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SalesOrderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalesOrderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalesOrderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SalesOrderWhereInput
}

input SalesOrderUpdateDataInput {
  transactionDate: DateTime
  currency: Currency
  isArchived: Boolean
  isDeleted: Boolean
  customer: CustomerUpdateOneInput
  company: CompanyUpdateOneRequiredInput
}

input SalesOrderUpdateInput {
  transactionDate: DateTime
  currency: Currency
  isArchived: Boolean
  isDeleted: Boolean
  customer: CustomerUpdateOneInput
  company: CompanyUpdateOneRequiredInput
}

input SalesOrderUpdateManyMutationInput {
  transactionDate: DateTime
  currency: Currency
  isArchived: Boolean
  isDeleted: Boolean
}

input SalesOrderUpdateOneInput {
  create: SalesOrderCreateInput
  connect: SalesOrderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SalesOrderUpdateDataInput
  upsert: SalesOrderUpsertNestedInput
}

input SalesOrderUpsertNestedInput {
  update: SalesOrderUpdateDataInput!
  create: SalesOrderCreateInput!
}

input SalesOrderWhereInput {
  """Logical AND on all given filters."""
  AND: [SalesOrderWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalesOrderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalesOrderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  transactionDate: DateTime

  """All values that are not equal to given value."""
  transactionDate_not: DateTime

  """All values that are contained in given list."""
  transactionDate_in: [DateTime!]

  """All values that are not contained in given list."""
  transactionDate_not_in: [DateTime!]

  """All values less than the given value."""
  transactionDate_lt: DateTime

  """All values less than or equal the given value."""
  transactionDate_lte: DateTime

  """All values greater than the given value."""
  transactionDate_gt: DateTime

  """All values greater than or equal the given value."""
  transactionDate_gte: DateTime
  currency: Currency

  """All values that are not equal to given value."""
  currency_not: Currency

  """All values that are contained in given list."""
  currency_in: [Currency!]

  """All values that are not contained in given list."""
  currency_not_in: [Currency!]
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  customer: CustomerWhereInput
  company: CompanyWhereInput
}

input SalesOrderWhereUniqueInput {
  id: ID
}

enum SalusResponse {
  SUCCESS
  FAIL
}

type Service implements Node {
  id: ID!
  billingType: ServiceBillingType!
  company: Company!
  includeConsTax: Boolean!
  isArchived: Boolean
  isDeleted: Boolean
  isTemplate: Boolean
  name: String!
  timeBasedType: TimeBasedType
  totalAmount: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ServiceBillingType {
  FIXED
  TIME_BASED
}

"""A connection to a list of items."""
type ServiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ServiceEdge]!
  aggregate: AggregateService!
}

input ServiceCreateInput {
  id: ID
  billingType: ServiceBillingType!
  includeConsTax: Boolean!
  isArchived: Boolean
  isDeleted: Boolean
  isTemplate: Boolean
  name: String!
  timeBasedType: TimeBasedType
  totalAmount: Float!
  company: CompanyCreateOneInput!
}

input ServiceCreateOneInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

"""An edge in a connection."""
type ServiceEdge {
  """The item at the end of the edge."""
  node: Service!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ServiceOrderByInput {
  id_ASC
  id_DESC
  billingType_ASC
  billingType_DESC
  includeConsTax_ASC
  includeConsTax_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  isTemplate_ASC
  isTemplate_DESC
  name_ASC
  name_DESC
  timeBasedType_ASC
  timeBasedType_DESC
  totalAmount_ASC
  totalAmount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ServicePreviousValues {
  id: ID!
  billingType: ServiceBillingType!
  includeConsTax: Boolean!
  isArchived: Boolean
  isDeleted: Boolean
  isTemplate: Boolean
  name: String!
  timeBasedType: TimeBasedType
  totalAmount: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ServiceSubscriptionPayload {
  mutation: MutationType!
  node: Service
  updatedFields: [String!]
  previousValues: ServicePreviousValues
}

input ServiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ServiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ServiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ServiceSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ServiceWhereInput
}

input ServiceUpdateDataInput {
  billingType: ServiceBillingType
  includeConsTax: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  isTemplate: Boolean
  name: String
  timeBasedType: TimeBasedType
  totalAmount: Float
  company: CompanyUpdateOneRequiredInput
}

input ServiceUpdateInput {
  billingType: ServiceBillingType
  includeConsTax: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  isTemplate: Boolean
  name: String
  timeBasedType: TimeBasedType
  totalAmount: Float
  company: CompanyUpdateOneRequiredInput
}

input ServiceUpdateManyMutationInput {
  billingType: ServiceBillingType
  includeConsTax: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  isTemplate: Boolean
  name: String
  timeBasedType: TimeBasedType
  totalAmount: Float
}

input ServiceUpdateOneInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ServiceUpdateDataInput
  upsert: ServiceUpsertNestedInput
}

input ServiceUpsertNestedInput {
  update: ServiceUpdateDataInput!
  create: ServiceCreateInput!
}

input ServiceWhereInput {
  """Logical AND on all given filters."""
  AND: [ServiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ServiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ServiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  billingType: ServiceBillingType

  """All values that are not equal to given value."""
  billingType_not: ServiceBillingType

  """All values that are contained in given list."""
  billingType_in: [ServiceBillingType!]

  """All values that are not contained in given list."""
  billingType_not_in: [ServiceBillingType!]
  includeConsTax: Boolean

  """All values that are not equal to given value."""
  includeConsTax_not: Boolean
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  isTemplate: Boolean

  """All values that are not equal to given value."""
  isTemplate_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  timeBasedType: TimeBasedType

  """All values that are not equal to given value."""
  timeBasedType_not: TimeBasedType

  """All values that are contained in given list."""
  timeBasedType_in: [TimeBasedType!]

  """All values that are not contained in given list."""
  timeBasedType_not_in: [TimeBasedType!]
  totalAmount: Float

  """All values that are not equal to given value."""
  totalAmount_not: Float

  """All values that are contained in given list."""
  totalAmount_in: [Float!]

  """All values that are not contained in given list."""
  totalAmount_not_in: [Float!]

  """All values less than the given value."""
  totalAmount_lt: Float

  """All values less than or equal the given value."""
  totalAmount_lte: Float

  """All values greater than the given value."""
  totalAmount_gt: Float

  """All values greater than or equal the given value."""
  totalAmount_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
}

input ServiceWhereUniqueInput {
  id: ID
}

type Session implements Node {
  id: ID!
  expires_at: DateTime
  is_active: Boolean
  is_archived: Boolean
  is_deleted: Boolean
  signed_at: DateTime
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionEdge]!
  aggregate: AggregateSession!
}

input SessionCreateInput {
  id: ID
  expires_at: DateTime
  is_active: Boolean
  is_archived: Boolean
  is_deleted: Boolean
  signed_at: DateTime
  user: UserCreateOneInput
}

"""An edge in a connection."""
type SessionEdge {
  """The item at the end of the edge."""
  node: Session!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SessionOrderByInput {
  id_ASC
  id_DESC
  expires_at_ASC
  expires_at_DESC
  is_active_ASC
  is_active_DESC
  is_archived_ASC
  is_archived_DESC
  is_deleted_ASC
  is_deleted_DESC
  signed_at_ASC
  signed_at_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SessionPreviousValues {
  id: ID!
  expires_at: DateTime
  is_active: Boolean
  is_archived: Boolean
  is_deleted: Boolean
  signed_at: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
  updatedFields: [String!]
  previousValues: SessionPreviousValues
}

input SessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SessionWhereInput
}

input SessionUpdateInput {
  expires_at: DateTime
  is_active: Boolean
  is_archived: Boolean
  is_deleted: Boolean
  signed_at: DateTime
  user: UserUpdateOneInput
}

input SessionUpdateManyMutationInput {
  expires_at: DateTime
  is_active: Boolean
  is_archived: Boolean
  is_deleted: Boolean
  signed_at: DateTime
}

input SessionWhereInput {
  """Logical AND on all given filters."""
  AND: [SessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  expires_at: DateTime

  """All values that are not equal to given value."""
  expires_at_not: DateTime

  """All values that are contained in given list."""
  expires_at_in: [DateTime!]

  """All values that are not contained in given list."""
  expires_at_not_in: [DateTime!]

  """All values less than the given value."""
  expires_at_lt: DateTime

  """All values less than or equal the given value."""
  expires_at_lte: DateTime

  """All values greater than the given value."""
  expires_at_gt: DateTime

  """All values greater than or equal the given value."""
  expires_at_gte: DateTime
  is_active: Boolean

  """All values that are not equal to given value."""
  is_active_not: Boolean
  is_archived: Boolean

  """All values that are not equal to given value."""
  is_archived_not: Boolean
  is_deleted: Boolean

  """All values that are not equal to given value."""
  is_deleted_not: Boolean
  signed_at: DateTime

  """All values that are not equal to given value."""
  signed_at_not: DateTime

  """All values that are contained in given list."""
  signed_at_in: [DateTime!]

  """All values that are not contained in given list."""
  signed_at_not_in: [DateTime!]

  """All values less than the given value."""
  signed_at_lt: DateTime

  """All values less than or equal the given value."""
  signed_at_lte: DateTime

  """All values greater than the given value."""
  signed_at_gt: DateTime

  """All values greater than or equal the given value."""
  signed_at_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input SessionWhereUniqueInput {
  id: ID
}

type Subscription {
  companyMember(where: CompanyMemberSubscriptionWhereInput): CompanyMemberSubscriptionPayload
  integration(where: IntegrationSubscriptionWhereInput): IntegrationSubscriptionPayload
  projectService(where: ProjectServiceSubscriptionWhereInput): ProjectServiceSubscriptionPayload
  projectServiceRule(where: ProjectServiceRuleSubscriptionWhereInput): ProjectServiceRuleSubscriptionPayload
  plan(where: PlanSubscriptionWhereInput): PlanSubscriptionPayload
  session(where: SessionSubscriptionWhereInput): SessionSubscriptionPayload
  invoiceItemEntry(where: InvoiceItemEntrySubscriptionWhereInput): InvoiceItemEntrySubscriptionPayload
  invoice(where: InvoiceSubscriptionWhereInput): InvoiceSubscriptionPayload
  ledgerTransaction(where: LedgerTransactionSubscriptionWhereInput): LedgerTransactionSubscriptionPayload
  ledgerPosting(where: LedgerPostingSubscriptionWhereInput): LedgerPostingSubscriptionPayload
  bank(where: BankSubscriptionWhereInput): BankSubscriptionPayload
  bankTransaction(where: BankTransactionSubscriptionWhereInput): BankTransactionSubscriptionPayload
  asset(where: AssetSubscriptionWhereInput): AssetSubscriptionPayload
  inventoryOnHand(where: InventoryOnHandSubscriptionWhereInput): InventoryOnHandSubscriptionPayload
  purchaseOrderLine(where: PurchaseOrderLineSubscriptionWhereInput): PurchaseOrderLineSubscriptionPayload
  apInvoice(where: ApInvoiceSubscriptionWhereInput): ApInvoiceSubscriptionPayload
  salesOrderLine(where: SalesOrderLineSubscriptionWhereInput): SalesOrderLineSubscriptionPayload
  predictedSalesValueByCompany(where: PredictedSalesValueByCompanySubscriptionWhereInput): PredictedSalesValueByCompanySubscriptionPayload
  predictedSalesQuantityOfItemsByCompany(where: PredictedSalesQuantityOfItemsByCompanySubscriptionWhereInput): PredictedSalesQuantityOfItemsByCompanySubscriptionPayload
  medicareService(where: MedicareServiceSubscriptionWhereInput): MedicareServiceSubscriptionPayload
  patient(where: PatientSubscriptionWhereInput): PatientSubscriptionPayload
  healthcareProvider(where: HealthcareProviderSubscriptionWhereInput): HealthcareProviderSubscriptionPayload
  immunisationSchedule(where: ImmunisationScheduleSubscriptionWhereInput): ImmunisationScheduleSubscriptionPayload
  hILog(where: HILogSubscriptionWhereInput): HILogSubscriptionPayload
  pbsTPP(where: PbsTPPSubscriptionWhereInput): PbsTPPSubscriptionPayload
  meansTestLimits(where: MeansTestLimitsSubscriptionWhereInput): MeansTestLimitsSubscriptionPayload
  salesOrder(where: SalesOrderSubscriptionWhereInput): SalesOrderSubscriptionPayload
  poReceipt(where: PoReceiptSubscriptionWhereInput): PoReceiptSubscriptionPayload
  pbsOrganisation(where: PbsOrganisationSubscriptionWhereInput): PbsOrganisationSubscriptionPayload
  contact(where: ContactSubscriptionWhereInput): ContactSubscriptionPayload
  timeSheetEntry(where: TimeSheetEntrySubscriptionWhereInput): TimeSheetEntrySubscriptionPayload
  meansTestedFee(where: MeansTestedFeeSubscriptionWhereInput): MeansTestedFeeSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  timeSheet(where: TimeSheetSubscriptionWhereInput): TimeSheetSubscriptionPayload
  supplier(where: SupplierSubscriptionWhereInput): SupplierSubscriptionPayload
  vaccineBrand(where: VaccineBrandSubscriptionWhereInput): VaccineBrandSubscriptionPayload
  mainAccount(where: MainAccountSubscriptionWhereInput): MainAccountSubscriptionPayload
  disease(where: DiseaseSubscriptionWhereInput): DiseaseSubscriptionPayload
  wareHouse(where: WareHouseSubscriptionWhereInput): WareHouseSubscriptionPayload
  ledgerJournal(where: LedgerJournalSubscriptionWhereInput): LedgerJournalSubscriptionPayload
  service(where: ServiceSubscriptionWhereInput): ServiceSubscriptionPayload
  inventory(where: InventorySubscriptionWhereInput): InventorySubscriptionPayload
  attachment(where: AttachmentSubscriptionWhereInput): AttachmentSubscriptionPayload
  customer(where: CustomerSubscriptionWhereInput): CustomerSubscriptionPayload
  purchaseOrder(where: PurchaseOrderSubscriptionWhereInput): PurchaseOrderSubscriptionPayload
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  assetGroup(where: AssetGroupSubscriptionWhereInput): AssetGroupSubscriptionPayload
  name(where: NameSubscriptionWhereInput): NameSubscriptionPayload
  basicDailyFee(where: BasicDailyFeeSubscriptionWhereInput): BasicDailyFeeSubscriptionPayload
}

type Supplier implements Node {
  id: ID!
  name: String
  address(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address!]
  termsOfPayment: SupplierTermsOfPayment
  bankAccount: Json
  emailAddressForRemittance: String
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SupplierConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupplierEdge]!
  aggregate: AggregateSupplier!
}

input SupplierCreateInput {
  id: ID
  name: String
  termsOfPayment: SupplierTermsOfPayment
  bankAccount: Json
  emailAddressForRemittance: String
  isArchived: Boolean
  isDeleted: Boolean
  address: AddressCreateManyInput
  company: CompanyCreateOneInput!
}

input SupplierCreateOneInput {
  create: SupplierCreateInput
  connect: SupplierWhereUniqueInput
}

"""An edge in a connection."""
type SupplierEdge {
  """The item at the end of the edge."""
  node: Supplier!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupplierOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  termsOfPayment_ASC
  termsOfPayment_DESC
  bankAccount_ASC
  bankAccount_DESC
  emailAddressForRemittance_ASC
  emailAddressForRemittance_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SupplierPreviousValues {
  id: ID!
  name: String
  termsOfPayment: SupplierTermsOfPayment
  bankAccount: Json
  emailAddressForRemittance: String
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SupplierSubscriptionPayload {
  mutation: MutationType!
  node: Supplier
  updatedFields: [String!]
  previousValues: SupplierPreviousValues
}

input SupplierSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupplierSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupplierSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupplierSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupplierWhereInput
}

enum SupplierTermsOfPayment {
  COD
  DAYS_14
  DAYS_30
  DAYS_60
}

input SupplierUpdateDataInput {
  name: String
  termsOfPayment: SupplierTermsOfPayment
  bankAccount: Json
  emailAddressForRemittance: String
  isArchived: Boolean
  isDeleted: Boolean
  address: AddressUpdateManyInput
  company: CompanyUpdateOneRequiredInput
}

input SupplierUpdateInput {
  name: String
  termsOfPayment: SupplierTermsOfPayment
  bankAccount: Json
  emailAddressForRemittance: String
  isArchived: Boolean
  isDeleted: Boolean
  address: AddressUpdateManyInput
  company: CompanyUpdateOneRequiredInput
}

input SupplierUpdateManyMutationInput {
  name: String
  termsOfPayment: SupplierTermsOfPayment
  bankAccount: Json
  emailAddressForRemittance: String
  isArchived: Boolean
  isDeleted: Boolean
}

input SupplierUpdateOneInput {
  create: SupplierCreateInput
  connect: SupplierWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SupplierUpdateDataInput
  upsert: SupplierUpsertNestedInput
}

input SupplierUpsertNestedInput {
  update: SupplierUpdateDataInput!
  create: SupplierCreateInput!
}

input SupplierWhereInput {
  """Logical AND on all given filters."""
  AND: [SupplierWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupplierWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupplierWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  termsOfPayment: SupplierTermsOfPayment

  """All values that are not equal to given value."""
  termsOfPayment_not: SupplierTermsOfPayment

  """All values that are contained in given list."""
  termsOfPayment_in: [SupplierTermsOfPayment!]

  """All values that are not contained in given list."""
  termsOfPayment_not_in: [SupplierTermsOfPayment!]
  emailAddressForRemittance: String

  """All values that are not equal to given value."""
  emailAddressForRemittance_not: String

  """All values that are contained in given list."""
  emailAddressForRemittance_in: [String!]

  """All values that are not contained in given list."""
  emailAddressForRemittance_not_in: [String!]

  """All values less than the given value."""
  emailAddressForRemittance_lt: String

  """All values less than or equal the given value."""
  emailAddressForRemittance_lte: String

  """All values greater than the given value."""
  emailAddressForRemittance_gt: String

  """All values greater than or equal the given value."""
  emailAddressForRemittance_gte: String

  """All values containing the given string."""
  emailAddressForRemittance_contains: String

  """All values not containing the given string."""
  emailAddressForRemittance_not_contains: String

  """All values starting with the given string."""
  emailAddressForRemittance_starts_with: String

  """All values not starting with the given string."""
  emailAddressForRemittance_not_starts_with: String

  """All values ending with the given string."""
  emailAddressForRemittance_ends_with: String

  """All values not ending with the given string."""
  emailAddressForRemittance_not_ends_with: String
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  address_every: AddressWhereInput
  address_some: AddressWhereInput
  address_none: AddressWhereInput
  company: CompanyWhereInput
}

input SupplierWhereUniqueInput {
  id: ID
}

enum TimeBasedType {
  QUARTERHOUR
  HALFHOUR
  HOUR
}

type TimeSheet implements Node {
  id: ID!
  attachments(where: AttachmentWhereInput, orderBy: AttachmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attachment!]
  company: Company!
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  number: Int
  preview: Attachment
  startsAt: DateTime
  status: TimeSheetStatus
  timeSheetEntries(where: TimeSheetEntryWhereInput, orderBy: TimeSheetEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeSheetEntry!]
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TimeSheetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeSheetEdge]!
  aggregate: AggregateTimeSheet!
}

input TimeSheetCreateInput {
  id: ID
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  number: Int
  startsAt: DateTime
  status: TimeSheetStatus
  attachments: AttachmentCreateManyInput
  company: CompanyCreateOneInput!
  preview: AttachmentCreateOneInput
  timeSheetEntries: TimeSheetEntryCreateManyWithoutTimeSheetInput
  user: UserCreateOneInput
}

input TimeSheetCreateOneInput {
  create: TimeSheetCreateInput
  connect: TimeSheetWhereUniqueInput
}

input TimeSheetCreateOneWithoutTimeSheetEntriesInput {
  create: TimeSheetCreateWithoutTimeSheetEntriesInput
  connect: TimeSheetWhereUniqueInput
}

input TimeSheetCreateWithoutTimeSheetEntriesInput {
  id: ID
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  number: Int
  startsAt: DateTime
  status: TimeSheetStatus
  attachments: AttachmentCreateManyInput
  company: CompanyCreateOneInput!
  preview: AttachmentCreateOneInput
  user: UserCreateOneInput
}

"""An edge in a connection."""
type TimeSheetEdge {
  """The item at the end of the edge."""
  node: TimeSheet!

  """A cursor for use in pagination."""
  cursor: String!
}

type TimeSheetEntry implements Node {
  id: ID!
  customer: Customer
  date: DateTime
  duration: Float
  isArchived: Boolean
  isDeleted: Boolean
  isInvoiced: Boolean
  project: Project
  service: Service
  timeSheet: TimeSheet
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TimeSheetEntryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeSheetEntryEdge]!
  aggregate: AggregateTimeSheetEntry!
}

input TimeSheetEntryCreateInput {
  id: ID
  date: DateTime
  duration: Float
  isArchived: Boolean
  isDeleted: Boolean
  isInvoiced: Boolean
  customer: CustomerCreateOneInput
  project: ProjectCreateOneInput
  service: ServiceCreateOneInput
  timeSheet: TimeSheetCreateOneWithoutTimeSheetEntriesInput
}

input TimeSheetEntryCreateManyWithoutTimeSheetInput {
  create: [TimeSheetEntryCreateWithoutTimeSheetInput!]
  connect: [TimeSheetEntryWhereUniqueInput!]
}

input TimeSheetEntryCreateOneInput {
  create: TimeSheetEntryCreateInput
  connect: TimeSheetEntryWhereUniqueInput
}

input TimeSheetEntryCreateWithoutTimeSheetInput {
  id: ID
  date: DateTime
  duration: Float
  isArchived: Boolean
  isDeleted: Boolean
  isInvoiced: Boolean
  customer: CustomerCreateOneInput
  project: ProjectCreateOneInput
  service: ServiceCreateOneInput
}

"""An edge in a connection."""
type TimeSheetEntryEdge {
  """The item at the end of the edge."""
  node: TimeSheetEntry!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TimeSheetEntryOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  duration_ASC
  duration_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  isInvoiced_ASC
  isInvoiced_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TimeSheetEntryPreviousValues {
  id: ID!
  date: DateTime
  duration: Float
  isArchived: Boolean
  isDeleted: Boolean
  isInvoiced: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TimeSheetEntryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeSheetEntryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeSheetEntryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeSheetEntryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  duration: Float

  """All values that are not equal to given value."""
  duration_not: Float

  """All values that are contained in given list."""
  duration_in: [Float!]

  """All values that are not contained in given list."""
  duration_not_in: [Float!]

  """All values less than the given value."""
  duration_lt: Float

  """All values less than or equal the given value."""
  duration_lte: Float

  """All values greater than the given value."""
  duration_gt: Float

  """All values greater than or equal the given value."""
  duration_gte: Float
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  isInvoiced: Boolean

  """All values that are not equal to given value."""
  isInvoiced_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type TimeSheetEntrySubscriptionPayload {
  mutation: MutationType!
  node: TimeSheetEntry
  updatedFields: [String!]
  previousValues: TimeSheetEntryPreviousValues
}

input TimeSheetEntrySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeSheetEntrySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeSheetEntrySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeSheetEntrySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TimeSheetEntryWhereInput
}

input TimeSheetEntryUpdateDataInput {
  date: DateTime
  duration: Float
  isArchived: Boolean
  isDeleted: Boolean
  isInvoiced: Boolean
  customer: CustomerUpdateOneInput
  project: ProjectUpdateOneInput
  service: ServiceUpdateOneInput
  timeSheet: TimeSheetUpdateOneWithoutTimeSheetEntriesInput
}

input TimeSheetEntryUpdateInput {
  date: DateTime
  duration: Float
  isArchived: Boolean
  isDeleted: Boolean
  isInvoiced: Boolean
  customer: CustomerUpdateOneInput
  project: ProjectUpdateOneInput
  service: ServiceUpdateOneInput
  timeSheet: TimeSheetUpdateOneWithoutTimeSheetEntriesInput
}

input TimeSheetEntryUpdateManyDataInput {
  date: DateTime
  duration: Float
  isArchived: Boolean
  isDeleted: Boolean
  isInvoiced: Boolean
}

input TimeSheetEntryUpdateManyMutationInput {
  date: DateTime
  duration: Float
  isArchived: Boolean
  isDeleted: Boolean
  isInvoiced: Boolean
}

input TimeSheetEntryUpdateManyWithoutTimeSheetInput {
  create: [TimeSheetEntryCreateWithoutTimeSheetInput!]
  connect: [TimeSheetEntryWhereUniqueInput!]
  set: [TimeSheetEntryWhereUniqueInput!]
  disconnect: [TimeSheetEntryWhereUniqueInput!]
  delete: [TimeSheetEntryWhereUniqueInput!]
  update: [TimeSheetEntryUpdateWithWhereUniqueWithoutTimeSheetInput!]
  updateMany: [TimeSheetEntryUpdateManyWithWhereNestedInput!]
  deleteMany: [TimeSheetEntryScalarWhereInput!]
  upsert: [TimeSheetEntryUpsertWithWhereUniqueWithoutTimeSheetInput!]
}

input TimeSheetEntryUpdateManyWithWhereNestedInput {
  where: TimeSheetEntryScalarWhereInput!
  data: TimeSheetEntryUpdateManyDataInput!
}

input TimeSheetEntryUpdateOneInput {
  create: TimeSheetEntryCreateInput
  connect: TimeSheetEntryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TimeSheetEntryUpdateDataInput
  upsert: TimeSheetEntryUpsertNestedInput
}

input TimeSheetEntryUpdateWithoutTimeSheetDataInput {
  date: DateTime
  duration: Float
  isArchived: Boolean
  isDeleted: Boolean
  isInvoiced: Boolean
  customer: CustomerUpdateOneInput
  project: ProjectUpdateOneInput
  service: ServiceUpdateOneInput
}

input TimeSheetEntryUpdateWithWhereUniqueWithoutTimeSheetInput {
  where: TimeSheetEntryWhereUniqueInput!
  data: TimeSheetEntryUpdateWithoutTimeSheetDataInput!
}

input TimeSheetEntryUpsertNestedInput {
  update: TimeSheetEntryUpdateDataInput!
  create: TimeSheetEntryCreateInput!
}

input TimeSheetEntryUpsertWithWhereUniqueWithoutTimeSheetInput {
  where: TimeSheetEntryWhereUniqueInput!
  update: TimeSheetEntryUpdateWithoutTimeSheetDataInput!
  create: TimeSheetEntryCreateWithoutTimeSheetInput!
}

input TimeSheetEntryWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeSheetEntryWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeSheetEntryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeSheetEntryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  duration: Float

  """All values that are not equal to given value."""
  duration_not: Float

  """All values that are contained in given list."""
  duration_in: [Float!]

  """All values that are not contained in given list."""
  duration_not_in: [Float!]

  """All values less than the given value."""
  duration_lt: Float

  """All values less than or equal the given value."""
  duration_lte: Float

  """All values greater than the given value."""
  duration_gt: Float

  """All values greater than or equal the given value."""
  duration_gte: Float
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  isInvoiced: Boolean

  """All values that are not equal to given value."""
  isInvoiced_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  customer: CustomerWhereInput
  project: ProjectWhereInput
  service: ServiceWhereInput
  timeSheet: TimeSheetWhereInput
}

input TimeSheetEntryWhereUniqueInput {
  id: ID
}

enum TimeSheetOrderByInput {
  id_ASC
  id_DESC
  endsAt_ASC
  endsAt_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  number_ASC
  number_DESC
  startsAt_ASC
  startsAt_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TimeSheetPreviousValues {
  id: ID!
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  number: Int
  startsAt: DateTime
  status: TimeSheetStatus
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TimeSheetStatus {
  APPROVED
  DRAFT
  FINALISED
}

type TimeSheetSubscriptionPayload {
  mutation: MutationType!
  node: TimeSheet
  updatedFields: [String!]
  previousValues: TimeSheetPreviousValues
}

input TimeSheetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeSheetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeSheetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeSheetSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TimeSheetWhereInput
}

input TimeSheetUpdateDataInput {
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  number: Int
  startsAt: DateTime
  status: TimeSheetStatus
  attachments: AttachmentUpdateManyInput
  company: CompanyUpdateOneRequiredInput
  preview: AttachmentUpdateOneInput
  timeSheetEntries: TimeSheetEntryUpdateManyWithoutTimeSheetInput
  user: UserUpdateOneInput
}

input TimeSheetUpdateInput {
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  number: Int
  startsAt: DateTime
  status: TimeSheetStatus
  attachments: AttachmentUpdateManyInput
  company: CompanyUpdateOneRequiredInput
  preview: AttachmentUpdateOneInput
  timeSheetEntries: TimeSheetEntryUpdateManyWithoutTimeSheetInput
  user: UserUpdateOneInput
}

input TimeSheetUpdateManyMutationInput {
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  number: Int
  startsAt: DateTime
  status: TimeSheetStatus
}

input TimeSheetUpdateOneInput {
  create: TimeSheetCreateInput
  connect: TimeSheetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TimeSheetUpdateDataInput
  upsert: TimeSheetUpsertNestedInput
}

input TimeSheetUpdateOneWithoutTimeSheetEntriesInput {
  create: TimeSheetCreateWithoutTimeSheetEntriesInput
  connect: TimeSheetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TimeSheetUpdateWithoutTimeSheetEntriesDataInput
  upsert: TimeSheetUpsertWithoutTimeSheetEntriesInput
}

input TimeSheetUpdateWithoutTimeSheetEntriesDataInput {
  endsAt: DateTime
  isArchived: Boolean
  isDeleted: Boolean
  number: Int
  startsAt: DateTime
  status: TimeSheetStatus
  attachments: AttachmentUpdateManyInput
  company: CompanyUpdateOneRequiredInput
  preview: AttachmentUpdateOneInput
  user: UserUpdateOneInput
}

input TimeSheetUpsertNestedInput {
  update: TimeSheetUpdateDataInput!
  create: TimeSheetCreateInput!
}

input TimeSheetUpsertWithoutTimeSheetEntriesInput {
  update: TimeSheetUpdateWithoutTimeSheetEntriesDataInput!
  create: TimeSheetCreateWithoutTimeSheetEntriesInput!
}

input TimeSheetWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeSheetWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeSheetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeSheetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  endsAt: DateTime

  """All values that are not equal to given value."""
  endsAt_not: DateTime

  """All values that are contained in given list."""
  endsAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endsAt_not_in: [DateTime!]

  """All values less than the given value."""
  endsAt_lt: DateTime

  """All values less than or equal the given value."""
  endsAt_lte: DateTime

  """All values greater than the given value."""
  endsAt_gt: DateTime

  """All values greater than or equal the given value."""
  endsAt_gte: DateTime
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  startsAt: DateTime

  """All values that are not equal to given value."""
  startsAt_not: DateTime

  """All values that are contained in given list."""
  startsAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startsAt_not_in: [DateTime!]

  """All values less than the given value."""
  startsAt_lt: DateTime

  """All values less than or equal the given value."""
  startsAt_lte: DateTime

  """All values greater than the given value."""
  startsAt_gt: DateTime

  """All values greater than or equal the given value."""
  startsAt_gte: DateTime
  status: TimeSheetStatus

  """All values that are not equal to given value."""
  status_not: TimeSheetStatus

  """All values that are contained in given list."""
  status_in: [TimeSheetStatus!]

  """All values that are not contained in given list."""
  status_not_in: [TimeSheetStatus!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  attachments_every: AttachmentWhereInput
  attachments_some: AttachmentWhereInput
  attachments_none: AttachmentWhereInput
  company: CompanyWhereInput
  preview: AttachmentWhereInput
  timeSheetEntries_every: TimeSheetEntryWhereInput
  timeSheetEntries_some: TimeSheetEntryWhereInput
  timeSheetEntries_none: TimeSheetEntryWhereInput
  user: UserWhereInput
}

input TimeSheetWhereUniqueInput {
  id: ID
}

enum UOM {
  EA
}

type User implements Node {
  id: ID!
  contactNumber: Json
  email: String
  firstName: String
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  isRoot: Boolean
  jobTitle: String
  lastName: String
  password: String
  secondAuthEnabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  contactNumber: Json
  email: String
  firstName: String
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  isRoot: Boolean
  jobTitle: String
  lastName: String
  password: String
  secondAuthEnabled: Boolean
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  contactNumber_ASC
  contactNumber_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  isActive_ASC
  isActive_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  isRoot_ASC
  isRoot_DESC
  jobTitle_ASC
  jobTitle_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  secondAuthEnabled_ASC
  secondAuthEnabled_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  contactNumber: Json
  email: String
  firstName: String
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  isRoot: Boolean
  jobTitle: String
  lastName: String
  password: String
  secondAuthEnabled: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  contactNumber: Json
  email: String
  firstName: String
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  isRoot: Boolean
  jobTitle: String
  lastName: String
  password: String
  secondAuthEnabled: Boolean
}

input UserUpdateInput {
  contactNumber: Json
  email: String
  firstName: String
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  isRoot: Boolean
  jobTitle: String
  lastName: String
  password: String
  secondAuthEnabled: Boolean
}

input UserUpdateManyMutationInput {
  contactNumber: Json
  email: String
  firstName: String
  isActive: Boolean
  isArchived: Boolean
  isDeleted: Boolean
  isRoot: Boolean
  jobTitle: String
  lastName: String
  password: String
  secondAuthEnabled: Boolean
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  isRoot: Boolean

  """All values that are not equal to given value."""
  isRoot_not: Boolean
  jobTitle: String

  """All values that are not equal to given value."""
  jobTitle_not: String

  """All values that are contained in given list."""
  jobTitle_in: [String!]

  """All values that are not contained in given list."""
  jobTitle_not_in: [String!]

  """All values less than the given value."""
  jobTitle_lt: String

  """All values less than or equal the given value."""
  jobTitle_lte: String

  """All values greater than the given value."""
  jobTitle_gt: String

  """All values greater than or equal the given value."""
  jobTitle_gte: String

  """All values containing the given string."""
  jobTitle_contains: String

  """All values not containing the given string."""
  jobTitle_not_contains: String

  """All values starting with the given string."""
  jobTitle_starts_with: String

  """All values not starting with the given string."""
  jobTitle_not_starts_with: String

  """All values ending with the given string."""
  jobTitle_ends_with: String

  """All values not ending with the given string."""
  jobTitle_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  secondAuthEnabled: Boolean

  """All values that are not equal to given value."""
  secondAuthEnabled_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input UserWhereUniqueInput {
  id: ID
}

type VaccineBrand implements Node {
  id: ID!
  name: String
}

"""A connection to a list of items."""
type VaccineBrandConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VaccineBrandEdge]!
  aggregate: AggregateVaccineBrand!
}

input VaccineBrandCreateInput {
  id: ID
  name: String
}

input VaccineBrandCreateOneInput {
  create: VaccineBrandCreateInput
  connect: VaccineBrandWhereUniqueInput
}

"""An edge in a connection."""
type VaccineBrandEdge {
  """The item at the end of the edge."""
  node: VaccineBrand!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VaccineBrandOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type VaccineBrandPreviousValues {
  id: ID!
  name: String
}

type VaccineBrandSubscriptionPayload {
  mutation: MutationType!
  node: VaccineBrand
  updatedFields: [String!]
  previousValues: VaccineBrandPreviousValues
}

input VaccineBrandSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VaccineBrandSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VaccineBrandSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VaccineBrandSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VaccineBrandWhereInput
}

input VaccineBrandUpdateDataInput {
  name: String
}

input VaccineBrandUpdateInput {
  name: String
}

input VaccineBrandUpdateManyMutationInput {
  name: String
}

input VaccineBrandUpdateOneInput {
  create: VaccineBrandCreateInput
  connect: VaccineBrandWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: VaccineBrandUpdateDataInput
  upsert: VaccineBrandUpsertNestedInput
}

input VaccineBrandUpsertNestedInput {
  update: VaccineBrandUpdateDataInput!
  create: VaccineBrandCreateInput!
}

input VaccineBrandWhereInput {
  """Logical AND on all given filters."""
  AND: [VaccineBrandWhereInput!]

  """Logical OR on all given filters."""
  OR: [VaccineBrandWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VaccineBrandWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input VaccineBrandWhereUniqueInput {
  id: ID
}

type WareHouse implements Node {
  id: ID!
  name: String
  company: Company!
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type WareHouseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WareHouseEdge]!
  aggregate: AggregateWareHouse!
}

input WareHouseCreateInput {
  id: ID
  name: String
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyCreateOneInput!
}

input WareHouseCreateOneInput {
  create: WareHouseCreateInput
  connect: WareHouseWhereUniqueInput
}

"""An edge in a connection."""
type WareHouseEdge {
  """The item at the end of the edge."""
  node: WareHouse!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WareHouseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  isArchived_ASC
  isArchived_DESC
  isDeleted_ASC
  isDeleted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type WareHousePreviousValues {
  id: ID!
  name: String
  isArchived: Boolean
  isDeleted: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type WareHouseSubscriptionPayload {
  mutation: MutationType!
  node: WareHouse
  updatedFields: [String!]
  previousValues: WareHousePreviousValues
}

input WareHouseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WareHouseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WareHouseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WareHouseSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WareHouseWhereInput
}

input WareHouseUpdateDataInput {
  name: String
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyUpdateOneRequiredInput
}

input WareHouseUpdateInput {
  name: String
  isArchived: Boolean
  isDeleted: Boolean
  company: CompanyUpdateOneRequiredInput
}

input WareHouseUpdateManyMutationInput {
  name: String
  isArchived: Boolean
  isDeleted: Boolean
}

input WareHouseUpdateOneInput {
  create: WareHouseCreateInput
  connect: WareHouseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WareHouseUpdateDataInput
  upsert: WareHouseUpsertNestedInput
}

input WareHouseUpsertNestedInput {
  update: WareHouseUpdateDataInput!
  create: WareHouseCreateInput!
}

input WareHouseWhereInput {
  """Logical AND on all given filters."""
  AND: [WareHouseWhereInput!]

  """Logical OR on all given filters."""
  OR: [WareHouseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WareHouseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  isArchived: Boolean

  """All values that are not equal to given value."""
  isArchived_not: Boolean
  isDeleted: Boolean

  """All values that are not equal to given value."""
  isDeleted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  company: CompanyWhereInput
}

input WareHouseWhereUniqueInput {
  id: ID
}
